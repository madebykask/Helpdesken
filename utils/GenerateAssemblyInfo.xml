<?xml version="1.0" encoding="utf-8" ?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
	       <AssemblyFileName>..\dhHelpdeskNG\CommonAssembly\SharedAssemblyInfo.cs</AssemblyFileName>
		<!-- If changing this, change var match.. in C# code also  -->
		<TagMatchTemplate>v*.*.*</TagMatchTemplate>
		<ExitCode>0</ExitCode>
		<GitExe>c:\Program Files\Git\bin\git.exe</GitExe>
		<!--<GitExe>C:\Program Files (86)\Git\bin\git.exe</GitExe>	 -->
	</PropertyGroup>

  <UsingTask
    TaskName="GetVersion"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll" >
    <ParameterGroup>
      <VersionString ParameterType="System.String" Required="true" />
      <Version ParameterType="System.String" Output="true" />
      <FullVersion ParameterType="System.String" Output="true" />
      <Commit ParameterType="System.String" Output="true" />
      <VersionSuffix ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <!--<Reference Include="" />-->
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          var match = Regex.Match(VersionString, @"^v(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)-(?<revision>\d+)-g(?<commit>[a-z0-9]+)$");
          int major, minor, patch, revision;
          Int32.TryParse(match.Groups["major"].Value, out major);
          Int32.TryParse(match.Groups["minor"].Value, out minor);
          Int32.TryParse(match.Groups["patch"].Value, out patch);
          Int32.TryParse(match.Groups["revision"].Value, out revision);
          _Version = new Version(major, minor, patch, revision).ToString();
	  _FullVersion = string.Format("{0}.{1}.{2}.{3}-{4}", major, minor, patch, revision, match.Groups["commit"].Value);
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask
    TaskName="ExistsInPath"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll" >
    <ParameterGroup>
      <FileName ParameterType="System.String" Required="true" />
      <Exists ParameterType="System.Boolean" Output="true" />
    </ParameterGroup>
    <Task>
      <!--<Reference Include="" />-->
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        var values = Environment.GetEnvironmentVariable("PATH");
        foreach (var path in values.Split(';')) {
            var fullPath = Path.Combine(path, FileName);
            if (File.Exists(fullPath)) {
                Exists = true;
                return true;
            }
        }
        Exists = false;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="CreateCommonVersionInfo" BeforeTargets="CoreCompile">
    <Message Importance="high" Text="CreateCommonVersionInfo" />

      
    <Exec Command="&quot;$(GitExe)&quot; describe --tags --long --match $(TagMatchTemplate) > $(ProjectDir)version.txt" Outputs="$(ProjectDir)version.txt" WorkingDirectory="$(SolutionDir)" IgnoreExitCode="true" >
      <Output TaskParameter="ExitCode" PropertyName="ExitCode" />
    </Exec>
    <Message Importance="high" Text="Calling git failed with exit code $(ExitCode)" Condition="'$(ExitCode)'!='0'" />
    
    <ReadLinesFromFile File="$(ProjectDir)version.txt" Condition="'$(ExitCode)'=='0'">
      <Output TaskParameter="Lines" ItemName="OutputLines"/>
    </ReadLinesFromFile>    
    <Message Importance="High" Text="Tags: @(OutputLines)" Condition="'$(ExitCode)'=='0'"/>
    <Delete Condition="Exists('$(ProjectDir)version.txt')" Files="$(ProjectDir)version.txt"/>

    <GetVersion VersionString="@(OutputLines)" Condition="'$(ExitCode)'=='0'">
      <Output TaskParameter="Version" PropertyName="VersionString"/>
      <Output TaskParameter="FullVersion" PropertyName="FullVersion"/>
    </GetVersion>
      
    <PropertyGroup>
      <VersionString Condition="'$(VersionString)'==''">0.0.0.0</VersionString>
       <AssemblyFileName Condition="'$(AssemblyFileName)'==''">..\dhHelpdeskNG\CommonAssembly\SharedAssemblyInfo.cs</AssemblyFileName>
    </PropertyGroup>

    <Message Importance="High" Text="Creating $(ProjectDir)$(AssemblyFileName) with version $(FullVersion)" />

    <WriteLinesToFile Overwrite="true" File="$(ProjectDir)$(AssemblyFileName)" Encoding="UTF-8" Lines='using System.Reflection%3B

[assembly: AssemblyCompany("DH Solutions")]
[assembly: AssemblyCopyright("&#169; 2021 DH Solutions")]
[assembly: AssemblyVersion("$(VersionString)")]
[assembly: AssemblyFileVersion("$(VersionString)")]
[assembly: AssemblyInformationalVersion("$(FullVersion)")]

namespace DH.Helpdesk
{
    public static class Version
    {
        public const string FULL_VERSION = "$(FullVersion)"%3B
    }
}
' />
    <WriteLinesToFile Overwrite="true" File="$(ProjectDir)..\dhHelpdeskNG\CommonAssembly\SharedAssemblyInfo.vb" Encoding="UTF-8" Lines='Imports System.Reflection

&lt;Assembly: AssemblyCompany("DH Solutions")&gt;
&lt;Assembly: AssemblyCopyright("&#169; 2021 DH Solutions")&gt;
&lt;Assembly: AssemblyVersion("$(VersionString)")&gt;
&lt;Assembly: AssemblyFileVersion("$(VersionString)")&gt;
&lt;Assembly: AssemblyInformationalVersion("$(FullVersion)")&gt;

' />

<WriteLinesToFile Overwrite="true" File="$(ProjectDir)..\dhHelpdeskNG\DH.Helpdesk.WebMobile\src\environments\version.ts" Encoding="UTF-8" Lines='

// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT!
/* tslint:disable */
export const VERSION = {
	"version": "$(VersionString)",
    "fullVersion": "$(FullVersion)"
};
/* tslint:enable */

' />

<WriteLinesToFile Overwrite="true" File="$(ProjectDir)..\ExtendedCase\ExtendedCase.WebComponent\config\version.ts" Encoding="UTF-8" Lines='

// IMPORTANT: THIS FILE IS AUTO GENERATED! DO NOT MANUALLY EDIT!
/* tslint:disable */
export const VERSION = {
	"version": "$(VersionString)",
    "fullVersion": "$(FullVersion)"
};
/* tslint:enable */

' />

    
  </Target>
</Project>
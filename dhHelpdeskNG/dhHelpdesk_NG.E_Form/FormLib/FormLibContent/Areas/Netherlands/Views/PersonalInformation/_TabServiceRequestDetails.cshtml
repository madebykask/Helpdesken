@model DH.Helpdesk.EForm.FormLib.Models.FormModel
@using DH.Helpdesk.EForm.FormLib;
@using DH.Helpdesk.EForm.FormLib.Models;

@{
    var fillOldVal = TempData["oldValues"];
    var newfill = (List<KeyValuePair<string, string>>)fillOldVal;        
}

<div class="tab-pane active" id="ServiceRequestDetails">
    <div class="span8">
        <table class="table">
            <tr>
                <td class="tdstrong" colspan="2">
                    <h4>@Model.Translate("Details")</h4>
                </td>
                <td class="tdstrong">
                    <h4>@Model.Translate("Current record")</h4>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("Co-WorkerGlobalviewID")</td>
                <td>
                    @Model.Element("Co-WorkerGlobalviewID", false)
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("FirstName")</td>
                <td>
                    @Model.Element("FirstName", false)
                </td>
                <td>
                    <input type="hidden" class="oldValue"  id="OLD_FirstName" name="OLD_FirstName" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_FirstName").Select(x => x.Value).FirstOrDefault() : "")"/>
                    <em class="muted" id="emOLD_FirstName">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_FirstName").Select(x => x.Value).FirstOrDefault() : "")</em>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("LastName")</td>
                <td>
                    @Model.Element("LastName", false)</td>
                <td>
                    <input class="oldValue" type="hidden" id="OLD_LastName" name="OLD_LastName" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_LastName").Select(x => x.Value).FirstOrDefault() : "")"/>
                    <em class="muted" id="emOLD_LastName">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_LastName").Select(x => x.Value).FirstOrDefault() : "")</em>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("IKEAEmailAddress")</td>
                <td>
                    @Model.Element("IKEAEmailAddress", false)
                </td>
                <td>
                    <input type="hidden" class="oldValue" id="OLD_IKEAEmailAddress" name="OLD_IKEAEmailAddress" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_IKEAEmailAddress").Select(x => x.Value).FirstOrDefault() : "")"/>
                    <em class="muted" id="emOLD_IKEAEmailAddress">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_IKEAEmailAddress").Select(x => x.Value).FirstOrDefault() : "")</em>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("IKEANetworkID")</td>
                <td>
                    @Model.Element("IKEANetworkID", false)
                </td>
                <td>
                    <input type="hidden" class="oldValue" id="OLD_IKEANetworkID" name="OLD_IKEANetworkID" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_IKEANetworkID").Select(x => x.Value).FirstOrDefault() : "")"/>
                    <em class="muted" id="emOLD_IKEANetworkID">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_IKEANetworkID").Select(x => x.Value).FirstOrDefault() : "")</em>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("Company")</td>
                <td>
                    @Model.Element("Company")
                </td>
                <td>
                    <input type="hidden" class="oldValue"  id="OLD_Company" name="OLD_Company" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_Company").Select(x => x.Value).FirstOrDefault() : "")"/>
                    <em class="muted" id="emOLD_Company">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_Company").Select(x => x.Value).FirstOrDefault() : "")</em>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("BusinessUnit")</td>
                <td>
                    @Model.Element("BusinessUnit")
                </td>
                <td>
                    <input type="hidden" class="oldValue" id="OLD_BusinessUnit" name="OLD_BusinessUnit" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_BusinessUnit").Select(x => x.Value).FirstOrDefault() : "")"/>
                    <em class="muted" id="emOLD_BusinessUnit">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_BusinessUnit").Select(x => x.Value).FirstOrDefault() : "")</em>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("ServiceArea")</td>
                <td>
                    @Model.Element("ServiceArea")
                </td>
                <td>
                    <input type="hidden" class="oldValue"  id="OLD_ServiceArea" name="OLD_ServiceArea" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ServiceArea").Select(x => x.Value).FirstOrDefault() : "")"/>
                    <em class="muted" id="emOLD_ServiceArea">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ServiceArea").Select(x => x.Value).FirstOrDefault() : "")</em>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("Department")</td>
                <td>
                    @Model.Element("Department")</td>
                <td>
                    <input type="hidden" class="oldValue" id="OLD_Department" name="OLD_Department" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_Department").Select(x => x.Value).FirstOrDefault() : "")"/>
                    <em class="muted" id="emOLD_Department">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_Department").Select(x => x.Value).FirstOrDefault() : "")</em>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("TECoWorker")</td>
                <td>
                    @Model.Element("TECoWorker")</td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("ChangeValidFrom")</td>
                <td>
                    @Model.Element("ChangeValidFrom")
                    <div id="notice_OldDate" style="display: none;" class="notice">
                        @Model.Translate("The date you've entered is in the past. Are you sure you want to backdate Change date?")
                    </div>
                </td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("ChangeValidTo")</td>
                <td>
                    @Model.Element("ChangeValidTo")</td>
            </tr>
            <tr>
                <td class="tdstrong">@Model.Label("ServiceRequestPriority")</td>
                <td>
                    @Model.Element("ServiceRequestPriority")</td>
            </tr>
            @if(!FormLibUtils.IsSelfService())
            {
                <tr>
                    <td class="tdstrong">@Model.Translate("SLA")</td>
                    <td>
                        @if(Model.Contract.CaseNumber != null)
                        {
                            @Model.Translate(Model.Contract.PriorityName);
                        }
                        else
                        {
                            if(Model.Form != null)
                            {
                            @Model.Translate(Model.Form.PriorityName);
                            }
                        }
                    </td>
                </tr>   
            }
            @Html.Partial("_InternalLogNoteV2", Model)
        </table>
    </div>

    <input type="hidden" id="CustomerId" value="@Model.Form.CustomerId" />
    <input type="hidden" id="formGuid" value="@Model.FormGuid" />
</div>
<script>
    var nowTemp = new Date();
    var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);

    var noticeOldDate = $('#notice_OldDate');
    $('#date_ChangeValidFrom').not(".disabled").datepicker({
        onRender: function (date) {
            return '';
        }
    }).on('changeDate', function (ev) {

        noticeOldDate.hide();

        if (ev.date.valueOf() < now.valueOf())
            noticeOldDate.show();
    }).data('datepicker');

    $('#ChangeValidFrom').change(function () {
        var validFrom = $('#ChangeValidFrom').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dvalidFrom = APIGlobal.DateTime.parseDate(validFrom, format);
        noticeOldDate.hide();
        if (dvalidFrom.valueOf() < now.valueOf())
            noticeOldDate.show();
    });
</script>

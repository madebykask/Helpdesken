@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
@using ECT.FormLib.Pdfs;
@using ECT.Model.Entities;


@functions{           
    public class ContractItems
    {
        public ContractItems(int id, string rule, string answer)
        {
            this.Id = id;
            this.Rule = rule;
            this.Answer = answer;
        }

        public int Id { get; set; }
        public string Rule { get; set; } 
        public string Answer { get; set; }
        
     }
 }

@{
    Layout = null;
    Model.Language = "nl";

    int payscalelevel = 0;

    try
    {
        payscalelevel = int.Parse(Model.GetDocumentAnswer("PayScaleLevel"));
    }
    catch (Exception)
    {
    }

    int allowancesamountunits = 0;

    try
    {
        allowancesamountunits = int.Parse(Model.GetDocumentAnswer("AllowancesAmountUnits"));
    }
    catch (Exception)
    {
    }
    
}

 @functions{
     public static bool dateRange(DateTime? startDate, DateTime? endDate, int months, int days)
                {
                    if (!startDate.HasValue || !endDate.HasValue) return false;
                    DateTime a = startDate.Value.AddMonths(months);
                    a = a.AddDays(days);
                    int result = DateTime.Compare(endDate.Value, a);
                    return result >= 0;
                }
            }
<!DOCTYPE html>
<html>
<head>
    @*<link href="@Model.Contract.BaseUrl/FormLibContent/assets/css/documents.css" rel="stylesheet" type="text/css" />*@
    @Model.GetStyleAnswer("GetStyleLink")
    @Html.Partial("../Shared/Pdfs/_Styles", Model)
    @Model.GetStyleAnswer("GetStyles")
</head>
<body>
        <div class="default-page">
@Html.Partial("../Shared/Pdfs/_Debug", Model)
    @Html.Partial("../Shared/Pdfs/_SectionAddressTop", Model)
    <p>Betreft: arbeidsovereenkomst<br />
        <br />
        Beste @Model.GetDocumentAnswer("FirstName", true),
    </p>

    <p>Gefeliciteerd met je nieuwe baan! Met dit flatpack verwelkomen we je als nieuwe collega bij IKEA. Met het boekje Mijn IKEA willen we laten zien waar IKEA voor staat en geven we praktische informatie over werken bij IKEA. Daarnaast informeren we je in deze brief graag over jouw indiensttreding en de daarbij behorende documenten.</p>
    <p>Tijdens het sollicitatiegesprek zijn er al een aantal gegevens verzameld. Aan de hand van deze persoonlijke gegevens en de eerder besproken arbeidsvoorwaarden is een contract opgesteld. Je arbeidsovereenkomst is in tweevoud meegestuurd. Graag ontvangen wij hiervan één getekend exemplaar retour. Het andere exemplaar kan je gebruiken voor je eigen administratie. De IKEA CAO, de IKEA Group Code of Conduct en de regels die zijn opgenomen in Mijn IKEA maken ook onderdeel uit van je arbeidsovereenkomst. Mocht je het met één of meerdere bepalingen uit het contract niet eens zijn, dan ontvangen wij je reactie graag schriftelijk binnen 7 dagen.</p>

    Verder vind je nog de volgende zaken bijgesloten:
    <ul class="nomargin_ul">
        <li>Een toelichting op je salarisbetaling bij IKEA.</li>
        <li>IKEA wil graag weten of je loonheffingskorting wilt toepassen over het salaris dat je ontvangt. Je kan dit aangeven op de bijgevoegde loonbelastingverklaring.</li>
        <li>Wij sturen je tevens de omschrijving van je nieuwe functie (een functieprofiel) toe. We adviseren je deze door te lezen en mee te nemen op je eerste werkdag. Aan de hand van dit functieprofiel worden ook het afspraken- en beoordelingsgesprek gevoerd.</li>
        <li>Bijlage ‘Altijd toegang tot jouw IKEA’, hier kan je onderstaande zaken bekijken, wijzigen en aanvragen.</li>
            <ul class="dash_ul">
                <li>&nbsp;&nbsp;HR gerelateerde informatie, waaronder de IKEA CAO</li>
                <li>&nbsp;&nbsp;Salarisstrook en persoonsgegevens</li>
                <li>&nbsp;&nbsp;Rooster en verlofaanvragen</li>
                <li>&nbsp;&nbsp;Bestellen van je bedrijfskleding</li>
            </ul>
    </ul>
    <br />
    Om je indiensttreding volledig te kunnen maken ontvangen wij graag binnen 5 dagen de volgende documenten retour:
    <ul>
        <li>één ondertekend exemplaar van je arbeidsovereenkomst</li>
        <li>een ingevulde loonbelastingverklaring</li>
        <li>een ingevuld formulier persoonsgegevens </li>
    </ul>

    <p>Je kan deze documenten retour sturen in de bijgesloten antwoordenvelop.</p>

    <p>We willen je er graag op wijzen dat zonder deze documenten je arbeidsovereenkomst niet volledig is. Dit heeft gevolgen voor de start van je dienstverband en voor je salarisbetaling.</p>

    <p>Op je eerste werkdag (deze datum gaat in overleg met je manager) verzoeken we je om een pasfoto te laten maken bij de receptie. Deze foto is voor je personeelspas, die je nodig hebt om toegang tot de vestiging te krijgen en voor tijdsregistratie van je gewerkte uren. Binnen 14 werkdagen kan je je personeelspas bij de receptie ophalen.</p>
    @*Paragraph appears if PM.CS.16 Type of benefit= "Company Car"*@

    @for (int i = 1; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
    {


        string MultipleNr = i.ToString();
        if (i == 1)
        {
            MultipleNr = "";
        }

        if (Model.GetDocumentAnswer("TypeOfBenefit" + MultipleNr).ToLower() == "Company Car".ToLower())
        {

            <p>
                Voor het regelen van je leaseauto kan je contact opnemen met Marion Blankenzee, General Accounting Co-worker, per telefoonnummer 020-5643888 of per e-mail: <a href="mailto:marion.blankenzee@IKEA.com">marion.blankenzee@IKEA.com</a>. 
            </p>

            @*Paragraph appears if PM.CS.18 Type of car= "necessity car without the option to drive privately"*@
            if (Model.GetDocumentAnswer("TypeOfCar" + MultipleNr).ToLower() == "necessity car without the option to drive privately".ToLower())
            {
                <p>
                    Wanneer je een lease-auto alleen zakelijk rijdt, dien je een verklaring “geen privégebruik auto” bij de belastingdienst aan te vragen. De kopie van de aanvraag stuur je op naar <a href="mailto:askssc.hr.nl@ikea.com">askssc.hr.nl@ikea.com</a> onder vermelding van “Geen privégebruik auto”. Wanneer je een definitieve goedkeuring ontvangt, kun je ook deze per mail versturen naar het Shared Service Centre. 
                </p>
            }
            break;
        }
    }

    <p>Om alvast kennis te maken met je nieuwe vestiging nodigen we je uit om met je familie en/of vrienden een dagje te komen winkelen. Daarom ontvang je hierbij  een tegoedbon voor het IKEA restaurant om deze dag iets te eten en te drinken en een IKEA cadeaupas om een artikel naar keuze te kopen. Op IKEA.com/nl kan je alvast inspiratie opdoen. Veel plezier!</p>

    <p>We hopen je hiermee voldoende te hebben geïnformeerd. Heb je vragen over je contract of over de andere documenten dan kan je contact opnemen met je manager of de HR afdeling van jouw vestiging.</p>

    We wensen je veel succes!

    @Html.Partial("../Shared/Pdfs/_SectionLineManagerPhone", Model)

    <table>
        <tr style="page-break-before: always;">
            <td>&nbsp;</td>
        </tr>
    </table>
    @Html.Partial("../Shared/Pdfs/_BarCode", Model)
    <h1>Arbeidsovereenkomst</h1>
    <p>Tussen IKEA B.V., hierna te noemen de werkgever, en</p>
    @Html.Partial("../Shared/Pdfs/_SectionAddress", Model)

    <p>
        Hierna te noemen medewerker wordt een arbeidsovereenkomst afgesloten waarvan de voorwaarden als volgt luiden:
    </p>

    @{
        var list = new List<PdfListItem>();
        var pdfList = new List<PdfListItem>();
        int Number = 1;
        int Letter = 0;
        
        //1
        string text1 = "Met ingang van " + Model.GetDocumentAnswer("ContractStartDate", true) + " treedt de medewerker bij de werkgever in dienst.";
        list.Add(new PdfListItem { Text = text1, Number = Number.ToString() });
        Number = Number + 1;
        
        //2
        string text2 = "De werknemer wordt aangesteld in de functie van " + Model.GetDocumentAnswer("PositionTitle", true) + " op het Service Office. Deze functie is ingedeeld in functieschaal " + Model.GetDocumentAnswer("PayScaleLevel", true) + ".";
        list.Add(new PdfListItem { Text = text2, Number = Number.ToString() });
        Number = Number + 1;
        
        //3
        if (Model.GetDocumentAnswer("EmploymentCategory").ToLower() == "Permanent".ToLower())
        {
            //Number = list.Count() + 1;
            
            string text3 = "Deze arbeidsovereenkomst wordt afgesloten voor onbepaalde tijd.";
            list.Add(new PdfListItem { Text = text3, Number = Number.ToString() });
            Number = Number + 1;
        }

        if (Model.GetDocumentAnswer("EmploymentCategory").ToLower() == "Temporary".ToLower())
        {
            //Number = list.Count() + 1;
            string text3 = "Deze arbeidsovereenkomst wordt afgesloten voor bepaalde tijd. De looptijd van het contract is van " + Model.GetDocumentAnswer("ContractStartDate", true) + " tot en met " + Model.GetDocumentAnswer("ContractEndDate", true) + " en eindigt derhalve van rechtswege aan het einde van de overeengekomen periode, zonder dat hiervoor enige opzegging is vereist.";
            list.Add(new PdfListItem { Text = text3, Number = Number.ToString() });
            Number = Number + 1;
        }
        
        //4
        //Number = list.Count() + 1;
        string text4 = "Partijen zijn gerechtigd om de arbeidsovereenkomst tussentijds tegen het einde van de kalendermaand op te zeggen met inachtneming van de wettelijke opzegtermijn.";
        list.Add(new PdfListItem { Text = text4, Number = Number.ToString() });
        Number = Number + 1;
     
        //5
        //Number = list.Count() + 1;
        string text5 = "Het dienstverband tussen werkgever en medewerker eindigt in ieder geval van rechtswege bij het bereiken van de pensioengerechtigde leeftijd door medewerker.";
        list.Add(new PdfListItem { Text = text5, Number = Number.ToString() });
        Number = Number + 1;

        //6
        string text6;

        //Paragraph appears if  OA15 Probation Period? = Yes And OA12 (Employment Category) = Permanent
        if (Model.GetDocumentAnswer("ProbationPeriod").ToLower() == "Yes".ToLower() && Model.GetDocumentAnswer("EmploymentCategory").ToLower() == "Permanent".ToLower())
        {
            text6 = "De eerste twee maanden van het dienstverband gelden als proeftijd. Tijdens de proeftijd hebben beide partijen het recht om het dienstverband met onmiddellijke ingang op te zeggen en te beëindigen.";
            list.Add(new PdfListItem { Text = text6, Number = Number.ToString() });
            Number = Number + 1;
        }

        //Paragraph appears if OA15 Probation Period? = Yes And OA12 (Employment Category) = Temporary
        if (Model.GetDocumentAnswer("ProbationPeriod").ToLower() == "Yes".ToLower() && Model.GetDocumentAnswer("EmploymentCategory").ToLower() == "Temporary".ToLower())
        {
            text6 = "De eerste maand van het dienstverband geldt als proeftijd. Tijdens de proeftijd hebben beide partijen het recht om het dienstverband met onmiddellijke ingang op te zeggen en te beëindigen.";
            list.Add(new PdfListItem { Text = text6, Number = Number.ToString() });
            Number = Number + 1;
        }

        //Paragraph appears if OA15 Probation Period? = No
        if (Model.GetDocumentAnswer("ProbationPeriod").ToLower() == "No".ToLower())
        {
            text6 = "Er is geen proeftijd van toepassing.";
            list.Add(new PdfListItem { Text = text6, Number = Number.ToString() });
            Number = Number + 1;
        }
        
        // OLD 7
        //string text7;
        
        //if (!string.IsNullOrEmpty(Model.GetAnswer("ContractStartDate")) && !string.IsNullOrEmpty(Model.GetAnswer("ContractEndDate")))
        //{
        //    if (dateRange(Model.ConvertToDateTime("ContractStartDate"), Model.ConvertToDateTime("ContractEndDate"), 6, -1))
        //    {
        //        //7
        //        //how to calculate dates
        //        text7 = "De eerste twee maanden van het dienstverband gelden als proeftijd. Tijdens de proeftijd hebben beide partijen het recht om het dienstverband met onmiddellijke ingang op te zeggen en te beëindigen.";
        //        list.Add(new PdfListItem { Text = text7, Number = Number.ToString() });
        //        Number = Number + 1;
        //    }               

        //    else
        //    {
        //        text7 = "Er is geen proeftijd van toepassing.";
        //        list.Add(new PdfListItem { Text = text7, Number = Number.ToString() });
        //        Number = Number + 1;        
        //    }
        //}
        
        //7
        //Number = list.Count() + 1;

        string text7 = "Het betreft een " + Model.Translate(Model.GetDocumentAnswer("ContractType", true)) + " dienstverband. Het gemiddeld te werken uren per week bedraagt " + Model.GetDocumentAnswer("ContractedHours", true) + " uur. De medewerker behoort tot de categorie ";
        if (Model.GetDocumentAnswer("PayrollCategory").ToLower() == "Juvenile Hourly".ToLower())
        {
            text7 += Model.Translate("hourly") + ".";
        }
        else if (Model.GetDocumentAnswer("PayrollCategory").ToLower() == "Juvenile Monthly".ToLower())
        {
            text7 += Model.Translate("monthly") + ".";
        }
        else
        {
            text7 += Model.Translate(Model.GetDocumentAnswer("PayrollCategory", true)) + ".";
        }
        list.Add(new PdfListItem { Text = text7, Number = Number.ToString() });
        Number = Number + 1;
        Letter = 0; //RESET

        
        // 8 
        var usedItems = new List<string>();
        var allRules8 = new List<ContractItems>();
        var hasText8d = false;
        var hasText8b = true;
        for (int i = 1; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
        {
            string MultipleNr = i.ToString();
            if (i == 1)
            {
                MultipleNr = "";
            }

            var rule1 = "TypeOfBenefit";
            var curTypeOfBenefitAnswer = Model.GetDocumentAnswer(rule1 + MultipleNr).ToLower();
            if (!string.IsNullOrEmpty(curTypeOfBenefitAnswer))
            {
                allRules8.Add(new ContractItems(i, rule1, curTypeOfBenefitAnswer));
            }

            var rule2 = "AllowancesType";
            var curAllowancesTypeAnswer = Model.GetDocumentAnswer(rule2 + MultipleNr).ToLower();
            if (!string.IsNullOrEmpty(curAllowancesTypeAnswer))
            {
                allRules8.Add(new ContractItems(i, rule2, curAllowancesTypeAnswer));
            }
        }
        
        
        string text8a = "";
        string text8b = "";
        string text8c = "";
        string text8d = "";
        
        //8a
        text8a = "Het salaris bedraagt € " + Model.GetDocumentAnswer("BasicPayAmount", true) + " bruto per maand. De salarisbetaling vindt telkens aan het einde van de kalendermaand plaats.";
        list.Add(new PdfListItem { Text = text8a, Number = Number.ToString() + NetherlandsPdfPage.GetLetter(Letter) });
        Letter = Letter + 1;
        
        //8b
        //Paragraph should be deleted if PM3 Allowance= Travel Allowance per month". Otherwise always applicable.
        var travelAnswers = allRules8.Where(r => r.Rule == "AllowancesType" && r.Answer == "Travel Allowance per month".ToLower())
                                    .ToList()
                                    .OrderBy(r => r.Id);
           if(travelAnswers.Any()) 
          {
                text8b = "";
                hasText8b = false;
           }
           else
          {                                   
                           
                string itemText = "De tegemoetkoming in de reiskosten wordt berekend conform de geldende IKEA CAO, artikel 29.";
                text8b += itemText;                
                list.Add(new PdfListItem { Text = text8b, Number = Number.ToString() + NetherlandsPdfPage.GetLetter(Letter) });
                Letter = Letter + 1;
          

            text8b = (hasText8b) ? "" + text8b : string.Empty;
          }//Paragraph should be deleted if PM3 Allowance= Travel Allowance per month". Otherwise always applicable.

        // OLD 8b 
        //for (int i = 1; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
        //{


        //    string MultipleNr = i.ToString();
        //    if (i == 1)
        //    {
        //        MultipleNr = "";
        //    }

        //    if (Model.GetDocumentAnswer("AllowancesType" + MultipleNr).ToLower() != "" && Model.GetDocumentAnswer("AllowancesType" + MultipleNr).ToLower() != "Travel Allowance per month".ToLower())
        //    {
        //        string temp = "De tegemoetkoming in de reiskosten wordt berekend conform de geldende IKEA CAO, artikel 29.";
        //        if (!text8b.Contains(temp))
        //        {
        //            text8b += temp;
        //            list.Add(new PdfListItem { Text = text8b, Number = Number.ToString() + NetherlandsPdfPage.GetLetter(Letter) });
        //            Letter = Letter + 1;
        //        }

        //    }           
        //}
        
        //8c
        for (int i = 1; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
        {


            string MultipleNr = i.ToString();
            if (i == 1)
            {
                MultipleNr = "";
            }

            if (Model.GetDocumentAnswer("TypeOfBenefit" + MultipleNr).ToLower() == "Company Car".ToLower())
            {
                text8c = "In deze functie heeft de medewerker recht op gebruik van een lease-auto categorie";
                if (Model.GetDocumentAnswer("Category" + MultipleNr).ToLower() == "Class 1".ToLower())
                {
                    text8c += " 1.";
                }
                else if (Model.GetDocumentAnswer("Category" + MultipleNr).ToLower() == "Class 2".ToLower())
                {
                    text8c +=  " 2.";
                }
               

                @*Paragraph appears if PM.CS.18 Type of car= "necessity car with the option to drive privately by paying € 250,- net a month"*@
                if (Model.GetDocumentAnswer("TypeOfCar" + MultipleNr).ToLower() == "necessity car with the option to drive privately by paying € 250,- net a month".ToLower())
                {
                    text8c += "<br /> De medewerker heeft de mogelijkheid om de lease-auto privé te rijden tegen een betaling van € 250,- netto per maand.";
                }
                
                @*Paragraph appears if PM.CS.18 Type of car= "necessity car without the option to drive privately"*@
                if (Model.GetDocumentAnswer("TypeOfCar" + MultipleNr).ToLower() == "necessity car without the option to drive privately".ToLower())
                {
                    text8c += "<br /> De medewerker kan de lease-auto alleen gebruiken voor zakelijke doeleinden. Medewerker dient hiervoor een verklaring “geen privégebruik auto” aan te vragen bij de belastingdienst.";
                }
                
                @*Paragraph appears if PM.CS.18 Type of car= "benefit car, for business and private use"*@
                if (Model.GetDocumentAnswer("TypeOfCar" + MultipleNr).ToLower() == "benefit car, for business and private use".ToLower())
                {
                    text8c += "<br /> De medewerker kan de lease-auto gebruiken voor zowel zakelijke als privé doeleinden.";
                }

                 var match = list.FirstOrDefault(stringToCheck => stringToCheck.Text.Contains(text8c));                 

                if (match == null)
                {
                    list.Add(new PdfListItem { Text = text8c, Number = Number.ToString() + NetherlandsPdfPage.GetLetter(Letter) });
                    Letter = Letter + 1;
                }
            }
        }
        
        //8d
        //var usedItems = new List<string>();        
        //var allRules8 = new List<ContractItems>(); 
        //var hasText8d = false;
        //for (int i = 1; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
        //{
        //    string MultipleNr = i.ToString();
        //    if (i == 1)
        //    {
        //        MultipleNr = "";
        //    }
            
        //    var rule1 = "TypeOfBenefit" ;
        //    var curTypeOfBenefitAnswer = Model.GetDocumentAnswer(rule1 + MultipleNr).ToLower();
        //    if (!string.IsNullOrEmpty(curTypeOfBenefitAnswer))
        //    {
        //        allRules8.Add(new ContractItems(i, rule1, curTypeOfBenefitAnswer));
        //    }
            
        //    var rule2 = "AllowancesType";
        //    var curAllowancesTypeAnswer = Model.GetDocumentAnswer(rule2 + MultipleNr).ToLower();
        //    if (!string.IsNullOrEmpty(curAllowancesTypeAnswer))
        //    {
        //        allRules8.Add(new ContractItems(i, rule2, curAllowancesTypeAnswer)); 
        //    }    
        //}

        //Paragraph appears if PM.CS.16 Type of benefit = Salary revision
        var salaryAnswers = allRules8.Where(r => r.Rule == "TypeOfBenefit" && r.Answer == "Salary revision".ToLower())
                                     .ToList()
                                     .OrderBy(r => r.Id);
        foreach (var salaryAnswer in salaryAnswers)
        {
            string MultipleNr = salaryAnswer.Id == 1 ? string.Empty : salaryAnswer.Id.ToString();
            hasText8d = true;

            string itemText = "<ul class=\"nomargin_ul\"><li>Eerste salarisrevisie: " + 
                              Model.GetDocumentAnswer("NextRevisionDate" + MultipleNr, true) + "</li></ul>";
            
            if (!usedItems.Contains(itemText))
            {
                text8d += itemText;
                usedItems.Add(itemText);
            }
            
        }//Salary revision


        //Paragraph appears if PM3 Allowance Type = Refurnishing allowance
        var refurnishingAnswers = allRules8.Where(r => r.Rule == "AllowancesType" && r.Answer == "Refurnishing allowance".ToLower())
                                     .ToList()
                                     .OrderBy(r => r.Id);
        foreach (var refurnishingAnswer in refurnishingAnswers)
        {
            string MultipleNr = refurnishingAnswer.Id == 1 ? string.Empty : refurnishingAnswer.Id.ToString();
            hasText8d = true;

            string itemText = "<ul class=\"nomargin_ul\"><li> Medewerker heeft recht op herinrichtingskosten conform CAO, artikel 26.</li></ul>";
            
            if (!usedItems.Contains(itemText))
            {
                text8d += itemText;
                usedItems.Add(itemText);
            }

        }//Refurnishing allowance


        //Paragraph appears if PM.CS.16 Type of benefit = Compensation for transportation cost
        var compensationAnswers = allRules8.Where(r => r.Rule == "TypeOfBenefit" && r.Answer == "Compensation transportation costs".ToLower())
                                           .ToList()
                                           .OrderBy(r => r.Id);
        foreach (var compensationAnswer in compensationAnswers)
        {
            string MultipleNr = compensationAnswer.Id == 1 ? string.Empty : compensationAnswer.Id.ToString();
            hasText8d = true;

            string itemText = "<ul class=\"nomargin_ul\"><li>Medewerker heeft recht op vergoeding transportkosten voor verhuizing conform CAO, artikel 26.</li></ul>";
                   
            if (!usedItems.Contains(itemText))
            {
                text8d += itemText;
                usedItems.Add(itemText);
            }
            
        }//Compensation transportation costs

        //Paragraph appears if PM3 Allowance Type= Expense Allowance
        var expenseAnswers = allRules8.Where(r => r.Rule == "AllowancesType" && r.Answer == "Expense Allowance".ToLower())
                                           .ToList()
                                           .OrderBy(r => r.Id);

        foreach (var expenseAnswer in expenseAnswers)
        {
            string MultipleNr = expenseAnswer.Id == 1 ? string.Empty : expenseAnswer.Id.ToString();
            hasText8d = true;

            string itemText = "<ul class=\"nomargin_ul\"><li>Als tegemoetkoming in kosten voor representatie en telefoongebruik ontvang je een algemene onkostenvergoeding van € " + 
                              Model.GetDocumentAnswer("AllowancesAmountUnits" + MultipleNr, true) + " bruto per maand.";

            itemText += (allowancesamountunits > 50)? " Dit is conform CAO artikel 28A.</li></ul>": "</li></ul>"; 
            
            if (!usedItems.Contains(itemText))
            {
                text8d += itemText;
                usedItems.Add(itemText);
            }

        }//Expense Allowance

        //Paragraph appears if PM3 Allowance Type= Telephone Allowance
        var telephoneAnswers = allRules8.Where(r => r.Rule == "AllowancesType" && r.Answer == "Telephone Allowance".ToLower())
                                        .ToList()
                                        .OrderBy(r => r.Id);

        foreach (var telephoneAnswer in telephoneAnswers)
        {
            string MultipleNr = telephoneAnswer.Id == 1 ? string.Empty : telephoneAnswer.Id.ToString();
            hasText8d = true;

            string itemText = "<ul class=\"nomargin_ul\"><li>Daarnaast ontvang je een telefoonvergoeding van € " + 
                              Model.GetDocumentAnswer("AllowancesAmountUnits" + MultipleNr, true) + " netto per maand.</li></ul>";
                    
            if (!usedItems.Contains(itemText))
            {
                text8d += itemText;
                usedItems.Add(itemText);
            }

        }//Telephone Allowance
        
       
        text8d = (hasText8d)? "Overige arbeidsvoorwaarden." + text8d : string.Empty;

        //#region old not sorted
        //for (int i = 1; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
        //{
            
        //    string MultipleNr = i.ToString();
        //    if (i == 1)
        //    {
        //        MultipleNr = "";
        //    }

        //    if (Model.GetDocumentAnswer("TypeOfBenefit" + MultipleNr).ToLower() == "Salary revision".ToLower() ||
        //            Model.GetDocumentAnswer("AllowancesType" + MultipleNr).ToLower() == "Refurnishing allowance".ToLower() || 
        //            Model.GetDocumentAnswer("TypeOfBenefit" + MultipleNr).ToLower() == "Compensation transportation costs".ToLower() || 
        //            Model.GetDocumentAnswer("AllowancesType" + MultipleNr).ToLower() == "Expense Allowance".ToLower() || 
        //            Model.GetDocumentAnswer("AllowancesType" + MultipleNr).ToLower() == "Telephone Allowance".ToLower())
        //    {
        //        if (text8d.Length == 0)
        //        {

        //            text8d = "Overige arbeidsvoorwaarden.";
        //        }
        //        //Letter = Letter + 1;
        //        //string text8d = "Overige arbeidsvoorwaarden.";

        //        //"Paragraph appears if PM.CS.16 Type of benefit = Salary revision"
        //        if (Model.GetDocumentAnswer("TypeOfBenefit" + MultipleNr).ToLower() == "Salary revision".ToLower())
        //        {
        //            //text8d += "<ul class=\"nomargin_ul\"><li>Eerste salarisrevisie: " + Model.GetDocumentAnswer("NextRevisionDate", true) + "</li></ul>";
        //            string temp = "<ul class=\"nomargin_ul\"><li>Eerste salarisrevisie: " + Model.GetDocumentAnswer("NextRevisionDate" + MultipleNr, true) + "</li></ul>";

        //            if (!text8d.Contains(temp))
        //            {
        //                text8d += temp;
        //            }
        //        }
                
        //        //"Paragraph appears if PM.CS.16 Type of benefit = Refurnishing allowance"
        //        if (Model.GetDocumentAnswer("TypeOfBenefit" + MultipleNr).ToLower() == "Refurnishing allowance".ToLower())
        //        {
        //            //text8d += "<ul class=\"nomargin_ul\"><li>Medewerker heeft recht op herinrichtingskosten conform CAO, artikel 26.</li></ul>";
        //            string temp = "";
        //            text8d += "<ul class=\"nomargin_ul\"><li> Medewerker heeft recht op herinrichtingskosten conform CAO, artikel 26.</li></ul>";

        //            if (!text8d.Contains(temp))
        //            {
        //                text8d += temp;
        //            }
        //        }

        //        //"Paragraph appears if PM.CS.16 Type of benefit = Compensation for transportation cost"
        //        if (Model.GetDocumentAnswer("TypeOfBenefit" + MultipleNr).ToLower() == "Compensation transportation costs".ToLower())
        //        {
        //            //text8d += "<ul class=\"nomargin_ul\"><li>Medewerker heeft recht op vergoeding transportkosten voor verhuizing conform CAO, artikel 26.</li></ul>";
                    
        //            string temp = "<ul class=\"nomargin_ul\"><li>Medewerker heeft recht op vergoeding transportkosten voor verhuizing conform CAO, artikel 26.</li></ul>";
                    
        //            if (!text8d.Contains(temp))
        //            {
        //                text8d += temp;
        //            }
        //        }
                
        //        //"Paragraph appears if PM.CS.16 Allowance Type = Expense Allowance"
        //        if (Model.GetDocumentAnswer("AllowancesType" + MultipleNr).ToLower() == "Expense Allowance".ToLower())
        //        {
        //            //text8d = text8d + "<ul class=\"nomargin_ul\"><li>Als tegemoetkoming in kosten voor representatie en telefoongebruik ontvang je een algemene onkostenvergoeding van € " + Model.GetDocumentAnswer("AllowancesAmountUnits", true) + " bruto per maand.";
        //            // Delete the following sentence if <Amount/Units>PM4 is > 
        //            //if (allowancesamountunits > 50)
        //            //{
        //            //    text8d += " Dit is conform CAO artikel 28A.</li></ul>";
        //            //}
        //            //else
        //            //{
        //            //    text8d += "</li></ul>";
        //            //}



        //            string temp = "<ul class=\"nomargin_ul\"><li>Als tegemoetkoming in kosten voor representatie en telefoongebruik ontvang je een algemene onkostenvergoeding van € " + Model.GetDocumentAnswer("AllowancesAmountUnits" + MultipleNr, true) + " bruto per maand.";

        //            if (allowancesamountunits > 50)
        //            {
        //                temp += " Dit is conform CAO artikel 28A.</li></ul>";
        //            }
        //            else
        //            {
        //                temp += "</li></ul>";
        //            }
                    
        //            if (!text8d.Contains(temp))
        //            {
        //                text8d += temp;
        //            }
        //        }
                
        //        //"Paragraph appears if PM.CS.16 Allowance Type = Telephone Allowance"
        //        if (Model.GetDocumentAnswer("AllowancesType" + MultipleNr).ToLower() == "Telephone Allowance".ToLower())
        //        {
        //            //text8d += "<ul class=\"nomargin_ul\"><li>Daarnaast ontvang je een telefoonvergoeding van € " + Model.GetDocumentAnswer("AllowancesAmountUnits", true) + " netto per maand.</li></ul>";
        //            string temp = "<ul class=\"nomargin_ul\"><li>Daarnaast ontvang je een telefoonvergoeding van € " + Model.GetDocumentAnswer("AllowancesAmountUnits" + MultipleNr, true) + " netto per maand.</li></ul>";
        //            if (!text8d.Contains(temp))
        //            {
        //                text8d += temp;
        //            }
        //        }
                
        //        //list.Add(new PdfListItem { Text = text8d, Number = Number.ToString() + NetherlandsPdfPage.GetLetter(Letter) });
        //    }
        //}
        //#endregion old not sorted
        
        //Add text if not empty
        if (!string.IsNullOrEmpty(text8d))
        {
            list.Add(new PdfListItem { Text = text8d, Number = Number.ToString() + NetherlandsPdfPage.GetLetter(Letter) });
                
            //Letter = Letter + 1;
        }

        //Add number if any paragraph in 8 have text..
        if (text8a.Length > 0 | text8b.Length > 0 | text8c.Length > 0 | text8d.Length > 0)
        { 
            Number = Number + 1;
        } 
        
              
        //9
        //Number = list.Count() + 1;
        
        string text9 = "Op deze arbeidsovereenkomst is het pensioenreglement van toepassing als bedoeld in artikel 10 van de IKEA CAO.";
        list.Add(new PdfListItem { Text = text9, Number = Number.ToString() });
        Number = Number + 1;

        //10
        if( Model.GetDocumentAnswer("PayScaleType").ToLower() == "IKEA NL CAO".ToLower())
        {
            //Number = list.Count() + 1;
            
            string text10 = "Op deze arbeidsovereenkomst is de laatst overeengekomen IKEA CAO van toepassing, ook als de looptijd daarvan is verstreken en nog geen nieuwe cao tot stand is gekomen. Indien de IKEA CAO wijzigt en dit van invloed is op de bovenstaande bepalingen dan geldt voor beide partijen de nieuwe CAO regel en komt de relevante bovenstaande bepaling te vervallen. Verder dient de werknemer de huisregels in acht te nemen. De IKEA Group Code of Conduct en de regels die zijn opgenomen in Mijn IKEA van toepassing. De IKEA CAO en de IKEA Group Code of Conduct zijn te raadplegen op en downloaden via de internetsite ico-worker.com/nl. De inloggegevens voor deze site vind je in de bijgesloten brief. Op verzoek van de medewerker stuurt IKEA een digitale versie per e-mail of een geprinte versie per gewone post toe van de toepasselijke regels. Het boekje Mijn IKEA ontvangt de medewerker tegelijk met deze arbeidsovereenkomst.";
            list.Add(new PdfListItem { Text = text10, Number = Number.ToString() });
            Number = Number + 1;
        }
        else if (Model.GetDocumentAnswer("PayScaleType").ToLower() == "IKEA NL geen CAO".ToLower())
        {
            //Number = list.Count() + 1;
           
            string text10 = "Hoewel de IKEA CAO niet op deze arbeidsovereenkomst van toepassing is, worden de artikelen met de volgende onderwerpen uit de laatst overeengekomen IKEA CAO door ondertekening van deze arbeidsovereenkomst op de arbeidsovereenkomst van toepassing en worden die geacht daarvan onderdeel uit te maken, ook als de looptijd van deze CAO is verstreken en nog geen nieuwe CAO tot stand is gekomen:";

            text10 += "<br /><ul class=\"dash_ul\"><li> Ontwikkel- en beoordelingscyclus (II, artikel 4)</li><li> Beloningssysteem (II, artikel 5)</li><li> Personeelskorting (II, artikel 9)</li><li> Pensioen (II, artikel 10)</li><li> Vergoedingen incidentele dienstreizen binnen- en buitenland (II, artikel 30)</li>";
            text10 += "<li> Algemeen (wettelijk) verlof (VI, artikel 41)</li><li> Bijzonder verlof met behoud van salaris (VI, artikel 42)</li><li> Gezondheidsbeleid (VII, artikel 45 t/m 52)</li><li> Verzekeringen (VIII, artikel 55 t/m 59).</li></ul>";

            text10 += "De tussen haakjes vermelde artikelen verwijzen naar de desbetreffende bepalingen van de IKEA CAO zoals deze luidde ten tijde van het aangaan van de arbeidsovereenkomst. Indien een of meer van de bovengenoemde bepalingen of de nummering ervan in een latere IKEA CAO wijzigen, treden deze gewijzigde bepalingen in de plaats van die bepalingen.";
            
            list.Add(new PdfListItem { Text = text10, Number = Number.ToString() });
            Number = Number + 1;
        }

        //11   Check if is empty  
        if ((!string.IsNullOrEmpty(Model.GetDocumentAnswer("PayScaleLevel")) && payscalelevel >= 14))
        {
            //Number = list.Count() + 1;
            string text11 = "Medewerker gaat akkoord met een mogelijk volgende loopbaanstap welke uitzending naar het buitenland zou kunnen betekenen. Plaatsing geschiedt in overleg met medewerker.";
            list.Add(new PdfListItem { Text = text11, Number = Number.ToString() });
            Number = Number + 1;
        }

        //12
        if (Model.GetDocumentAnswer("DocumentType").ToLower() == "Work permit".ToLower())
        {
            //Number = list.Count() + 1;
            string text12 = "Medewerkers die op basis van een verblijfsvergunning in Nederland verblijven en bij wie arbeid (tijdelijk) is toegestaan, verplichten zich om bij iedere wijziging in hun verblijfsstatus (verblijfsvergunning) en/of werkstatus (werkvergunning) IKEA hierover te informeren.";
            list.Add(new PdfListItem { Text = text12, Number = Number.ToString() });
            Number = Number + 1;
        }

        
        
        pdfList = new List<PdfListItem>();

        list[list.Count - 1].SubList = pdfList;

            
            
    }
    
    
    @if (list.Count > 1)
     {
        <table>
            @for (int i = 0; i < list.Count; i++)
            { 
                     //style="page-break-inside: avoid;"           
                <tr>
                    <td>
                        @if (list[i].Number != null)
                        {<text>@list[i].Number.</text> }
                    </td>
                    <td style="padding-bottom: 10px !important;">
                        @Html.Raw(list[i].Text)
                        @if (list[i].SubList != null && list[i].SubList.Count > 0)
                        {
                            <table border="0">
                                @foreach (var item in list[i].SubList)
                            {                  
                                    <tr>
                                        <td valign="top">&bull;</td>
                                        <td valign="top">@Html.Raw(item.Text)</td>
                                    </tr>                       
                            }
                            
                            </table>
                        }

                    </td>
                </tr>
            }
        </table>
     }

    <table>

        <tr style="page-break-inside: avoid">

            <td>
                <table>
                    <tr>
                        <td colspan="2">De medewerker verklaart hiermee voorafgaande aan ondertekening van de arbeidsovereenkomst kennis te hebben genomen van de IKEA CAO, de IKEA Group Code of Conduct en de regels in Mijn IKEA en verder met het bovenstaande akkoord te gaan.
                            <br />
                            <br />@Html.Partial("../Shared/Pdfs/_CityDate", Model)
                        </td>
                    </tr>
                    <tr>

                        <td colspan="2">
                            @Html.Partial("../Shared/Pdfs/_Signature", Model)
                        </td>

                    </tr>
                </table>
            </td>
        </tr>
 </table>
            </div>
</body>
</html>

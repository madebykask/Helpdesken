@using System.Web.Script.Serialization
@using DH.Helpdesk.BusinessData.OldComponents
@using System.Web.Optimization
@using DH.Helpdesk.Common.Constants
@using DH.Helpdesk.Common.Enums.Cases
@using DH.Helpdesk.Common.Extensions.Boolean
@using System.Configuration;
@using DH.Helpdesk.Common.Enums;

@model DH.Helpdesk.SelfService.Models.Case.NewCaseModel

@{
    var jsSerializer = new JavaScriptSerializer();
    var recaptchaSiteKey = ConfigurationManager.AppSettings[AppSettingsKey.ReCaptchaSiteKey] != null ?
                            ConfigurationManager.AppSettings[AppSettingsKey.ReCaptchaSiteKey].ToString() : "";
    if (recaptchaSiteKey == "#{reCaptchaSiteKey}")
    {
        recaptchaSiteKey = "";
    }
}

@functions
{ private MvcHtmlString CaseFieldCaption(GlobalEnums.TranslationCaseFields field, bool withManadatory = true)
    {
        return Html.CaseFieldCaption(
            Model.CaseFieldSettings,
            Model.CaseFieldSettingWithLangauges,
            field,
            Model.NewCase.Customer_Id,
            SessionFacade.CurrentLanguageId,
            withManadatory);
    } }

<link href="~/Content/css/summernote.css" rel="stylesheet" />
<script src="~/Content/summernote-0.8.18/summernote.js"></script>

<script type="text/javascript">
    window.appOptions = '@Html.Raw(jsSerializer.Serialize(Model.JsApplicationOptions))';
    window.fieldSettings = @Html.Raw(jsSerializer.Serialize(Model.JsFieldSettings));
    window.productAreaChildren = @Html.Raw(jsSerializer.Serialize(Model.ProductAreaChildren));
    window.caseTypeRelatedFields = @Html.Raw(jsSerializer.Serialize(Model.CaseTypeRelatedFields));

    window.appParameters = {
        uploadCaseFileUrl: '@Url.Action("NewCaseUploadFile", "CaseFiles")',
        caseFileKey: '@Model.CaseFileKey',
        newCaseFilesUrl: '@Url.Action("NewCaseFiles", "CaseFiles")',
        fileAlreadyExistsMsg: '@Html.Raw(Translation.Get("File already exists"))',
        downloadCaseFileUrl: '@Url.Action("DownloadNewCaseFile", "CaseFiles")',
        downloadCaseFileParamUrl: '@(!string.IsNullOrEmpty(Model.CaseFileKey) ? "id=" + Model.CaseFileKey + "&" : string.Empty)',
        deleteCaseFileUrl: '@Url.Action("DeleteNewCaseFile", "CaseFiles")',
        searchUserUrl: '@Url.Content("~/Case/SearchUser")',
        seachComputerUrl: '@Url.Content("~/Case/SearchComputer")',
        changeSystemUrl: '@Url.Content("~/Case/ChangeSystem")',
        saveNewCaseUrl: '@Url.Content("~/Case/NewCase")',
        fetchDepartmentsUrl: '@Url.Content("~/Case/GetDepartmentsByRegion")',
        fetchOUUrl: '@Url.Content("~/Case/GetOrgUnitsByDepartments")',
        setProductAreaByCaseTypeUrl: '@Url.Content("~/Case/GetProductAreaByCaseType")',
        fileUploadWhiteList: [],
        invalidFileExtensionText: '@Html.Raw(Translation.GetForJS("har inte en giltig filändelse"))',
        requiredMessage: '@Html.Raw(Translation.GetForJS(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) + ' '  +
                                    Translation.GetForJS("must be specified"))'
    };

    @if (Model.FileUploadWhiteList != null)
    {
    foreach (var fileExtension in Model.FileUploadWhiteList)
    {
        @:window.appParameters.fileUploadWhiteList.push('@fileExtension');
        }
        }
        else
        {
            @:window.appParameters.fileUploadWhiteList = null;
        }

    var workflowsBehaviorParams = {
        isExtendedCase: false,
        caseId: @Model.NewCase.Id,
        templateId: @Model.CaseTemplateId,
        getWorkFlowStepsUrl: '@Url.Action("GetWorkflowSteps", "Case")',
        selectStepText: '@Translation.GetForJS(Text.SelectStep)',
        saveText: '@Translation.Get("Save")'
    };

    window.parameters = {
        emailNotValid: '@Translation.GetForJS("Email address is not valid.")',
        emailAlreadyAdded: '@Translation.GetForJS("Same email already added.")',
        initGroup: '@Translation.GetForJS("User")',
        closeBtn: '@Html.Raw(Translation.GetForJS("Close"))',
        selectedLabel: '@Translation.GetForJS("selected")',
        noResultLabel: '@Translation.GetForJS("Inga resultat matchar")',
    };

</script>

@section Styles {
    <link href="@Url.Content("~/Content/css/case-mobile.css")" rel="stylesheet" type="text/css" />
}

@if (Model.ShowCaseActionsPanelOnTop)
{
    @Html.Partial("_CaseControlPanel", Model.CreateCaseControlsPanelModel())}

<div class="container-fluid dh-container">
    @if (!string.IsNullOrEmpty(Model.Information))
    {
        <label class="alert alert-info cursor-default order-description">@Html.Raw(Model.Information)</label>}
    <ul class="nav nav-tabs" id="NewCaseTab">
        <li id="NewCaseT" class="active">
            <a href="#fragment-1"> @Translation.Get("New Case") </a>
        </li>
        @if (Model.AttachmentPlacement == 1 && Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Filename.ToString()))
        {
            <li>
                <a href="#attachment-tab">@Translation.Get("Attachments") <span id="nrOfAttachedFiles">@(Model.CaseFilesModel.Files != null && Model.CaseFilesModel.Files.Count > 0 ? "(" + Model.CaseFilesModel.Files.Count.ToString() + ")" : "")</span></a>
            </li>
        }
    </ul>
    <div class="loading-msg" id="progress" style="display: none">
        <div class="content-wrapper">
            <div class="loader">@Translation.Get("Laddar...")</div>
        </div>
    </div>
    <div class="content tab-content">
        <div id="fragment-1" class="tab-pane active">
            <div class="container-fluid dh-container">

                @using (Html.BeginForm("NewCase", "case", null, FormMethod.Post, new { id = "newCaseForm" }))
                {
                    @Html.HiddenFor(l => Model.NewCase.RegLanguage_Id)
                    @Html.HiddenFor(k => Model.CaseFileKey)
                    @Html.HiddenFor(model => model.NewCase.Id)
                    @Html.HiddenFor(model => model.NewCase.CaseGUID)
                    @Html.HiddenFor(model => model.NewCase.Customer_Id)
                    @Html.HiddenFor(model => model.NewCase.OU_Id)
                    @Html.HiddenFor(model => model.NewCase.User_Id)
                    @Html.HiddenFor(model => model.NewCase.IpAddress)
                    @Html.HiddenFor(model => model.NewCase.Deleted)
                    @Html.HiddenFor(model => model.NewCase.RegistrationSource)
                    @Html.HiddenFor(model => model.NewCase.RegUserDomain)
                    @Html.HiddenFor(model => model.NewCase.RegUserId)
                    @Html.HiddenFor(model => model.NewCase.CaseNumber)
                    @Html.HiddenFor(model => model.NewCase.ProductAreaSetDate)
                    @Html.HiddenFor(model => model.NewCase.LockCaseToWorkingGroup_Id)
                    @Html.HiddenFor(model => model.NewCase.FinishingDate)
                    @Html.HiddenFor(model => model.NewCase.ProductAreaQuestionVersion_Id)
                    @Html.HiddenFor(model => model.NewCase.LeadTime)
                    @Html.HiddenFor(model => model.NewCase.CaseCleanUp_Id)
                    @Html.HiddenFor(model => model.NewCase.RelatedCaseNumber)
                    @Html.HiddenFor(model => model.NewCase.ApprovedDate)
                    @Html.HiddenFor(model => model.NewCase.ApprovedBy_User_Id)
                    @Html.HiddenFor(model => model.NewCase.FollowUpDate)
                    @Html.HiddenFor(model => model.NewCase.ExternalTime)
                    @Html.HiddenFor(model => model.NewCase.DefaultOwnerWG_Id)
                    @Html.HiddenFor(model => model.NewCase.Priority_Id)
                    @Html.HiddenFor(model => model.NewCase.RegistrationSourceCustomer_Id)
                    @Html.HiddenFor(model => model.NewCase.CausingPartId)
                    @Html.HiddenFor(model => model.NewCase.WorkingGroup_Id)
                    @Html.HiddenFor(model => model.NewCase.Project_Id)
                    @Html.HiddenFor(model => model.NewCase.Problem_Id)
                    @Html.HiddenFor(model => model.NewCase.WatchDate)
                    @Html.HiddenFor(model => model.NewCase.Status_Id)
                    @Html.HiddenFor(model => model.NewCase.StateSecondary_Id)
                    @Html.HiddenFor(model => model.NewCase.Verified)
                    @Html.HiddenFor(model => model.NewCase.VerifiedDescription)
                    @Html.HiddenFor(model => model.NewCase.SolutionRate)
                    @Html.HiddenFor(model => model.NewCase.FinishingDescription)
                    @Html.HiddenFor(model => model.NewCase.PlanDate)
                    @Html.HiddenFor(model => model.NewCase.Performer_User_Id)
                    @Html.HiddenFor(model => model.NewCase.Change_Id)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.ReportedBy)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.Person_Name)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.Person_Email)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.Person_Phone)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.Person_Cellphone)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.Region_Id)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.Department_Id)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.OU_Id)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.CostCentre)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.Place)
                    @Html.HiddenFor(model => model.NewCase.IsAbout.UserCode)
                    @Html.HiddenFor(model => model.NewCase.CaseSolution_Id)
                    @Html.HiddenFor(model => model.NewCase.CurrentCaseSolution_Id)
                    @Html.HiddenFor(model => model.CaseLog.TextExternal)
                    @Html.HiddenFor(model => model.CaseLog.TextInternal)
                    @Html.HiddenFor(model => model.CaseLog.FinishingType)
                    @Html.HiddenFor(model => model.CaseMailSetting.SendMailAboutNewCaseTo)
                    @Html.HiddenFor(model => model.CaseMailSetting.HelpdeskMailFromAdress)
                    @Html.HiddenFor(model => model.CaseMailSetting.AbsoluterUrl)
                    @Html.HiddenFor(model => model.CaseMailSetting.DontConnectUserToWorkingGroup)
                    @Html.HiddenFor(model => model.DepartmentFilterFormat, new { data_field = "departmentFilterFormat" })
                    @Html.Hidden("case_languageId", Model.CurrentLanguageId)

                    @Html.HiddenFor(model => model.SelectedWorkflowStep) <!-- User Information--> if (Model.CaseFieldGroups.Contains(Enums.CaseFieldGroups.UserInformation))
                    {
                        <h4 style="@Model.DisplayUserInfo()">@Model.CaseSectionSettings.GetSectionHeader(CaseSectionType.Initiator, CaseSectionsEnglish.InitiatorHeader)</h4>
                        <div class="row">
                            <div class="col-md-3 dh-col">
                                <div class="container form-horizontal">
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Customer_Id.ToString()))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Customer_Id, false)
                                            </label>
                                            <div class="col-md-9">
                                                @Model.NewCase.Customer.Name
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.ReportedBy.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.ReportedBy.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.ReportedBy)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(model => model.NewCase.ReportedBy, new { maxlength = "200", autocomplete = "Off", @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.ReportedBy.ToString() })
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Persons_Name.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Persons_Name.ToString()">
                                            <label class="col-md-3">@CaseFieldCaption(GlobalEnums.TranslationCaseFields.Persons_Name)</label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(p => Model.NewCase.PersonsName, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Persons_Name.ToString() })
                                                @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.AddFollowersBtn.ToString()))
                                                {
                                                    <span class="case-div-width90em">
                                                        @Html.HiddenFor(model => Model.FollowerUsers, new { @readonly = "true", id = "caseFollowerUsersInput" })
                                                        @Html.Partial("_CaseAddFollowers", Model.SendToDialogModel)
                                                        <a href="#case_add_followers_btn" role="button" class="btn btn-default case-usersearch-btn hasAttribute" data-toggle="modal" standardName="@GlobalEnums.TranslationCaseFields.AddFollowersBtn.ToString()">@Translation.Get("Add followers")</a>
                                                        @* @Html.TextAreaFor(model => model.FollowerUsers, new { id = "fakeCaseFollowerUsersInput", @class = "case-usersearch-textarea hasAttribute", standardName = GlobalEnums.TranslationCaseFields.AddFollowersBtn.ToString() }) *@
                                                    </span>
                                                    <div id="fakeCaseFollowerUsersInput" contenteditable="true" class="case-send-emails-div case-usersearch-textarea"></div>}
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Persons_EMail.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Persons_EMail.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Persons_EMail)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(p => Model.NewCase.PersonsEmail, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Persons_EMail.ToString() })
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Persons_Phone.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Persons_Phone.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Persons_Phone)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(p => Model.NewCase.PersonsPhone, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Persons_Phone.ToString() })
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Persons_CellPhone)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(c => Model.NewCase.PersonsCellphone, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString() })
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Region_Id.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Region_Id.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Region_Id)
                                            </label>
                                            <div class="col-md-9">
                                                <select id="NewCase_Region_Id" name="NewCase.Region_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.Region_Id.ToString()">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Regions != null)
                                                    {
                                                        foreach (var e in Model.Regions.Where(e => e.IsActive != 0))
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.Region_Id.ToString())> @e.Name </option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(model => model.NewCase.Region_Id)
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Department_Id.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Department_Id.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Department_Id)
                                            </label>
                                            <div class="col-md-9">
                                                <select id="NewCase_Department_Id" name="NewCase.Department_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.Department_Id.ToString()">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Departments != null)
                                                    {
                                                        foreach (var e in Model.Departments.Where(e => e.IsActive != 0))
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.Department_Id.ToString())>@e.DepartmentName </option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(model => model.NewCase.Department_Id)
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.OU_Id.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.OU_Id.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.OU_Id)
                                            </label>
                                            <div class="col-md-9">
                                                <select id="NewCase_Ou_Id" name="NewCase.OU_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.OU_Id.ToString()">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.OrganizationUnits != null)
                                                    {
                                                        foreach (var e in Model.OrganizationUnits.Where(e => e.IsActive != 0))
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.OU_Id.ToString())> @e.Name </option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.CostCentre.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.CostCentre.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.CostCentre)
                                            </label>

                                            <div class="col-md-9">
                                                @Html.TextBoxFor(i => Model.NewCase.CostCentre, new { @class = "hasAttribute", maxlength = "50", standardName = GlobalEnums.TranslationCaseFields.CostCentre.ToString() })
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Place.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Place.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Place)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(p => Model.NewCase.Place, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Place.ToString() })
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(model => model.NewCase.Place)
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.UserCode.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.UserCode.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.UserCode)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(u => Model.NewCase.UserCode, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.UserCode.ToString() })
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(model => model.NewCase.UserCode)
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    <!-- Computer Information -->
                    if (Model.CaseFieldGroups.Contains(Enums.CaseFieldGroups.ComputerInformation))
                    {
                        <h4 style="@Model.DisplayComputerInfo()">@Model.CaseSectionSettings.GetSectionHeader(CaseSectionType.ComputerInfo, CaseSectionsEnglish.ComputerInfoHeader)</h4>
                        <div class="row">
                            <div class="col-md-3 dh-col">
                                <div class="container form-horizontal">
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.InventoryNumber.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.InventoryNumber.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.InventoryNumber)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(i => Model.NewCase.InventoryNumber, new { @class = "hasAttribute", maxlength = "60", standardName = GlobalEnums.TranslationCaseFields.InventoryNumber.ToString(), autocomplete = "off" })
                                            </div>
                                        </div>}
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.ComputerType_Id)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(i => Model.NewCase.InventoryType, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString() })
                                            </div>
                                        </div>}
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.InventoryLocation.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.InventoryLocation.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.InventoryLocation)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(i => Model.NewCase.InventoryLocation, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.InventoryLocation.ToString() })
                                            </div>
                                        </div>}
                                </div>
                            </div>
                        </div>
                    }
                    <!-- Case Info Fields -->
                    if (Model.CaseFieldGroups.Contains(Enums.CaseFieldGroups.CaseInfo))
                    {
                        <h4 style="@Model.DisplayCaseInfo()">@Model.CaseSectionSettings.GetSectionHeader(CaseSectionType.CaseInfo, CaseSectionsEnglish.CaseInfoHeader) </h4>
                        <div class="row">
                            <div class="col-md-3 dh-col">
                                <div class="container form-horizontal">
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.CaseType_Id.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.CaseType_Id.ToString()">
                                            <label class="col-md-3">@CaseFieldCaption(GlobalEnums.TranslationCaseFields.CaseType_Id)</label>
                                            <div class="col-md-9">
                                                <div id="divCaseType" class="btn-group">
                                                    <div class="btn btn-default hasAttribute" id="divBreadcrumbs_CaseType" standardName="@GlobalEnums.TranslationCaseFields.CaseType_Id.ToString()">@Model.CaseTypeParantPath</div>
                                                    <button class="btn btn-default dropdown-toggle hasAttribute" data-toggle="dropdown" standardName="@GlobalEnums.TranslationCaseFields.CaseType_Id.ToString()">
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a href="#" value="">@Translation.Get("--")</a></li>
                                                        @Html.CaseTypeDropdownButtonString(Model.CaseTypes)
                                                    </ul>
                                                    <input type="hidden" id="NewCase.CaseType_Id" name="NewCase.CaseType_Id" value="@Model.NewCase.CaseType_Id.supressZero()" />
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <input type="hidden" id="NewCase.CaseType_Id" name="NewCase.CaseType_Id" value="@Model.NewCase.CaseType_Id.supressZero()" />
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString()">
                                            <label class="col-md-3">@CaseFieldCaption(GlobalEnums.TranslationCaseFields.ProductArea_Id)</label>
                                            <div class="col-md-9">
                                                <div id="divProductArea" class="btn-group">
                                                    <div class="btn btn-default hasAttribute" id="divBreadcrumbs_ProductArea" standardName="@GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString()">@Model.ProductAreaParantPath</div>
                                                    <button class="btn btn-default dropdown-toggle hasAttribute" data-toggle="dropdown" standardName="@GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString()">
                                                        <span class="caret"></span>
                                                    </button>
                                                    @if (Model.FieldSettings.Where(f => f.Name == GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString()).Select(f => f.Required).SingleOrDefault() == 1)
                                                    {
                                                        <input type="hidden" id="isMandatory" value="true" /> }
                                                    else
                                                    {
                                                        <input type="hidden" id="isMandatory" value="false" />}
                                                    <ul class="dropdown-menu">
                                                        <li><a href="#" value="">@Translation.Get("--")</a></li>
                                                        @Html.ProductAreaDropdownButtonString(Model.ProductAreas)
                                                    </ul>
                                                    @Html.HiddenFor(model => model.NewCase.ProductArea_Id)
                                                    @*<input type="hidden" id="NewCase.ProductArea_Id" name="NewCase.ProductArea_Id" value="@Model.NewCase.ProductArea_Id.supressZero()" />*@
                                                </div>
                                            </div>
                                        </div>

                                    }
                                    else
                                    {
                                        @Html.HiddenFor(model => model.NewCase.ProductArea_Id)
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.System_Id.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.System_Id.ToString()">
                                            <label class="col-md-3">@CaseFieldCaption(GlobalEnums.TranslationCaseFields.System_Id)</label>
                                            <div class="col-md-9">
                                                <select id="NewCase_System_Id" name="NewCase.System_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.System_Id.ToString()">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Systems != null)
                                                    {
                                                        foreach (var e in Model.Systems)
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.System_Id.ToString())>@e.SystemName</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()))
                                    {
                                        <div id="relatedFieldBlock-@GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()" class="form-group row @GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Urgency_Id, false)
                                                @if (Model.FieldSettings.Where(f => f.Name == GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()).Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span id="mandatory_sign_@GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()" class="mandatorystar">*</span> }
                                                else
                                                {
                                                    <span id="mandatory_sign_@GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()" class="mandatorystar" style="display: none"></span>}
                                            </label>
                                            <div class="col-md-9">
                                                <select id="NewCase_Urgency_Id" name="NewCase.Urgency_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Urgencies != null)
                                                    {
                                                        foreach (var e in Model.Urgencies)
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.Urgency_Id.ToString())>@e.Name</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div id="relatedFieldBlock-@GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()" class="form-group row @GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()" style="display: none">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Urgency_Id, false)
                                                @if (Model.FieldSettings.Where(f => f.Name == GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()).Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span id="mandatory_sign_@GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()" class="mandatorystar">*</span> }
                                                else
                                                {
                                                    <span id="mandatory_sign_@GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()" class="mandatorystar" style="display: none"></span>}
                                            </label>
                                            <div class="col-md-9">
                                                <select id="NewCase_Urgency_Id" name="NewCase.Urgency_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Urgencies != null)
                                                    {
                                                        foreach (var e in Model.Urgencies)
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.Urgency_Id.ToString())>@e.Name</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Impact_Id.ToString()))
                                    {
                                        <div id="relatedFieldBlock-@GlobalEnums.TranslationCaseFields.Impact_Id.ToString()" class="form-group row @GlobalEnums.TranslationCaseFields.Impact_Id.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Impact_Id, false)
                                                @if (Model.FieldSettings.Where(f => f.Name == GlobalEnums.TranslationCaseFields.Impact_Id.ToString()).Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span id="mandatory_sign_@GlobalEnums.TranslationCaseFields.Impact_Id.ToString()" class="mandatorystar">*</span> }
                                                else
                                                {
                                                    <span id="mandatory_sign_@GlobalEnums.TranslationCaseFields.Impact_Id.ToString()" class="mandatorystar" style="display: none"></span>}
                                            </label>
                                            <div class="col-md-9">
                                                <select id="NewCase_Impact_Id" name="NewCase.Impact_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.Impact_Id.ToString()">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Impacts != null)
                                                    {
                                                        foreach (var e in Model.Impacts)
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.Impact_Id.ToString())>@e.Name</option>
                                                        }
                                                    }
                                                </select>

                                            </div>
                                        </div> }
                                    else
                                    {
                                        <div id="relatedFieldBlock-@GlobalEnums.TranslationCaseFields.Impact_Id.ToString()" class="form-group row @GlobalEnums.TranslationCaseFields.Impact_Id.ToString()" style='display: none'>
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Impact_Id, false)
                                                @if (Model.FieldSettings.Where(f => f.Name == GlobalEnums.TranslationCaseFields.Impact_Id.ToString()).Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span id="mandatory_sign_@GlobalEnums.TranslationCaseFields.Impact_Id.ToString()" class="mandatorystar">*</span> }
                                                else
                                                {
                                                    <span id="mandatory_sign_@GlobalEnums.TranslationCaseFields.Impact_Id.ToString()" class="mandatorystar" style="display: none"></span>}
                                            </label>
                                            <div class="col-md-9">
                                                <select id="NewCase_Impact_Id" name="NewCase.Impact_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.Impact_Id.ToString()">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Impacts != null)
                                                    {
                                                        foreach (var e in Model.Impacts)
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.Impact_Id.ToString())>@e.Name</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Category_Id.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Category_Id.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Category_Id)
                                            </label>
                                            <div class="col-md-9">
                                                <div id="divCategory" class="btn-group">
                                                    <div class="btn btn-default hasAttribute" id="divBreadcrumbs_Category" standardName="@GlobalEnums.TranslationCaseFields.Category_Id.ToString()">@Model.CategoryParentPath</div>
                                                    <button class="btn btn-default dropdown-toggle hasAttribute" data-toggle="dropdown" standardName="@GlobalEnums.TranslationCaseFields.Category_Id.ToString()">
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a href="#" value="">@Translation.Get("--")</a></li>
                                                        @Html.CategoryDropdownButtonString(Model.Categories)
                                                    </ul>
                                                    @Html.HiddenFor(model => model.NewCase.Category_Id)
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Supplier_Id.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Supplier_Id.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Supplier_Id)
                                            </label>
                                            @if (Model.Suppliers != null)
                                            {
                                                <div class="col-md-9">
                                                    <select id="NewCase_Supplier_Id" name="NewCase.Supplier_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.Supplier_Id.ToString()">
                                                        <option value="">&nbsp;</option>
                                                        @foreach (var e in Model.Suppliers.Where(e => e.IsActive == 1))
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.Supplier_Id.ToString())>@e.Name</option>
                                                        }
                                                    </select>
                                                </div>}
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.InvoiceNumber)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(i => Model.NewCase.InvoiceNumber, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString() })
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.ReferenceNumber)
                                                @if (Model.FieldSettings.Where(f => f.Name == GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString()).Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar"></span>}
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(r => Model.NewCase.ReferenceNumber, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString() })
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(model => model.NewCase.ReferenceNumber)
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Caption.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Caption.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Caption)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(c => Model.NewCase.Caption, new { maxlength = "100", @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Caption.ToString() })
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Description.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Description.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Description)
                                            </label>
                                            <div class="col-md-9">

                                                @Html.TextAreaFor(d => Model.NewCase.Description, new { @class = "hasAttribute summernotedesc", standardName = GlobalEnums.TranslationCaseFields.Description.ToString() })

                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Miscellaneous.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Miscellaneous.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Miscellaneous)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextAreaFor(m => Model.NewCase.Miscellaneous, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Miscellaneous.ToString() })
                                            </div>
                                        </div> } @*@if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Priority_Id.ToString()))
                                        {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Priority_Id.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Priority_Id)
                                            </label>
                                            <div class="col-md-9">
                                                <select id="NewCase_Priority_Id" name="NewCase.Priority_Id" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.Priority_Id.ToString()">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Priorities != null)
                                                    {
                                                        foreach (var e in Model.Priorities.Where(c => c.IsActive == 1))
                                                        {
                                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.NewCase.Priority_Id.ToString())>@e.Name</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                        }*@
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.ContactBeforeAction.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.ContactBeforeAction.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.ContactBeforeAction, false)
                                            </label>
                                            <div class="col-md-9">
                                                <input type="checkbox" name="NewCase.ContactBeforeAction" @(Model.NewCase.ContactBeforeAction == 1 ? "checked=checked" : "") value="1" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.ContactBeforeAction.ToString()" } />
                                                @Translation.Get("Should the initiator be contacted before action?")
                                                <input type="hidden" name="NewCase.ContactBeforeAction" value="0" />
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.SMS.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.SMS.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.SMS, false)
                                            </label>
                                            <div class="col-md-9">
                                                <input type="checkbox" name="NewCase.SMS" @(Model.NewCase.SMS == 1 ? "checked=checked" : "") value="1" class="hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.SMS.ToString()" } />
                                                @Translation.Get("Send SMS when case is closed")
                                                <input type="hidden" name="NewCase.SMS" value="0" />
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.AgreedDate.ToString()))
                                    {
                                        var AgreedDateIsReadOnly = Model.JsFieldSettings.Where(x => x.FieldName == "AgreedDate").FirstOrDefault().IsReadonly;
                                        var htmlAttrs = new Dictionary<string, object>();
                                        htmlAttrs.Add("class", "hasAttribute");
                                        htmlAttrs.Add("standardName", GlobalEnums.TranslationCaseFields.AgreedDate.ToString());

                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.AgreedDate.ToString()">
                                            <label class="col-md-3">
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.AgreedDate.ToString(), Enums.TranslationSource.CaseTranslation, @SessionFacade.CurrentCustomerID)
                                            </label>
                                            <div class="col-md-2">
                                                @*@{var _agreeDate = Model.NewCase.AgreedDate.HasValue ? Model.NewCase.AgreedDate.Value.ToShortDateString()}*@
                                                @*@Html.DisplayFor(a => _agreeDate)*@
                                                @if (AgreedDateIsReadOnly)
                                                {
                                                    @Html.EditorFor(m => Model.NewCase.AgreedDate, "DatePicker", new { id = "AgreedDate", disabled = "disabled", inputAttributes = htmlAttrs }) }
                                                else
                                                {
                                                    @Html.EditorFor(m => Model.NewCase.AgreedDate, "DatePicker", new { id = "AgreedDate", inputAttributes = htmlAttrs })}
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Available.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Available.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Available)
                                            </label>
                                            <div class="col-md-9">
                                                @Html.TextBoxFor(m => Model.NewCase.Available, new { @class = "hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Available.ToString() })
                                                @*@Translation.Get("Initiator is available during the following times")*@
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        @Html.HiddenFor(model => model.NewCase.Available)
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains(GlobalEnums.TranslationCaseFields.Cost.ToString()))
                                    {
                                        <div class="form-group row @GlobalEnums.TranslationCaseFields.Cost.ToString()">
                                            <label class="col-md-3">
                                                @CaseFieldCaption(GlobalEnums.TranslationCaseFields.Cost, false)
                                            </label>
                                            <div class="col-md-9">
                                                <table>
                                                    <tr>
                                                        <td>
                                                            @Translation.Get("Item Cost")<br />
                                                            @Html.TextBoxFor(model => model.NewCase.Cost, new { maxlength = "7", @class = "inputw50 hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Cost.ToString() })
                                                        </td>
                                                        <td>
                                                            @Translation.Get("Additional Cost")<br />
                                                            @Html.TextBoxFor(model => model.NewCase.OtherCost, new { maxlength = "7", @class = "inputw50 hasAttribute", standardName = GlobalEnums.TranslationCaseFields.Cost.ToString() })
                                                        </td>
                                                        <td>
                                                            @Translation.Get("Currency")<br />
                                                            <select id="NewCase_Currency" name="NewCase.Currency" class="inputw100 hasAttribute" standardName="@GlobalEnums.TranslationCaseFields.Cost.ToString()">
                                                                <option value="">&nbsp;</option>
                                                                @if (Model.Currencies != null)
                                                                {
                                                                    foreach (var e in Model.Currencies)
                                                                    {
                                                                        var selected = Model.NewCase.Currency == @e.Code ? "selected" : "";
                                                                        <option value="@e.Code" @selected> @e.Code</option>
                                                                    }
                                                                }
                                                            </select>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.AttachmentPlacement == 0 & Model.FieldSettings.Any(f => f.Name.Equals(GlobalEnums.TranslationCaseFields.Filename.ToString())))
                                    {
                                        @Html.Partial("_FilesAttachButtons", new ViewDataDictionary(ViewData)
                                        {
                                            {"fieldCaption", CaseFieldCaption(GlobalEnums.TranslationCaseFields.Filename, false) },
                                            {"hasFiles", Model.NewCase.CaseFiles != null && Model.NewCase.CaseFiles.Any()}
                                        })
                                    }
                                    <div class="form-group row">
                                        <label class="col-md-3"></label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                    if (Model.NewCase.Id == 0 && (recaptchaSiteKey != "" || recaptchaSiteKey != null))
                    {
                        <div id="cap1" class="g-recaptcha" data-sitekey=@recaptchaSiteKey></div>
                    }

                }
            </div>

        </div>
        @if (Model.AttachmentPlacement == 1 && Model.FieldSettings.Any(f => f.Name.Equals(GlobalEnums.TranslationCaseFields.Filename.ToString())))
        {
            <div id="attachment-tab" class="tab-pane" style="overflow:hidden;">
                <div class="container-fluid dh-container">
                    @Html.Partial("_FilesAttachButtons", new ViewDataDictionary(ViewData)
                        {
                            {"fieldCaption", null },
                            {"hasFiles", Model.NewCase.CaseFiles != null && Model.NewCase.CaseFiles.Any()}
                        })
                </div>
            </div>
        }
    </div>
</div>

@if (Model.ShowCaseActionsPanelAtBottom)
{
    @Html.Partial("_CaseControlPanel", Model.CreateCaseControlsPanelModel(2))}

@section Dialogs {
    @Html.Partial("ModalDialogs/_UploadFilePopup", "upload_files_popup")
    @Html.Partial("ModalDialogs/_UploadFileFromClipboardPopup")

    <div id="case_urgent_popup" role="dialog" class="modal fade" aria-labelledby="myModalLabelCase" aria-hidden="true" style="display: none">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                    <h5> @Translation.Get("Kritisk incident")!</h5>
                </div>
                <div class="modal-body padding20">
                    <label id="urgentInfoMessage"> --- </label>
                    <br />
                    <br />
                    <label><input type="checkbox" id="urgentAcceptChbx" /> @Translation.Get("Jag accepterar att det är kritiskt och kan komma att medföra extra kostnader")</label>
                </div>
                <div class="modal-body padding20 case-dropdown-area">
                    <div class="case-followers-button-done">
                        <button type="button" id="btnChange" class="btn btn-default" data-dismiss="modal">@Translation.Get("Ändra brådskande/påverkan")</button>
                        <button type="button" id="btnAccept" class="btn btn-default" disabled="disabled">@Translation.Get("Acceptera kritisk incident")</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/Content/js/Case/newCase")
    @if (recaptchaSiteKey != "")
    {
        <script src="https://www.google.com/recaptcha/api.js?onload=onloadCallback&render=explicit" async defer></script>
    }
    <script type="text/javascript">

        var requiredText = '@Translation.GetForJS("must be specified")';
        var recaptchaMessage = '@Translation.GetForJS("Check the captcha")';
        var productAreaErrMessage =
            '@Html.Raw(Translation.GetForJS("The case could not be saved because the lowest possible level on the field") + " [" +
                       Translation.GetForJS(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Enums.TranslationSource.CaseTranslation, SessionFacade.CurrentCustomerID) + "] " +
                       Translation.Get("has not been selected. Please check the case."))';

        var $mainForm = null;
        var $elmProductArea = null;
        var $selectedWorkflow = null;
        var $selectListStep = null;
        var $buttonsToDisable = null;

        let validator = null;

        var captchaChecker = function () { };
        var recaptcha_widget;
        var onloadCallback = function () {
            if ($('#cap1').length) {
                recaptcha_widget = grecaptcha.render('cap1', {
                    'sitekey': '@recaptchaSiteKey',
                    'theme': 'light'
                });
            }

            captchaChecker = function () {
                return grecaptcha.getResponse(recaptcha_widget);
            }

        };



        $(function() {
            $mainForm = $("#newCaseForm");
            $elmProductArea = $("#NewCase_ProductArea_Id");
            $selectedWorkflow = $('#SelectedWorkflowStep');
            $selectListStep = $('select[name="steps"]').first(); //should be first only
            $buttonsToDisable = $('input.save-button, input.go-button');
            $("#case_urgent_popup").on('hidden.bs.modal',
                function(e) {
                    $('#urgentAcceptChbx').attr('checked', false);
                    $("#btnAccept").attr("disabled", true);
                });

            $('#urgentAcceptChbx').change(function() {
                $("#btnAccept").attr("disabled", !this.checked);
            });

            //Save case
            $('.save-button').on('click',
                function(e) {
                    e.preventDefault();

                    saveNewCase();
                });

            //Save with workflow
            $('.go-button').on('click',
                function(e) {
                    e.preventDefault();

                    var templateId = parseInt(self.$selectListStep.val());
                    if (!isNaN(templateId) && templateId > 0) {
                        self.$selectedWorkflow.val(templateId);
                        saveNewCase();
                    }
                });

            $("#btnAccept").on("click",
                function() {
                    doSaveCase();
                });

            setupValidation();

            self.workflowStepsBehavior = new WorkflowStepsBehavior(null);
            self.workflowStepsBehavior.init(workflowsBehaviorParams);

            //init edit.js instance
            window.casePage.init({ useInitiatorAutocomplete: @SessionFacade.CurrentCustomer.UseInitiatorAutocomplete.ToJavaScriptBool() });

            window.scrollTo(0, 0);
        });

        function saveNewCase() {
            var productAreaValidation = isProductAreaValid();
            var isMandatory = $('#isMandatory').val();
            if (isMandatory == 'true') {
                $("#NewCase_ProductArea_Id").rules("add", {
                    required: true,
                    messages: {
                        required:  "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    }
                });
            }
            var formValidation = isFormValid();

            if (!productAreaValidation || !formValidation) {
                if (!productAreaValidation) {
                    document.getElementById('divProductArea').classList.add("error");
                    ShowToastMessage(productAreaErrMessage, "error", false);
                } else {
                    ShowToastMessage(
                        '@Translation.Get("One or more mandatory fields were not filled in, please check the case.")',
                        "error",
                        false);
                }
                return false;
            }

            var urgentId = $("#NewCase_Urgency_Id").val();
            var impactId = $("#NewCase_Impact_Id").val();
            if (urgentId && impactId) {
                $.ajax({
                    url: '@Url.Action("UrgentInfoMessage", "Case")',
                    type: "POST",
                    data: { urgentId: urgentId, impactId: impactId },
                    dataType: "json",
                    success: function(result) {
                        if (result) {
                            $("#urgentInfoMessage").html(result);
                            var $src = $(this);
                            var $target = $("#case_urgent_popup");
                            $target.attr("data-src", $src.attr("data-src"));
                            $target.modal("show");
                        } else {
                            doSaveCase();
                        }
                    }
                });
            } else {
                doSaveCase();
            }

            return false;
        }

        function doSaveCase() {

            var res = captchaChecker();
            if (res == "") {
                ShowToastMessage(recaptchaMessage, "warning", false);
                $('html,body').animate({ scrollTop: 9999 }, 'slow');
                return;
            }

            $mainForm.attr("action", '@Url.Action("NewCase", "Case")');
            $('.disabled').removeAttr('disabled');
            $buttonsToDisable.prop('disabled', true);
            $mainForm.submit();
        }

        function isFormValid() {
            var validator = $mainForm.validate();
            return validator.form();
        }

        function isProductAreaValid() {
            if ($elmProductArea == undefined)
                return true;

            var selectedPa = $elmProductArea.val();

            var paList = window.productAreaChildren;
            if (paList != null && paList != undefined && paList.length > 0) {
                for (var pa = 0; pa < paList.length; pa++) {
                    if (paList[pa].ProductAreaId == selectedPa) {
                        return !paList[pa].HasChildren;
                    }
                }
            }
            return true;
        }

        function setupValidation() {
            // remove unobtrusive validation and chached validator, otherwise manual rules won't be applied
            // alternative: run this method before unobstrusive parse
            $mainForm.data("unobtrusiveValidation", null);
            $mainForm.data("validator", null);
            validator = $mainForm.validate({
                ignore: ".note-editor *",
                rules: {
                    "NewCase.ReportedBy": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.ReportedBy.ToString())")
                    },
                    "NewCase.PersonsName": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_Name.ToString())")
                    },
                    "NewCase.PersonsEmail": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_EMail.ToString())")
                    },
                    "NewCase.PersonsCellphone": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString())")
                    },
                    "NewCase.PersonsPhone": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_Phone.ToString())")
                    },
                    "NewCase.Region_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Region_Id.ToString())")
                    },
                    "NewCase.Department_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Department_Id.ToString())")
                    },
                    "NewCase.OU_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.OU_Id.ToString())")
                    },
                    "NewCase.Place": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Place.ToString())")
                    },
                    "NewCase.UserCode": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.UserCode.ToString())")
                    },
                    "NewCase.InventoryNumber": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.InventoryNumber.ToString())")
                    },
                    "NewCase.InventoryLocation": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.InventoryLocation.ToString())")
                    },
                    "NewCase.InventoryType": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString())")
                    },
                    "NewCase.CaseType_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.CaseType_Id.ToString())")
                    },
                    "NewCase_ProductArea_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString())")
                    },
                    "NewCase.System_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.System_Id.ToString())")
                    },
                    "NewCase.Urgency_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Urgency_Id.ToString())")
                    },
                    "NewCase.Impact_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Impact_Id.ToString())")
                    },
                    "NewCase.Category_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Category_Id.ToString())")
                    },
                    "NewCase.Supplier_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Supplier_Id.ToString())")
                    },
                    "NewCase.InvoiceNumber": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString())")
                    },
                    "NewCase.ReferenceNumber": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString())")
                    },
                    "NewCase.Caption": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Caption.ToString())")
                    },
                    "NewCase.Description": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Description.ToString())")
                    },
                    "NewCase.Miscellaneous": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Miscellaneous.ToString())")
                    },
                    "NewCase.AgreedDate": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.AgreedDate.ToString())")
                    },
                    "NewCase.Available": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Available.ToString())")
                    },
                    "NewCase.WorkingGroup_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString())")
                    },
                    "NewCase.Performer_User_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString())")
                    },
                    "NewCase.CaseResponsible_User_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.CaseResponsibleUser_Id.ToString())")
                    },
                    "NewCase.Priority_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Priority_Id.ToString())")
                    },
                    "NewCase.Status_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Status_Id.ToString())")
                    },
                    "NewCase.StateSecondary_Id": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString())")
                    },
                    "NewCase.PlanDate": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.PlanDate.ToString())")
                    },
                    "NewCase.WatchDate": {
                        required: FieldIsRequired(
                            "@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.WatchDate.ToString())")
                    },
                },

                messages: {
                    "NewCase.ReportedBy": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ReportedBy.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.PersonsName": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Persons_Name.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.PersonsEmail": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Persons_EMail.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.PersonsCellPhone": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.PersonsPhone": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Persons_Phone.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Region_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Region_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Department_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Department_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.OU_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.OU_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Place": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Place.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.UserCode": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.UserCode.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.InventoryNumber": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.InventoryNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.InventoryLocation": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.InventoryLocation.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.InventoryType": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase_ProductArea_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.CaseType_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.CaseType_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.System_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.System_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Urgency_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Urgency_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Impact_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Impact_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Category_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Category_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Supplier_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Supplier_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.InvoiceNumber": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.ReferenceNumber": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Caption": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Caption.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Description": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Description.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Miscellaneous": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Miscellaneous.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.AgreedDate": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.AgreedDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Available": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Available.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.WorkingGroup_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Performer_User_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.CaseResponsible_User_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.CaseResponsibleUser_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Priority_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Priority_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.Status_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Status_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.StateSecondary_Id": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.PlanDate": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.PlanDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    },
                    "NewCase.WatchDate": {
                        required:
                            "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.WatchDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) " +
                                requiredText
                    }
                },

                submitHandler: function(form) {
                    form.submit();
                },

                invalidHandler: function(e, validator) {
                    //validator.errorList contains an array of objects, where each object has properties "element" and "message".  element is the actual HTML Input.
                    for (var i = 0; i < validator.errorList.length; i++) {
                        console.log(validator.errorList[i]);
                    }

                    //validator.errorMap is an object mapping input names -> error messages
                    for (var prop in validator.errorMap) {
                        if (validator.errorMap.hasOwnProperty(prop))
                            console.log(prop, ":", validator.errorMap[prop]);
                    }
                },
                errorPlacement: function (error, element) {
                    if (element.hasClass("summernotedesc")) {
                        
                        error.insertAfter(element.siblings(".note-editor"));
                        
                    } else {
                        
                        error.insertAfter(element);

                    }
                },
                highlight: function (element, errorClass, validClass) {


                    if ($(element).hasClass("summernotedesc")) {

                        $(element).siblings(".note-editor").addClass("error")

                    } else {

                        $(element).addClass("error");
                    }
                },
                unhighlight: function (element, errorClass, validClass) {

                    if ($(element).hasClass("summernotedesc")) {

                        $(element).siblings(".note-editor").removeClass("error")

                    } else {
                        $(element).removeClass("error");
                    }
                },
            });

        }


        function FieldIsRequired(value) {
            var ret = false;
            if (value == '1') {
                ret = true;
            }
            return ret;
        }

    let summerNoteDescConfig = {
        placeholder: '',
        dialogsFade: true,
        tabsize: 1,
        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36', '48', '64', '82'],
        toolbar: [['style', ['bold', 'italic', 'underline', 'clear']], ['fontname', ['fontname']], ['fontsize', ['fontsize']], ['color', ['color']], ['para', ['ul', 'ol']], ['insert', ['link', 'picture']]],
        disableResizeImage: true,
        disableResizeEditor: false,
        height: 100,
        callbacks: {
            onChange: function (contents, $editable) {

                $('.summernotedesc').val($('.summernotedesc').summernote('isEmpty') ? "" : contents);

                validator.element($('.summernotedesc'));
            }
        }
    }

    //Init summernote
    $(document).ready(function () {

        $('.summernotedesc').summernote(summerNoteDescConfig)

    });



    </script>
}



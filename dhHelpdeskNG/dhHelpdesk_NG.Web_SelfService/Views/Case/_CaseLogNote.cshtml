@using DH.Helpdesk.SelfService.Models.Case
@using DH.Helpdesk.Web.Common.Extensions
@using DH.Helpdesk.SelfService.Infrastructure.Helpers;
@model CaseLogsModel

@functions
{
    string GetLogText(CaseLogModel item)
    {
        var logText = Model.ShowInternalLogNotes ? item.InternalText : item.ExternalText;
        return (logText ?? string.Empty).Trim();
    }

    string GetLogUser(CaseLogModel logItem)
    {
        var userName = logItem.UserId == null
            ? (logItem.RegUserName == Model.CurrentUser ? Translation.Get("Me") : logItem.RegUserName)
            : logItem.UserFirstName + " " + logItem.UserSurName;
        return userName;
    }

    MvcHtmlString FormatLogText(CaseLogModel logItem)
    {
        var logText = GetLogText(logItem);



        var formatted = MvcHtmlString.Create(logText);
        return formatted;
    }
}

@if (Model.CaseLogs != null)
{
    foreach (var logModel in Model.CaseLogs)
    {
        var regDate = logModel.RegTime.ToLocalTime();
        <div class="@(!string.IsNullOrEmpty(logModel.RegUserName) ? "com-list-hd" : "com-list-com")">
            <div class="list-arrow"></div>
            <p>@GetLogUser(logModel) | @Html.DisplayFor(l => regDate)</p>
            @*<p>@Html.Raw(FormatLogText(logItem))</p>*@
            <div style="overflow-x: auto;">
                @Html.Raw(WebMethodsExtensions.HTMLToTableCell(GetLogText(logModel)).Replace("\r\n", "<br />"))
                @if (logModel.Files != null)
                {
                    foreach (var f in logModel.Files)
                    {
                        <a href="@Url.Action("DownloadLogFile", "CaseFiles", new { id = logModel.Id, caseId = logModel.CaseId, fileName = f.FileName })">
                            <i class="glyphicon glyphicon-file"></i>
                            @f.FileName
                        </a>
                        <br />
                    }
                }
            </div>
        </div>
    }
}

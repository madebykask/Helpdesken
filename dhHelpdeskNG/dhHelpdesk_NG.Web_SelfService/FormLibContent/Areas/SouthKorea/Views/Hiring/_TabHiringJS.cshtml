@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;


@{
    const string IsTeWorker = "International Transfer";
    const string DefaultCountry = "South Korea";
}

<script>
    //function changeBusinessUnitCallback() {
    //    setBusinessUnitAddress($('#BusinessUnit'));
    //}


    var lockedbyUserGroup = document.getElementById('LockedByUserGroup').getAttribute('status');
    if ("@Model.ReadOnlyTab("#OrganisationalAssignment")" == 'False' && lockedbyUserGroup == 'False') {


        $("#Department").change(function () {
            GetXML('default_costcentre.xml', SetDefaultCostCentre);
        });

        $("#PositionTitle").change(function () {
            GetXML('default_jobtitle.xml', SetDefaultJobTitle);
        });




        $(function () {


            setTimeout(function () { SetDefaultCompany(); }, 1);

            BlockCoWorkerID();

            lockContractEndDate();

            //setBusinessUnitAddress($('#BusinessUnit'));



            $("#BusinessUnit").change(function () {
                //setBusinessUnitAddress(this);

                setDefaultPrimarySite();

                setTimeout(function () { GetXML('Predefined_BusinessUnit_PositionTitle.xml', narrowDownPositionTitle); }, 1);
                setTimeout(function () { GetXML('Predefined_BusinessUnit_JobTitle.xml', narrowDownJobTitle); }, 1);
            });

            //PersonelltaxstatusBehavior();


        })
    }

    //$('[name="Personneltaxstatus"]').change(function () {
    //    PersonelltaxstatusBehavior();

    //});

    //var DisableCalculationMethod = function () {
    //    if (!($('[name="Personneltaxstatus"][value="Foreigner"]').prop('checked'))) {
    //        $('#Taxationinformation').attr('disabled', false);
    //    }
    //    else {
    //        $('#Taxationinformation').attr('disabled', true);
    //    }
    //}

    //var PersonelltaxstatusBehavior = function () {
    //    if ($('input[name="Personneltaxstatus"][value="Non-taxable Overseas Income"]').prop('checked')) {
    //        $('#Taxationinformation').attr('disabled', false);
    //    }
    //    else {
    //        $('#Taxationinformation').attr('disabled', true);
    //    }

    //    if ($('input[name="Personneltaxstatus"][value="Foreigner"]').prop('checked')) {
    //        $('#Calculationmethod').attr('disabled', false);
    //    }
    //    else {
    //        $('#Calculationmethod').attr('disabled', true);
    //    }
    //}



    $('#NewtoIKEA').change(function () {
        setGlobalMobilityBehavior($(this).val());
    });

    if ($('#NewtoIKEA').val() == '@IsTeWorker') {
        $(".globalmobility-first").show();
    }
    else {
        $(".globalmobility-first").hide();
    }
    function setGlobalMobilityBehavior(value) {
        if (!(value == '@IsTeWorker')) {

            jQuery(".globalmobility-first").hide();
            jQuery("[class*=globalmobility]").hide();
            $("[class*=globalmobility] input:not(input[type=hidden])").val("");
            jQuery("[class*=globalmobility-first]").hide();
            jQuery("[class*=globalmobility] input[type=text][name*='Country']").val('@DefaultCountry');
            jQuery("[class*=globalmobility] input[type=text][name*='PaymentCurrency']").val('KRW');
            jQuery("[class*=globalmobility] select option:not([value])").prop('selected', true);
        } else if (value == '@IsTeWorker') {
            jQuery(".globalmobility-first").show();
        }

        $("[class*=globalmobility-first] input[type=hidden]").val("1");

    };


    var setDefaultPrimarySite = function () {
        debugger;
        var bu = $("#BusinessUnit option:selected").text();

        $('#Primarysite').val(bu)
    }

    function narrowDownPositionTitle(xml) {
        //////////
        //narrowDownJobTitle:
        //Adds Jobtitles on selected Function
        //////////

        var show = ''
        var bus = '';


        if (document.getElementById('BusinessUnit')) {
            bus = $("#BusinessUnit option:selected").text();
        }


        var jobtitle_value;
        jobtitle_value = $('#PositionTitle').val();

        $('#PositionTitle').val("");

        var selectize_tags = $("#PositionTitle")[0].selectize
        selectize_tags.clearOptions();



        $(xml).find('dependent').each(function () {


            var $sel = $(this);
            show = '';

            var businessunit = $sel.find('selected').text();

            show = $sel.find('show').text();

            if (businessunit == bus) {

                if (show != '') {

                    show = ' ,' + show;

                    //temp, replace spaces that occours in the beginning of comma separation.
                    show = show.replace(/\, /g, ",");

                    var optionsarray = show.split(',');
                    optionsarray.unshift('');

                    //TEMP for Steering Group_Doncaster, Sales (problem with commas in the name) so we use  #
                    if (show.indexOf("#") > -1) {
                        $.each(optionsarray, function (i) {
                            optionsarray[i] = optionsarray[i].replace(/\#/g, ",");
                        });
                    }

                    var items = optionsarray.map(function (x) { return { text: x, value: x }; });
                    debugger;
                    selectize_tags.addOption(items);


                    if (jobtitle_value != '') {
                        selectize_tags.setValue(jobtitle_value);

                    }
                    else
                        selectize_tags.setValue('');
                    return;
                }
            }
        });
    }


    function narrowDownJobTitle(xml) {
        //////////
        //narrowDownJobTitle:
        //Adds Jobtitles on selected Function
        //////////

        var show = ''
        var bus = '';


        if (document.getElementById('BusinessUnit')) {
            bus = $("#BusinessUnit option:selected").text();
        }


        var jobtitle_value;
        jobtitle_value = $('#JobTitle').val();

        $('#JobTitle').val("");

        var selectize_tags = $("#JobTitle")[0].selectize
        selectize_tags.clearOptions();



        $(xml).find('dependent').each(function () {


            var $sel = $(this);
            show = '';

            var businessunit = $sel.find('selected').text();

            show = $sel.find('show').text();

            if (businessunit == bus) {

                if (show != '') {

                    show = ' ,' + show;

                    //temp, replace spaces that occours in the beginning of comma separation.
                    show = show.replace(/\, /g, ",");

                    var optionsarray = show.split(',');
                    optionsarray.unshift('');

                    //TEMP for Steering Group_Doncaster, Sales (problem with commas in the name) so we use  #
                    if (show.indexOf("#") > -1) {
                        $.each(optionsarray, function (i) {
                            optionsarray[i] = optionsarray[i].replace(/\#/g, ",");
                        });
                    }

                    var items = optionsarray.map(function (x) { return { text: x, value: x }; });
                    debugger;
                    selectize_tags.addOption(items);


                    if (jobtitle_value != '') {
                        selectize_tags.setValue(jobtitle_value);

                    }
                    else
                        selectize_tags.setValue('');
                    return;
                }
            }
        });
    }

    @*var setBusinessUnitAddress = function (e) {
        //Timeout needed because of delay in setting the BU
        setTimeout(function () {
            if (!($(e).val() == ' ' || $(e).val() == '')) {
                var actionUrl = '@Url.Action("BusinessUnitData", "Hiring")' + '?query=' + $(e).val();
                $.getJSON(actionUrl, setBusinessUnitAddressFromResponse);
            }
        }, 50);
    }*@

    $("#Firstname").change(function () {
        SetDefaultPayee();
    });
    $("#Lastname").change(function () {
        SetDefaultPayee();
    });

    var SetDefaultPayee = function () {
        var PayeeName;
        PayeeName = $('#Firstname').val() + " " + $('#Lastname').val()

        $('#Payee').val(PayeeName)
        $('#Payee2').val(PayeeName)
    }



    //function setBusinessUnitAddressFromResponse(response) {
    //    if (response != null) {
    //        $('#WorkAddressline1').val(response.StrAddr.toString());
    //        $('#WorkAddressline2').val(response.StrAddr2.toString());
    //        $('#WorkAddressline3').val(response.StrAddr3.toString());
    //        $('#WorkAddressline4').val(response.StrAddr4.toString());
    //        $('#WorkPostalCode').val(response.PostalCode.toString());
    //        $('#WorkCity').val(response.City.toString());
    //        $('#WorkCountry').val('South Korea');
    //    }
    //}

    $("#Contractedhours").change(function () {
        SetContractType();
    });
    var SetContractType = function () {
        if ($('#Contractedhours').val() < 40) {
            $('#Contracttype').val('Part time')
        }
        else {
            $('#Contracttype').val('Full Time')
        }
    }


    $('#date_Contractstartdate').on('changeDate', function (ev) {



        setValidFrom();

    }).data('datepicker');


    $('#Contractstartdate').change(function () {

        setValidFrom();
    });

    var setValidFrom = function () {
        //Clear calendar history
        $('#date_AllowanceValidfrom,#date_AllowanceValidfrom2,#date_AllowanceValidfrom3,#date_AllowanceValidfrom4,#date_AllowanceValidfrom5,' +
        '#date_DeductionValidfrom,#date_DeductionValidfrom2,#date_DeductionValidfrom3,#date_DeductionValidfrom4,#date_DeductionValidfrom5,#date_JoinKRIKEAdate,#date_JoinIKEAGlobal,#date_Calculationstartdate').not(".disabled").datepicker('destroy');

        //Set 'valid from' to contract start date
        $('#AllowanceValidfrom,#AllowanceValidfrom2,#AllowanceValidfrom3,#AllowanceValidfrom4,#AllowanceValidfrom5,' +
        '#DeductionValidfrom,#DeductionValidfrom2,#DeductionValidfrom3,#DeductionValidfrom4,#DeductionValidfrom5,#JoinKRIKEAdate,#JoinIKEAGlobal,#Calculationstartdate').val($('#Contractstartdate').val());
    }


    //Alternative way to set validfrom, maybe better?
    //$("#AllowancesType").change(function () {
    //    var contractstartdate;
    //    contractstartdate = $('#Contractstartdate').val();

    //    $('#AllowanceValidfrom').val(contractstartdate);
    //});
    //$("#DeductionType").change(function () {
    //    var contractstartdate;
    //    contractstartdate = $('#Contractstartdate').val();

    //    $('#DeductionValidfrom').val(contractstartdate);
    //});



    $("#Reportstolinemanager").change(function () {
        SetDefaultTECApprover();
    });

    $("#Employmentcategory").change(function () {
        lockContractEndDate();
    });

    $("#NewtoIKEA").change(function () {
        BlockCoWorkerID();
    })

    var SetDefaultTECApprover = function () {
        var LineManager;
        LineManager = $('#Reportstolinemanager').val();

        if ($('#TECapprover')[0].selectize) {
            $('#TECapprover')[0].selectize.setValue(LineManager);
        }
        else {
            $('#TECapprover').val(LineManager);
        }
    }

    var lockContractEndDate = function () {
        var val = $("#Employmentcategory").val()

        if (val == 'Permanent') {
            $('#Contractenddate').attr('disabled', true);
        }
        else {
            $('#Contractenddate').attr('disabled', false);
        }
    }

    var SetDefaultCompany = function () {

        if ($("#Company option").length == 2) {
            $("#Company option").eq(1).attr('selected', true);
            $("#Company").change();
        }
    }


    var BlockCoWorkerID = function () {
        var val = $("#NewtoIKEA").val();
        if (val == "New-Hire") {
            $('#Co-workerID').attr("disabled", true);
        }
        else {
            $('#Co-workerID').attr("disabled", false);
        }
    }

    var SetDefaultCostCentre = function (xml) {
        var functiondepartment;
        functiondepartment = $("#ServiceArea option:selected").text() + "_" + $("#Department option:selected").text();
        $(xml).find('dependent').each(function () {
            var $sel = $(this);
            show = '';

            var department = $sel.find('selected').text();

            show = $sel.find('show').text();

            if (department == functiondepartment) {

                if (show != '') {
                    var n = show.indexOf("#");

                    if (n == -1) {
                        if ($('#CostCentre')[0].selectize) {
                            $('#CostCentre')[0].selectize.setValue(show);
                        }
                        else {
                            $('#CostCentre').val(show);
                        }
                    }
                    else {
                        var res = show.substring(0, n);
                        if ($('#CostCentre')[0].selectize) {
                            $('#CostCentre')[0].selectize.setValue(res);
                        }
                        else {
                            $('#CostCentre').val(show);
                        }
                    }
                    return;
                }
            }
        })
    }

    var SetDefaultJobTitle = function (xml) {
        var positiontitle;
        positiontitle = $("#PositionTitle").val();
        $(xml).find('dependent').each(function () {
            var $sel = $(this);
            show = '';

            var jobtitle = $sel.find('selected').text();

            show = $sel.find('show').text();

            if (jobtitle == positiontitle) {
                debugger;
                if (show != '') {
                    var n = show.indexOf("#");

                    if (n == -1) {

                        $('#JobTitle')[0].selectize.setValue(show);
                    }
                    else {
                        var res = show.substring(0, n);

                        $('#JobTitle')[0].selectize.setValue(res);
                    }
                    return;
                }
            }
        })
    }



    $('#date_Contractstartdate').not(".disabled").datepicker().on('changeDate', function (ev) {

        SetProbationEndDate($('#Probationperiod').val());

        SetAllowanceValidFrom($('#Contractstartdate').val());
        SetDeductionValidFrom($('#Contractstartdate').val());
    });

    var SetAllowanceValidFrom = function (startdate) {
        $('#AllowanceValidfrom').val(startdate);
    };

    var SetDeductionValidFrom = function (startdate) {
        $('#DeductionValidfrom').val(startdate);
    }


    $('#Contractstartdate').not(".disabled").change(function () {
        SetProbationEndDate($('#Probationperiod').val());
        SetAllowanceValidFrom($('#Contractstartdate').val());
        SetDeductionValidFrom($('#Contractstartdate').val());
    });
    $('#Probationperiod').change(function () {
        SetProbationEndDate($(this).val());
    });

    var SetProbationEndDate = function (value) {
        var probationEndDate = $('#Probationenddate');
        if (value == 'Yes') {
            var sStart = $('#Contractstartdate').val();
            var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
            var dStart = APIGlobal.DateTime.parseDate(sStart, format);

            var endDate = new Date(dStart.getFullYear(), dStart.getMonth() + 3, dStart.getDate() - 1, 0, 0, 0, 0);
            var visibleDate = APIGlobal.DateTime.formatDate(endDate, format);
            probationEndDate.val(visibleDate.toString());
        }
        else {
            probationEndDate.val("");
        }
    };

    $('#Payrollcategory').change(function () {
        SetDefaultPaidPer();
    });

    var SetDefaultPaidPer = function () {
        var pay = $('#Payrollcategory').val();

        if (pay == 'Salaried - Monthly' || pay == 'Flex - Monthly') {
            $('#Paidper').val('month');
        }
        else if (pay == 'Salaried - Hourly' || pay == 'Flex - Hourly') {
            $('#Paidper').val('hour');
        }
    }


    function GetXML(xmlFile, url) {
        //////////
        //Gets XML File
        //////////

        var path = window.location.protocol + '//';
        path = path + window.location.host + '/';

        path = site.baseUrl + '/FormLibContent/Xmls/SouthKorea/Defaults/' + xmlFile

        $.ajax({
            type: "GET",
            url: path,
            dataType: "xml",
            success: url,
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
                alert(textStatus);
                alert(errorThrown);
            }

        });
    }

</script>

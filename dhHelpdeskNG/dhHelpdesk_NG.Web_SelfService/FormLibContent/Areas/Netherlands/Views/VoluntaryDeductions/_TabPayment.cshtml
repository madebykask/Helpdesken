@model DH.Helpdesk.EForm.FormLib.Models.FormModel
@using DH.Helpdesk.EForm.FormLib;
@using DH.Helpdesk.EForm.FormLib.Models;

<div class="tab-pane" id="Payment">
    <div class="span6">
        <table class="table">
            <tbody>
                 <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Deductions")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsType")</td>
                    <td>
                        @Model.Element("DeductionsType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PaymentType")</td>
                    <td>
                        @Model.Element("PaymentType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsAmountUnits")</td>
                    <td>
                        @Model.Element("DeductionsAmountUnits")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsNetGross")</td>
                    <td>
                        @Model.Element("DeductionsNetGross")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidFrom")</td>
                    <td>
                        @Model.Element("DeductionsValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidTo")</td>
                    <td>
                        @Model.Element("DeductionsValidTo")
                    </td>
                </tr>
                
                 @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="deduction@(i.ToString())" id="deduction@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Deductions") @(i.ToString())</h4>
                        </td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsType" + i.ToString())</td>
                    </tr>
                     <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("PaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("PaymentType" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsNetGross" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addDeductionTrr">
                    <td colspan="2">
                        @Model.Element("Deductions")
                        <a id="addDeduction" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Deduction")</a></td>
                </tr>

               

            </tbody>
        </table>
    </div>
    <input type="hidden" id="MultipleEntrySectionsNr" value="@FormLibConstants.FormField.MultipleEntrySectionsNr" />  
</div>

<script>
      
    if ("@Model.ReadOnlyTab("#Payment")" == "False") {
        $('#DeductionsType').change(function () {
            if (document.getElementById('DeductionsValidFrom').value == '')
                document.getElementById('DeductionsValidFrom').value = document.getElementById('ChangeValidFrom').value;
        });

        $('#DeductionsType2').change(function () {
            if (document.getElementById('DeductionsValidFrom2').value == '')
                document.getElementById('DeductionsValidFrom2').value = document.getElementById('ChangeValidFrom').value;
        });

        $('#DeductionsType3').change(function () {
            if (document.getElementById('DeductionsValidFrom3').value == '')
                document.getElementById('DeductionsValidFrom3').value = document.getElementById('ChangeValidFrom').value;
        });

        $('#DeductionsType4').change(function () {
            if (document.getElementById('DeductionsValidFrom4').value == '')
                document.getElementById('DeductionsValidFrom4').value = document.getElementById('ChangeValidFrom').value;
        });

        $('#DeductionsType5').change(function () {
            if (document.getElementById('DeductionsValidFrom5').value == '')
                document.getElementById('DeductionsValidFrom5').value = document.getElementById('ChangeValidFrom').value;
        });





        // set the change valid from value to Deductions valid from fields

        $('#date_ChangeValidFrom').on('changeDate', function (ev) {
            $('#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker('destroy');
            setPaymentDatePickersBehavior();
            $('#DeductionsValidFrom,#DeductionsValidFrom2,#DeductionsValidFrom3,#DeductionsValidFrom4,#DeductionsValidFrom5').val($('#ChangeValidFrom').val());

        }).data('datepicker');
        $('#ChangeValidFrom').change(function () {
            $('#DeductionsValidFrom,#DeductionsValidFrom2,#DeductionsValidFrom3,#DeductionsValidFrom4,#DeductionsValidFrom5').val($('#ChangeValidFrom').val());
        });

        function setPaymentDatePickersBehavior() {
            var startDate = $('#ChangeValidFrom').val();
            var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
            var dStart = APIGlobal.DateTime.parseDate(startDate, format);
            var forcePicker = new Date(dStart.getFullYear(), dStart.getMonth(), dStart.getDate(), 0, 0, 0, 0);
            $('#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker(
            {
                onRender: function (ev) {
                    return ev.valueOf() < forcePicker.valueOf() ? 'disabled' : '';
                }
            });
        };
        setPaymentDatePickersBehavior();

        function setValidTo(id, choos) {
            var allowancesValidTo = document.getElementById(id);

            var input = $('#' + id);
            if (choos == 'One Time') {
                allowancesValidTo.value = "";
                document.getElementById(id).disabled = true;
                document.getElementById('date_' + id).disabled = true;
            } else {
                
                    document.getElementById(id).disabled = false;
                    document.getElementById('date_' + id).disabled = false;
                    
            }
        };

        function setDefaultDateValidTo(id, choos)
        {
            if (choos == 'Recurring')
            {
                $('#' + id).val($('#ChangeValidTo').val());
            }
        };


        $('#PaymentType').change(function () {
            setValidTo('DeductionsValidTo', $(this).val());
            setDefaultDateValidTo('DeductionsValidTo', $(this).val());
        });
        setValidTo('DeductionsValidTo', $('#PaymentType').val());

        $('#PaymentType2').change(function () {
            setValidTo('DeductionsValidTo2', $(this).val());
            setDefaultDateValidTo('DeductionsValidTo2', $(this).val());
        });
        setValidTo('DeductionsValidTo2', $('#PaymentType2').val());

        $('#PaymentType3').change(function () {
            setValidTo('DeductionsValidTo3', $(this).val());
        });
        setValidTo('DeductionsValidTo3', $('#PaymentType3').val());

        $('#PaymentType4').change(function () {
            setValidTo('DeductionsValidTo4', $(this).val());
        });
        setValidTo('DeductionsValidTo4', $('#PaymentType4').val());

        $('#PaymentType5').change(function () {
            setValidTo('DeductionsValidTo5', $(this).val());
        });
        setValidTo('DeductionsValidTo5', $('#PaymentType5').val());


        


 
        function setDeductionUnits(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('DeductionsNetGross').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('DeductionsNetGross').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('DeductionsNetGross ').value = '';
                    }
                }
            });
        }

        function setPaymentType(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('PaymentType').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('PaymentType').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('PaymentType ').value = '';
                    }
                }
            });
        }

        function setDeductionUnits2(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType2').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('DeductionsNetGross2').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('DeductionsNetGross2').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('DeductionsNetGross2').value = '';
                    }
                }
            });
        }

        function setPaymentType2(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType2').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('PaymentType2').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('PaymentType2').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('PaymentType2').value = '';
                    }
                }
            });
        }

        function setDeductionUnits3(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType3').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('DeductionsNetGross3').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('DeductionsNetGross3').value = res;

                        }
                        return;
                    }
                    else {
                        document.getElementById('DeductionsNetGross3').value = '';
                    }
                }
            });
        }

        function setPaymentType3(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType3').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('PaymentType3').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('PaymentType3').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('PaymentType3').value = '';
                    }
                }
            });
        }


        function setDeductionUnits4(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType4').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('DeductionsNetGross4').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('DeductionsNetGross4').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('DeductionsNetGross4').value = '';
                    }
                }
            });
        }

        function setPaymentType4(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType4').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('PaymentType4').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('PaymentType4').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('PaymentType4').value = '';
                    }
                }
            });
        }

        function setDeductionUnits5(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType5').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('DeductionsNetGross5').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('DeductionsNetGross5').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('DeductionsNetGross5').value = '';
                    }
                }
            });
        }

        function setPaymentType5(xml) {
            var show = ''

            var dep = document.getElementById('DeductionsType5').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('PaymentType5').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('PaymentType5').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('PaymentType5').value = '';
                    }
                }
            });
        }

        $('#DeductionsType').change(function () {
            GetXML('Predefined_VoluntaryDeductions_NetGross.xml', setDeductionUnits);
            GetXML('Predefined_PaymentType.xml', setPaymentType);
            setTimeout(function () { setDefaultDateValidTo('DeductionsValidTo', $('#PaymentType').val()); }, 30);
        });

        $('#DeductionsType2').change(function () {

            GetXML('Predefined_VoluntaryDeductions_NetGross.xml', setDeductionUnits2);
            GetXML('Predefined_PaymentType.xml', setPaymentType2);
            setTimeout(function () { setDefaultDateValidTo('DeductionsValidTo2', $('#PaymentType2').val()); }, 30);
        });

        $('#DeductionsType3').change(function () {

            GetXML('Predefined_VoluntaryDeductions_NetGross.xml', setDeductionUnits3);
            GetXML('Predefined_PaymentType.xml', setPaymentType3);
            setTimeout(function () { setDefaultDateValidTo('DeductionsValidTo3', $('#PaymentType3').val()); }, 30);
        });

        $('#DeductionsType4').change(function () {

            GetXML('Predefined_VoluntaryDeductions_NetGross.xml', setDeductionUnits4);
            GetXML('Predefined_PaymentType.xml', setPaymentType4);
            setTimeout(function () { setDefaultDateValidTo('DeductionsValidTo4', $('#PaymentType4').val()); }, 30);
        });

        $('#DeductionsType5').change(function () {

            GetXML('Predefined_VoluntaryDeductions_NetGross.xml', setDeductionUnits5);
            GetXML('Predefined_PaymentType.xml', setPaymentType5);
            setTimeout(function () { setDefaultDateValidTo('DeductionsValidTo5', $('#PaymentType5').val()); }, 30);
        });

    }



    function GetXML(xmlFile, url) {
        //////////
        //Gets XML File
        //////////

        var path = window.location.protocol + '//';
        path = path + window.location.host + '/';

        path = site.baseUrl + '/FormLibContent/Xmls/Netherlands/Defaults/' + xmlFile

        $.ajax({
            type: "GET",
            url: path,
            dataType: "xml",
            success: url,
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
                alert(textStatus);
                alert(errorThrown);
            }

        });


    }


</script>
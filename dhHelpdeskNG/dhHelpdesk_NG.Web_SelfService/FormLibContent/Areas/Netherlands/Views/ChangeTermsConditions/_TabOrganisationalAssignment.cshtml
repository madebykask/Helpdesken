@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

@{
    
    //Layout = null;
    //Model.Language = "nl";
    var fillOldVal = TempData["oldValues"];
    var newfill = (List<KeyValuePair<string, string>>)fillOldVal;
    //const string EmployeeCategory = "Permanent";
}

<div class="tab-pane" id="OrganisationalAssignment">
    <div class="span8">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Organisation")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("OrganisationCountry")</td>
                    <td>@Model.Element("OrganisationCountry")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewCompany")</td>
                    <td>@Model.Element("NewCompany")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_NewCompany" name="OLD_NewCompany" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewCompany").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewCompany">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewCompany").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewBusinessUnit")</td>
                    <td>@Model.Element("NewBusinessUnit")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_NewBusinessUnit" name="OLD_NewBusinessUnit" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewBusinessUnit").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewBusinessUnit">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewBusinessUnit").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewServiceArea")</td>
                    <td>@Model.Element("NewServiceArea")</td>
                    <td>
                         <input type="hidden" class="oldValue"  id="OLD_NewServiceArea" name="OLD_NewServiceArea" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewServiceArea").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewServiceArea">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewServiceArea").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewDepartment")</td>
                    <td>@Model.Element("NewDepartment")</td>
                    <td>
                         <input type="hidden" class="oldValue"  id="OLD_NewDepartment" name="OLD_NewDepartment" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewDepartment").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewDepartment">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewDepartment").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>                
                <tr>
                    <td class="tdstrong">@Model.Label("HomeCostCentre")</td>
                    <td>@Model.Element("HomeCostCentre")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_HomeCostCentre" name="OLD_HomeCostCentre" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_HomeCostCentre").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_HomeCostCentre">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_HomeCostCentre").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CostAllocation")</td>
                    <td>@Model.Element("CostAllocation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CrossChargeCostCentre")</td>
                    <td>@Model.Element("CrossChargeCostCentre")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_CrossChargeCostCentre" name="OLD_CrossChargeCostCentre" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CrossChargeCostCentre").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_CrossChargeCostCentre">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CrossChargeCostCentre").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Job")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("JobTitle")</td>
                    <td>@Model.Element("JobTitle")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_JobTitle" name="OLD_JobTitle" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_JobTitle").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_JobTitle">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_JobTitle").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LocalJobTitle")</td>
                    <td>@Model.Element("LocalJobTitle")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewPosition")</td>
                    <td>@Model.Element("NewPosition")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ReportsToLineManager")</td>
                    <td>@Model.Element("ReportsToLineManager")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_ReportsToLineManager" name="OLD_ReportsToLineManager" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ReportsToLineManager").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_ReportsToLineManager">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ReportsToLineManager").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                                <tr>
                    <td class="tdstrong">@Model.Label("AcknowledgedManagerInCLA")</td>
                    <td>@Model.Element("AcknowledgedManagerInCLA")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ResidencePermitRestriction")</td>
                    <td>@Model.Element("ResidencePermitRestriction")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("EligibleForManagementAllowance")</td>
                    <td>@Model.Element("EligibleForManagementAllowance")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Employment Conditions")</h4>
                    </td>
                    <td class="tdstrong">
                        <h4>@Model.Translate("Current record")</h4>
                    </td> 
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("EmploymentCategory")</td>
                    <td>@Model.Element("EmploymentCategory")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_EmploymentCategory" name="OLD_EmploymentCategory" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_EmploymentCategory").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_EmploymentCategory">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_EmploymentCategory").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractEndDate")</td>
                    <td>@Model.Element("ContractEndDate")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractedHours")</td>
                    <td>@Model.Element("ContractedHours")</td>  
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_ContractedHours" name="OLD_ContractedHours" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ContractedHours").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_ContractedHours">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ContractedHours").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>                  
                </tr>
                @*<tr>
                    <td class="tdstrong">@Model.Label("PreviousContractHours")</td>
                    <td>@Model.Element("PreviousContractHours")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_PreviousContractHours" name="OLD_PreviousContractHours" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_PreviousContractHours").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_PreviousContractHours">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_PreviousContractHours").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("ContractType")</td>
                    <td>@Model.Element("ContractType")</td>
                </tr>
@*                <tr>
                    <td class="tdstrong">@Model.Label("ProbationPeriod")</td>
                    <td>@Model.Element("ProbationPeriod")</td>
                </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("ProbationEndDate")</td>
                    <td>@Model.Element("ProbationEndDate")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("CDS")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PrimarySite")</td>
                    <td>@Model.Element("PrimarySite")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TECApprover")</td>
                    <td>@Model.Element("TECApprover")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("HelpDesk")</td>
                    <td>@Model.Element("HelpDesk")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Apprentice education")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>                
                <tr>
                    <td class="tdstrong">@Model.Label("NameOfSchool")</td>
                    <td>@Model.Element("NameOfSchool")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NameOfEducation")</td>
                    <td>@Model.Element("NameOfEducation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CityEducationSchool")</td>
                    <td>@Model.Element("CityEducationSchool")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LevelOfEducation")</td>
                    <td>@Model.Element("LevelOfEducation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("MentorAtIKEA")</td>
                    <td>@Model.Element("MentorAtIKEA")</td>
                </tr>
            </tbody>
        </table>
    </div>
    <input type="hidden" id="state" name="state" value="@Model.Contract.StateSecondaryId" />
</div>

<script>   
    var lockedbyUserGroup = document.getElementById('LockedByUserGroup').getAttribute('status');
    if ("@Model.ReadOnlyTab("#OrganisationalAssignment")" == 'False' && lockedbyUserGroup == 'False') {
        $(function () {

            function setEmployeeBehavior(value) {
                if (value == 'Permanent') {
                    $('#date_ContractEndDate').datepicker("destroy");
                    $('#date_ContractEndDate').addClass("disabled");
                    $('#ContractEndDate').prop('disabled', true);
                    $('#ContractEndDate').val("");
                }
                else {
                    $('#date_ContractEndDate').datepicker();
                    $('#ContractEndDate').prop('disabled', false);
                    $("#ContractEndDate").removeClass("disabled");
                }
            }

            if ($('#EmploymentCategory').val() == 'Permanent') {
                $('#date_ContractEndDate').datepicker("destroy");
                $('#date_ContractEndDate').addClass("disabled");
                $('#ContractEndDate').prop('disabled', true);
                $('#ContractEndDate').val("");
            }


            $('#EmploymentCategory').change(function () {
                setEmployeeBehavior($(this).val());
                setdeductionvalidto();
            });


            $('#date_ContractEndDate').on('changeDate', function (ev) {
                setdeductionvalidto();
            });

            function setdeductionvalidto() {
                if ($('#EmploymentCategory').val() == 'Temporary') {
                    var enddatetoset = $('#ContractEndDate').val();
                    if (!(enddatetoset == '')) {
                        $('#DeductionsValidTo').val(enddatetoset);
                        $('#DeductionsValidTo2').val(enddatetoset);
                        $('#DeductionsValidTo3').val(enddatetoset);
                        $('#DeductionsValidTo4').val(enddatetoset);
                        $('#DeductionsValidTo5').val(enddatetoset);
                    }
                }
                else {

                    var defaultvalue = '31.12.9999';
                    $('#DeductionsValidTo').val(defaultvalue);
                    $('#DeductionsValidTo2').val(defaultvalue);
                    $('#DeductionsValidTo3').val(defaultvalue);
                    $('#DeductionsValidTo4').val(defaultvalue);
                    $('#DeductionsValidTo5').val(defaultvalue);
                }
            }

            if ($('#EmploymentCategory').val() == 'Temporary') {

                $('#DeductionsValidTo').val($('#ContractEndDate').val());
                $('#DeductionsValidTo2').val($('#ContractEndDate').val());
                $('#DeductionsValidTo3').val($('#ContractEndDate').val());
                $('#DeductionsValidTo4').val($('#ContractEndDate').val());
                $('#DeductionsValidTo5').val($('#ContractEndDate').val());

            }

        });

        function selectIndexChangeLineManagertoTECApprover() {
            document.getElementById('TECApprover').value = document.getElementById('ReportsToLineManager').value;
        }
        document.getElementById('ReportsToLineManager').onchange = selectIndexChangeLineManagertoTECApprover;


        function selectIndexChangeBusinessUnittoPrimarySite() {

            document.getElementById('PrimarySite').value = document.getElementById('NewBusinessUnit').value;

        }
        document.getElementById('NewBusinessUnit').onchange = selectIndexChangeBusinessUnittoPrimarySite;

        var changeType = document.getElementById('ChangeType').value;
        if (changeType == 'ONLY extend temporary contract') {
            $("#EmploymentCategory option").each(function () {
                $(this).prop('disabled', true);
            });
            $('#EmploymentCategory').find("option[value*='Temporary']").prop("disabled", false);
        }

        $('#NewBusinessUnit').change(function () {
            var value = $(this).val();
            $('#ReportsToLineManager').val('');
            if ($('#NewBusinessUnit')[0].selectize) {
                var selectedText = $('#NewBusinessUnit')[0].selectize.getItem(value).text();

                if ($('#PrimarySite')[0].selectize) {
                    $('#PrimarySite')[0].selectize.setValue(selectedText);
                }
                else {
                    $('#PrimarySite').val(selectedText);
                }
            }
            else {
                var selectedText = $('#NewBusinessUnit').find('option:selected').text();
                if ($('#PrimarySite')[0].selectize) {
                    $('#PrimarySite')[0].selectize.setValue(selectedText);
                }
                else {
                    var selectedText = $('#NewBusinessUnit').find('option:selected').text();
                    $('#PrimarySite').val(selectedText);
                }
            }

            GetXML('predefined_businessunit_linemanager_Change_outs.xml', setLineManager);
        });

        $('#ReportsToLineManager').change(function () {
            var value = $(this).val();
            if ($('#ReportsToLineManager')[0].selectize) {
                var selectedText = $('#ReportsToLineManager')[0].selectize.getItem(value).text();

                if ($('#TECApprover')[0].selectize) {
                    $('#TECApprover')[0].selectize.setValue(selectedText);
                }
                else {
                    $('#TECApprover').val(selectedText);
                }
            }
            else {
                var selectedText = $('#ReportsToLineManager').find('option:selected').text();
                if ($('#TECApprover')[0].selectize) {
                    $('#TECApprover')[0].selectize.setValue(selectedText);
                }
                else {
                    var selectedText = $('#ReportsToLineManager').find('option:selected').text();
                    $('#TECApprover').val(selectedText);
                }
            }
        });
        $('#NewDepartment').change(function () {

            GetXML('Predifened_CostCentre_Change.xml', setCostCentre);

        });

        $('#JobTitle').change(function () {

            GetXML('predefined_jobtitle_localjobtitle_Change_outs.xml', setLocalJobTitle);
            GetXML('predefined_jobtitle_payscale_Change_outs.xml', setPayScale);

        });


        function GetXML(xmlFile, url) {
            //////////
            //Gets XML File
            //////////

            var path = window.location.protocol + '//';
            path = path + window.location.host + '/';

            path = site.baseUrl + '/FormLibContent/Xmls/Netherlands/Templates/' + xmlFile

            $.ajax({
                type: "GET",
                url: path,
                dataType: "xml",
                success: url,
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(jqXHR.responseText);
                    alert(textStatus);
                    alert(errorThrown);
                }

            });


        }


        function setLineManager(xml) {
            //////////
            //setLineManagerJobTitle:
            //Adds Jobtitles on selected Function
            //////////
            var show = ''
            var dep = '';

            if (document.getElementById('NewBusinessUnit')) {
                dep = $("#NewBusinessUnit option:selected").text();
            }
            var selectize_tags;

            selectize_tags = $('#ReportsToLineManager')[0].selectize;
            selectize_tags.clearOptions();

            $(xml).find('dependent').each(function () {
                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department == dep) {

                    if (show != '') {

                        show = ' ,' + show;

                        var optionsarray = show.split(',');
                        optionsarray.unshift('');

                        var items = optionsarray.map(function (x) { return { text: x, value: x }; });
                        selectize_tags.addOption(items);

                        selectize_tags.setValue('');
                        return;
                    }
                }
            });

        }
        function setPayScale(xml) {
            var show = ''

            var dep = document.getElementById('JobTitle').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();



                if (department == dep) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('PayScaleLevel').value = show;


                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('PayScaleLevel').value = res;


                        }

                    }

                }
                setChangePayScaleLevel('');
                setChangePayScaleLevel('2');
                setChangePayScaleLevel('3');
                setChangePayScaleLevel('4');
                setChangePayScaleLevel('5');
            });
        }

        function setLocalJobTitle(xml) {
            var show = ''

            var dep = document.getElementById('JobTitle').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();


                if (department == dep) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            $('#LocalJobTitle')[0].selectize.setValue(show);


                        }
                        else {
                            var res = show.substring(0, n);

                            $('#LocalJobTitle')[0].selectize.setValue(res);

                        }
                        return;
                    }
                }
            });
        }

        function setCostCentre(xml) {
            var show = ''
            var dep = $("#NewDepartment option:selected").text();
            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            $('#HomeCostCentre')[0].selectize.setValue(show);
                            $('#CrossChargeCostCentre')[0].selectize.setValue(show);

                        }
                        else {
                            var res = show.substring(0, n);

                            $('#HomeCostCentre')[0].selectize.setValue(res);
                            $('#CrossChargeCostCentre')[0].selectize.setValue(res);
                        }
                        return;
                    }
                }
            });
        }



        function setAllowanceUnits5(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType5').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross5').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross5').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross5').value = '';
                    }
                }
            });
        }

        function setAllowanceUnits4(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType4').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross4').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross4').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross4').value = '';
                    }
                }
            });
        }

        function setAllowanceUnits3(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType3').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross3').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross3').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross3').value = '';
                    }
                }
            });
        }

        function setAllowanceUnits2(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType2').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross2').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross2').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross2').value = '';
                    }
                }
            });
        }

        function setAllowanceUnits(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross').value = '';
                    }
                }
            });
        }

        function ValueChangeContractedHours() {

            if (document.getElementById('ContractedHours').value > '35') {

                document.getElementById('ContractType').selectedIndex = 2;
            }
            else {
                document.getElementById('ContractType').selectedIndex = 1;
            }
        }

        document.getElementById('ContractedHours').onchange = ValueChangeContractedHours;
    }
</script>

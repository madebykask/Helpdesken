@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
@using ECT.Model.Entities;
@{
    ViewBag.Title = Model.Translate("Netherlands") + " - " + Model.Translate("Service Request Details");
    var url = Url.CurrentController() + "typeahead";
    //var firstEventVal = TempData["FirstEventVal"];
    //var lockedFields = TempData["LockedFields"];
    //var PublicHasEvent = TempData["HasEvent"];
    //var appliedEventName = TempData["AppliedEventName"];
    //var canApplyRule = TempData["CanApplyRule"];   
    //var allEvents = Model.events;    
}

@section Script {
    <script type="text/javascript">

        // *****Change terms conditions Permanent solution
        //$(document).ready(function () {
        //    $('#CanApplyRule').val('true');
        //    $('#HasEvent').val('false');
        //});

        //var json = $.parseJSON($("#MyInput").val());
        ////$('#NewCompany').attr('disabled', true);

        //$(document).on('change', 'input', function (e) {
        //    var val = $(this).attr('id');
        //    var canDo = $('#CanApplyRule').val();
        //    var hv = $('#HasEvent').val();

        //    if (hv != 'true' && val != undefined && canDo == 'true') {
        //        var allFieldname = ";";
        //        var allLockedFiekds = ";";
        //        var hasEvent = "";
        //        if (json.length != null) {
        //            for (var i = 0; i < json.length; i++) {
        //                var item = json[i];
        //                if (item.ElementName == val) {

        //                    $('#AppliedEventName').val(val);
        //                    var rules = item.Rules;

        //                    if (rules != null) {

        //                        for (var j = 0 ; j < rules.length; j++) {
        //                            var rule = rules[j];
        //                            if (rule.ActionType == 1) {
        //                                $('#' + rule.ElementName).val("");
        //                                if ($('#' + rule.ElementName).val() !== $('#OLD_' + rule.ElementName).val() &&
        //                                    $('#OLD_' + rule.ElementName).parent().find('.icon-flag').length == 0)
        //                                    $('#OLD_' + rule.ElementName).parent().prepend($(iconFlag));
        //                                hasEvent = 'true';
        //                            }

        //                            if (rule.ActionType == 2) {
        //                                allFieldname = allFieldname + rule.ElementName + ":" + rule.RuleValue + ";";
        //                                hasEvent = 'true';
        //                            }

        //                            if (rule.ActionType == 3) {
        //                                $('#' + rule.ElementName).prop('disabled', true);
        //                                $('#date_' + rule.ElementName).addClass("disabled");
        //                                allLockedFiekds = allLockedFiekds + rule.ElementName + ";";
        //                                hasEvent = 'true';
        //                            }
        //                        } //for j
        //                        $('#FirstEventName').val(allFieldname);
        //                        $('#LockedFields').val(allLockedFiekds);
        //                        $('#HasEvent').val(hasEvent);

        //                    } // has rules
        //                }
        //            }
        //        }// if json is not empty
        //    } // first event is empty
        //});


        ////$(document).on('change', 'select', function (e) {
        //$('select').change(function (e) {
        //    var field = $(this).attr('id');
        //    if (field == 'ChangeType') {
        //        $(this).attr('disabled', true);
        //    }
        //    var fieldValue = $(this).val();
        //    var fvn = $('#FirstEventName').val();
        //    var hv = $('#HasEvent').val();
        //    var canDo = $('#CanApplyRule').val();

        //    if (hv != 'true' && field != undefined && canDo == 'true') {

        //        var allFieldname = ";";
        //        var allLockedFiekds = ";";
        //        var hasEvent = "";
        //        var extraLockedfields ="" ;
        //        if (json.length != null) {
        //            for (var i = 0; i < json.length; i++) {
        //                var item = json[i];
        //                if (item.ElementName == field && item.EventValue == 1) {

        //                    $('#AppliedEventName').val(field);

        //                    var rules = item.Rules;
        //                    if (rules != null) {

        //                        for (var j = 0 ; j < rules.length; j++) {
        //                            var rule = rules[j];

        //                            if (rule.ActionType == 1) {
        //                                $('#' + rule.ElementName).val("");
        //                                if ($('#' + rule.ElementName).val() !== $('#OLD_' + rule.ElementName).val() &&
        //                                    $('#OLD_' + rule.ElementName).parent().find('.icon-flag').length == 0)
        //                                    $('#OLD_' + rule.ElementName).parent().prepend($(iconFlag));
        //                                hasEvent = 'true';
        //                            }

        //                            if (rule.ActionType == 2) {
        //                                allFieldname = allFieldname + rule.ElementName + ":" + rule.RuleValue + ";";
        //                                hasEvent = 'true'
        //                            }

        //                            if (rule.ActionType == 3) {
        //                                $('#' + rule.ElementName).prop('disabled', true);
        //                                $('#date_' + rule.ElementName).addClass("disabled");
        //                                allLockedFiekds = allLockedFiekds + rule.ElementName + ";";
        //                                hasEvent = 'true';
        //                            }
        //                        } //for j
                                
        //                        $('#FirstEventName').val(allFieldname);                              
        //                        $('#LockedFields').val(allLockedFiekds);                                
        //                        $('#HasEvent').val(hasEvent);

        //                    } // has rules
        //                }// if Event value  

        //                if (item.ElementName == field && item.EventValue == fieldValue) {

        //                    $('#AppliedEventName').val(field);

        //                    var rules = item.Rules;
        //                    if (rules != null) {

        //                        for (var j = 0 ; j < rules.length; j++) {
        //                            var rule = rules[j];

        //                            if (rule.ActionType == 1) {

        //                                $('#' + rule.ElementName).val("");
        //                                if ($('#' + rule.ElementName).val() !== $('#OLD_' + rule.ElementName).val() &&
        //                                    $('#OLD_' + rule.ElementName).parent().find('.icon-flag').length == 0)
        //                                    $('#OLD_' + rule.ElementName).parent().prepend($(iconFlag));

        //                                if (fieldValue == 'ONLY extend temporary contract') {                                       
        //                                    $("#EmploymentCategory option").each(function () {
        //                                        $(this).prop('disabled', true);
        //                                    });
        //                                    $('#EmploymentCategory').val('Temporary');
        //                                    $('#EmploymentCategory').find("option[value*='Temporary']").prop("disabled", false);                                                                                
        //                                    $('#date_ContractEndDate').datepicker();
        //                                    $('#ContractEndDate').prop('disabled', false);
        //                                    $("#ContractEndDate").removeClass("disabled");
        //                                    if ($('#' + rule.ElementName).val() === $('#OLD_' + rule.ElementName).val() &&
        //                                    $('#OLD_' + rule.ElementName).parent().find('.icon-flag').length > 0)
        //                                        $('#OLD_' + rule.ElementName).parent().find('.icon-flag').remove();
        //                                }
        //                                if (fieldValue == 'ONLY temporary to regular') {
        //                                    $("#EmploymentCategory option").each(function () {
        //                                        $(this).prop('disabled', true);
        //                                    });
        //                                    $('#EmploymentCategory').val('Permanent');
        //                                    $('#EmploymentCategory').find("option[value*='Permanent']").prop("disabled", false);
        //                                    if ($('#' + rule.ElementName).val() === $('#OLD_' + rule.ElementName).val() &&
        //                                   $('#OLD_' + rule.ElementName).parent().find('.icon-flag').length > 0)
        //                                        $('#OLD_' + rule.ElementName).parent().find('.icon-flag').remove();
        //                                }
        //                                if (item.EventType == 1)
        //                                hasEvent = 'true';
        //                            }

        //                            if (rule.ActionType == 2) {
        //                                allFieldname = allFieldname + rule.ElementName + ":" + rule.RuleValue + ";";
        //                                if (item.EventType == 1)
        //                                hasEvent = 'true'
        //                            }

        //                            if (rule.ActionType == 3) {
        //                                $('#' + rule.ElementName).prop('disabled', true);
        //                                $('#date_' + rule.ElementName).addClass("disabled");
        //                                allLockedFiekds = allLockedFiekds + rule.ElementName + ";";
        //                                if (item.EventType == 1)
        //                                hasEvent = 'true';
        //                            }
        //                        } //for j
        //                        $('#FirstEventName').val(allFieldname);
        //                        $('#LockedFields').val(allLockedFiekds);
        //                        $('#HasEvent').val(hasEvent);
        //                    } //if rules not empty
        //                }// rules if ChangeType Equals to fieldvalue                                                                      
        //            } // JSon for
        //        }// if json is not empty
        //    } // first event is empty
        //    //});
        //});

        //// Validation changes 
        //$(document).on('change', '#actionState', function (e) {
        //    var val = $(this).val();
        //    if (val != "" && $('#FirstEventName').val() != "") {
        //        var allFieldname = $('#FirstEventName').val();
        //        return $.ajax({
        //            url: site.baseUrl + '/Netherlands/ChangeTermsConditions/ChangeRules/',
        //            type: 'post',
        //            data: { id: val, eventFieldName: allFieldname },
        //            dataType: 'json',
        //            success: function (result) {
        //                $('#validate_' + val).val(result);
        //                $('#LastValidation').val(result);
        //                validate.run(val);
        //            }
        //        });
        //    }
        //    //else {

        //    //    //validate.run(val);
        //    //}
        //});

        //// apply flag to change field value
        //var iconFlag = '<i class="icon-flag"></i>';
        //var elemOld = $('input[name^="OLD_"]');    
        //var elem = new Array();       

        //elemOld.each(function (e) {   
        //    var $this = $(this);
        //    var $that = $('#' + $this.attr('id').replace('OLD_', ''));
             
        //    $this.parent().find('.icon-flag').remove();

        //    if ($that.val() !== $this.val() && $this.parent().find('.icon-flag').length == 0)
        //        $this.parent().prepend($(iconFlag));

        //    //if (txt == $this.val() && $this.parent().find('.icon-flag').length > 0)
        //    //    $this.parent().find('.icon-flag').remove();

        //    var tagName = $that.get(0).tagName;


        //    if ($that.is('input')) {

        //        $that.keyup(function (e) {
        //            var old = $('#OLD_' + $(this).attr('id'));
        //            old.parent().find('.icon-flag').remove();

        //            if ($(this).val() !== old.val().replace(/[\r\n]/g, "") && old.parent().find('.icon-flag').length == 0) {
        //                var formfiledName = $that.attr('id');
        //                old.parent().prepend($(iconFlag));
        //            }
        //        });
        //    }


        //    if ($that.is('select')) {
        //        $that.change(function (e) {

        //            var old = $('#OLD_' + $(this).attr('id'));
        //            var txt = $that.find('option:selected').text();
        //            old.parent().find('.icon-flag').remove();


        //            if (txt == old.val().replace(/[\r\n]/g, "") && old.parent().find('.icon-flag').length > 0) {
        //                old.parent().find('.icon-flag').remove();
        //            }

        //            if (txt !== old.val().replace(/[\r\n]/g, "") && old.parent().find('.icon-flag').length == 0) {
        //                var formfiledName = $that.attr('id');
        //                old.parent().prepend($(iconFlag));
        //            }

        //            if ($(this).val() !== " ") {
        //                if ($(this).val() !== old.val().replace(/[\r\n]/g, "") && old.parent().find('.icon-flag').length == 0) {
        //                    var formfiledName = $that.attr('id');
        //                    old.parent().prepend($(iconFlag));
        //                }
        //            }
        //        });
        //    }
        //});


        validate.run($('#actionState').val());

        $(document).on('change', '#actionState', function (e) {
            var val = $(this).val();
            validate.run(val);
        });
    </script>

    @Html.Partial("_Validate", Model)
}
@using(Html.BeginForm("new", "ChangeTermsConditions", FormMethod.Post, new { area = "Netherlands", novalidate = "novalidate", id = "NewForm" }))
{
    @*<input type="hidden" id="MyInput" value="@Model.GetEventsByJson()" />
    <input type="hidden" name="FirstEventName" id="FirstEventName" value="@firstEventVal" />
    <input type="hidden" name="LastValidation" id="LastValidation" value="" />
    <input type="hidden" name="LockedFields" id="LockedFields" value="@lockedFields" />
    <input type="hidden" name="HasEvent" id="HasEvent" value="@PublicHasEvent" />
    <input type="hidden" name="AppliedEventName" id="AppliedEventName" value="@appliedEventName" />
    <input type="hidden" name="CanApplyRule" id="CanApplyRule" value="@canApplyRule" />*@
    
    <span style="display: none;" id="narrowDownInit" url="@url"></span>
    @Html.Partial("_GlobalNavRev", Model)
    <div class="container containeralignright">
        @Html.Partial("_CurrentUser")
        @Html.Partial("_ErrorMessage", Model)
        <ul class="nav nav-tabs">
            @if(Model.VisibleTab("#ServiceRequestDetails"))
            {
                <li class="active @(Model.TabHasError("#ServiceRequestDetails") ? "error" : "")">
                    <a href="#ServiceRequestDetails">@Model.Translate("Service Request Details")</a></li>
            }
            @if(Model.VisibleTab("#OrganisationalAssignment"))
            {
                <li class="@(Model.TabHasError("#OrganisationalAssignment") ? "error" : "")">
                    <a href="#OrganisationalAssignment">@Model.Translate("Organisational Assignment")</a></li>
            }
            @if(Model.VisibleTab("#Payment"))
            {
                <li class="@(Model.TabHasError("#Payment") ? "error" : "")">
                    <a href="#Payment">@Model.Translate("Payment Information")</a></li>
            }
            @if(Model.VisibleTab("#attachments"))
            {
                <li class="pull-right">
                    <a href="#attachments"><i class="icon-file icon-white"></i>&nbsp;@Model.Translate("Attachments")&nbsp;(<b id="attachmentCounter">0</b>)</a>
                </li>
            }
        </ul>
        <div class="content">
            <div class="row-fluid">
                <div class="tab-content">
                    @if(Model.VisibleTab("#ServiceRequestDetails"))
                    {
                        @Html.Partial("_TabServiceRequestDetails", Model)
                    }
                    @if(Model.VisibleTab("#OrganisationalAssignment"))
                    {
                        @Html.Partial("_TabOrganisationalAssignment", Model)
                    }
                    @if(Model.VisibleTab("#Payment"))
                    {
                        @Html.Partial("_TabPayment", Model)
                    }
                    @if(Model.VisibleTab("#attachments"))
                    {
                        @Html.Partial("_GlobalAttachments", Model)
                    }
                </div>
            </div>
        </div>
    </div>
    <input type="hidden" id="activeTab" name="activeTab" value="@Model.ActiveTab" />    
}

<script>
    //InitIntegration();
    //changeNewCompany();
       
</script>

@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

<div class="tab-pane" id="OrganisationalAssignment">
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Organisation")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("OrganisationCountry")</td>
                    <td>@Model.Element("OrganisationCountry")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("Company")</td>
                    <td>@Model.Element("Company")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BusinessUnit")</td>
                    <td>@Model.Element("BusinessUnit")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ServiceArea")</td>
                    <td>@Model.Element("ServiceArea")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("Department")</td>
                    <td>@Model.Element("Department")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("HomeCostCentre")</td>
                    <td>@Model.Element("HomeCostCentre")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CostAllocation")</td>
                    <td>@Model.Element("CostAllocation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CrossChargeCostCentre")</td>
                    <td>@Model.Element("CrossChargeCostCentre")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Job")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("JobTitle")</td>
                    <td>@Model.Element("JobTitle")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LocalJobTitle")</td>
                    <td>@Model.Element("LocalJobTitle")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewPosition")</td>
                    <td>@Model.Element("NewPosition")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ReportsToLineManager")</td>
                    <td>@Model.Element("ReportsToLineManager")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AcknowledgedManagerInCLA")</td>
                    <td>@Model.Element("AcknowledgedManagerInCLA")</td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Employment Conditions")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("EmploymentCategory")</td>
                    <td>@Model.Element("EmploymentCategory")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractEndDate")</td>
                    <td>@Model.Element("ContractEndDate")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractedHours")</td>
                    <td>@Model.Element("ContractedHours")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractType")</td>
                    <td>@Model.Element("ContractType")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ProbationPeriod")</td>
                    <td>@Model.Element("ProbationPeriod")</td>
                </tr>
                <tr>
                    <td id="probationDate" class="tdstrong">@Model.Label("ProbationEndDate")</td>
                    <td>@Model.Element("ProbationEndDate")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("CDS")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PrimarySite")</td>
                    <td>@Model.Element("PrimarySite")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TECApprover")</td>
                    <td>@Model.Element("TECApprover")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("HelpDesk")</td>
                    <td>@Model.Element("HelpDesk")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Apprentice education")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NameOfSchool")</td>
                    <td>@Model.Element("NameOfSchool")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NameOfEducation")</td>
                    <td>@Model.Element("NameOfEducation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CityEducationSchool")</td>
                    <td>@Model.Element("CityEducationSchool")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LevelOfEducation")</td>
                    <td>@Model.Element("LevelOfEducation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("MentorAtIKEA")</td>
                    <td>@Model.Element("MentorAtIKEA")</td>
                </tr>
            </tbody>
        </table>
    </div>

</div>

<script>
    //Sets the variable depending on the usergroup also -- AC.
    var lockedbyUserGroup = document.getElementById('LockedByUserGroup').getAttribute('status');

    if ("@Model.ReadOnlyTab("#OrganisationalAssignment")" == 'False' && lockedbyUserGroup == 'False') {
        $(function () {

            function setEmployeeBehavior(value) {
                if (value == 'Permanent') {
                    $('#date_ContractEndDate').datepicker("destroy");
                    $('#date_ContractEndDate').addClass("disabled");
                    $('#ContractEndDate').prop('disabled', true);
                    $('#ContractEndDate').val("");
                }
                else {
                    $('#date_ContractEndDate').datepicker();
                    $('#ContractEndDate').prop('disabled', false);
                    $("#ContractEndDate").removeClass("disabled");
                }
            }

            if ($('#EmploymentCategory').val() == 'Permanent') {
                $('#date_ContractEndDate').datepicker("destroy");
                $('#date_ContractEndDate').addClass("disabled");
                $('#ContractEndDate').prop('disabled', true);
                $('#ContractEndDate').val("");
            }


            $('#EmploymentCategory').change(function () {
                setEmployeeBehavior($(this).val());
            });

        });


        var startDate = $('#ContractStartDate').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dStart = APIGlobal.DateTime.parseDate(startDate, format);
        var forcePicker = new Date(dStart.getFullYear(), dStart.getMonth(), dStart.getDate(), 0, 0, 0, 0);
        $('#date_ContractEndDate').not(".disabled").datepicker(
        {
            onRender: function (ev) {
                return ev.valueOf() < forcePicker.valueOf() ? 'disabled' : '';
            }
        });

        $('#date_ContractStartDate, #date_ContractEndDate').not(".disabled").datepicker().on('changeDate', function (ev) {
            var sStart = $('#ContractStartDate').val();
            var sEnd = $('#ContractEndDate').val();
            var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
            var dStart = APIGlobal.DateTime.parseDate(sStart, format);
            var dEnd = APIGlobal.DateTime.parseDate(sEnd, format);

            var probationPeriod = $('#ProbationPeriod');
            var probationEndDate = $('#ProbationEndDate');

            var probationDate = $('#date_ProbationEndDate').datepicker("destroy");
            var noticeProbationDate = $('#probationDate');


            if (APIGlobal.DateTime.dateInRange(dStart, dEnd, 6)) {

                probationPeriod.val("Yes");
                noticeProbationDate.show();
                probationDate.show();

                var endDate = new Date(dStart.getFullYear(), dStart.getMonth() + 2, dStart.getDate(), 0, 0, 0, 0);
                var visibledaate = APIGlobal.DateTime.formatDate(endDate, format);
                probationEndDate.val(visibledaate.toString());
            } else {
                probationPeriod.val("No");

                noticeProbationDate.hide();
                probationDate.hide();
                probationEndDate.val("");
            }

        });

        function valueChangedContractEndDate() {

            var contractstartdate = new Date('@Model.GetAnswer("ContractStartDate")');
            var contractenddate = new Date(document.getElementById('ContractEndDate').value);

            var datedifference = contractenddate.getMonth() - contractstartdate.getMonth();

        }

        document.getElementById('ContractEndDate').onchange = valueChangedContractEndDate;


        $('#ContractedHours').change(function () {

            var h = document.getElementById('ContractedHours').value;
            var calc = 0;
            switch (h) {
                case "1":
                    calc = 4.33;
                case "2":
                    calc = 8.67;
                case "3":
                    calc = 13.00;
                case "4":
                    calc = 17.33;
                case "5":
                    calc = 21.67;
                case "6":
                    calc = 26.00;
                case "7":
                    calc = 30.33;
                case "8":
                    calc = 34.67;
                case "9":
                    calc = 39.00;
                case "10":
                    calc = 43.33;
                case "11":
                    calc = 47.67;
                case "12":
                    calc = 52.00;
                case "13":
                    calc = 56.33;
                case "14":
                    calc = 60.67;
                case "15":
                    calc = 65.00;
                case "16":
                    calc = 69.33;
                case "17":
                    calc = 73.67;
                case "18":
                    calc = 78.00;
                case "19":
                    calc = 82.33;
                case "20":
                    calc = 86.67;
                case "21":
                    calc = 91.00;
                case "22":
                    calc = 95.33;
                case "23":
                    calc = 99.67;
                case "24":
                    calc = 104.00;
                case "25":
                    calc = 108.33;
                case "26":
                    calc = 112.67;
                case "27":
                    calc = 117.00;
                case "28":
                    calc = 121.33;
                case "29":
                    calc = 125.67;
                case "30":
                    calc = 130.00;
                case "31":
                    calc = 134.33;
                case "32":
                    calc = 138.67;
                case "33":
                    calc = 143.00;
                case "34":
                    calc = 147.33;
                case "35":
                    calc = 151.67;
                case "36":
                    calc = 156.00;
                case "37":
                    calc = 160.33;
                case "38":
                    calc = 164.67;
                case "39":
                    calc = 169.00;
                case "40":
                    calc = 173.33;
                default:
                    1;
                    break;
            }
            //document.getElementById('BasicPay').value = calc * h;

        });



        $('#Department').change(function () {

            GetXML('Predifened_CostCentre.xml', setCostCentre);

        });

        $('#JobTitle').change(function () {

            GetXML('predefined_jobtitle_localjobtitle_outs.xml', setLocalJobTitle);
            GetXML('predefined_jobtitle_payscale_outs.xml', setPayScale);

        });

        $('#BusinessUnit').change(function () {
            var value = $(this).val();
            if ($('#BusinessUnit')[0].selectize) {
                var selectedText = $('#BusinessUnit')[0].selectize.getItem(value).text();

                if ($('#PrimarySite')[0].selectize) {
                    $('#PrimarySite')[0].selectize.setValue(selectedText);
                }
                else {
                    $('#PrimarySite').val(selectedText);
                }
            }
            else {
                var selectedText = $('#BusinessUnit').find('option:selected').text();
                if ($('#PrimarySite')[0].selectize) {
                    $('#PrimarySite')[0].selectize.setValue(selectedText);
                }
                else {
                    var selectedText = $('#BusinessUnit').find('option:selected').text();
                    $('#PrimarySite').val(selectedText);
                }
            }

            GetXML('predefined_businessunit_linemanager_outs.xml', setLineManager);
        });

        $('#ReportsToLineManager').change(function () {
            var value = $(this).val();
            if ($('#ReportsToLineManager')[0].selectize) {
                var selectedText = $('#ReportsToLineManager')[0].selectize.getItem(value).text();

                if ($('#TECApprover')[0].selectize) {
                    $('#TECApprover')[0].selectize.setValue(selectedText);
                }
                else {
                    $('#TECApprover').val(selectedText);
                }
            }
            else {
                var selectedText = $('#ReportsToLineManager').find('option:selected').text();
                if ($('#TECApprover')[0].selectize) {
                    $('#TECApprover')[0].selectize.setValue(selectedText);
                }
                else {
                    var selectedText = $('#ReportsToLineManager').find('option:selected').text();
                    $('#TECApprover').val(selectedText);
                }
            }
        });

        function GetXML(xmlFile, url) {
            //////////
            //Gets XML File
            //////////

            var path = window.location.protocol + '//';
            path = path + window.location.host + '/';

            path = site.baseUrl + '/FormLibContent/Xmls/Netherlands/Templates/' + xmlFile

            $.ajax({
                type: "GET",
                url: path,
                dataType: "xml",
                success: url,
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(jqXHR.responseText);
                    alert(textStatus);
                    alert(errorThrown);
                }

            });


        }

       


        function setAllowanceUnits5(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType5').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross5').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross5').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross5').value = '';
                    }
                }
            });
        }

        function setAllowanceUnits4(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType4').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross4').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross4').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross4').value = '';
                    }
                }
            });
        }


        function setAllowanceUnits3(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType3').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross3').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross3').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross3').value = '';
                    }
                }
            });
        }


        function setAllowanceUnits2(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType2').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross2').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross2').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross2').value = '';
                    }
                }
            });
        }

        function setAllowanceUnits(xml) {
            var show = ''

            var dep = document.getElementById('AllowancesType').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();

                if (department == dep) {


                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('AllowancesNetGross').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('AllowancesNetGross').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('AllowancesNetGross').value = '';
                    }
                }
            });
        }

        function setPayScale(xml) {
            var show = ''

            var dep = document.getElementById('JobTitle').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();


                if (department == dep) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            document.getElementById('PayScaleLevel').value = show;

                        }
                        else {
                            var res = show.substring(0, n);
                            document.getElementById('PayScaleLevel').value = res;


                        }
                        return;
                    }
                    else {
                        document.getElementById('PayScaleLevel').value = '';
                    }
                }
            });
        }

        function setLineManager(xml) {
            //////////
            //setLineManagerJobTitle:
            //Adds Jobtitles on selected Function
            //////////
            var show = ''
            var dep = '';

            if (document.getElementById('BusinessUnit')) {
                dep = $("#BusinessUnit option:selected").text();
            }
            var selectize_tags;

            selectize_tags = $('#ReportsToLineManager')[0].selectize;
            selectize_tags.clearOptions();

            $(xml).find('dependent').each(function () {
                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department == dep) {

                    if (show != '') {

                        show = ' ,' + show;

                        var optionsarray = show.split(',');
                        optionsarray.unshift('');

                        var items = optionsarray.map(function (x) { return { text: x, value: x }; });
                        selectize_tags.addOption(items);

                        selectize_tags.setValue('');
                        return;
                    }
                }
            });
        }

        function setLocalJobTitle(xml) {
            var show = ''
            //var dep = $("#JobTitle option:selected").text();
            var dep = document.getElementById('JobTitle').value;

            $(xml).find('dependent').each(function () {

                var $book = $(this);
                show = '';

                var department = $book.find('selected').text();

                show = $book.find('show').text();


                if (department == dep) {
                    if (show != '') {
                        var n = show.indexOf(",");
                        if (n == -1) {
                            $('#LocalJobTitle')[0].selectize.setValue(show);
                        }
                        else {
                            var res = show.substring(0, n);
                            $('#LocalJobTitle')[0].selectize.setValue(res);
                        }
                        return;
                    }
                }
            });
        }


        function setCostCentre(xml) {
            var show = ''
            var dep = $("#Department option:selected").text();
            $(xml).find('dependent').each(function () {
                var $book = $(this);
                show = '';
                var department = $book.find('selected').text();
                show = $book.find('show').text();
                if (department == dep) {
                    if (show != '') {
                        var n = show.indexOf(",");
                        if (n == -1) {
                            $('#HomeCostCentre')[0].selectize.setValue(show);
                            //$('#CrossChargeCostCentre')[0].selectize.setValue(show);
                        }
                        else {
                            var res = show.substring(0, n);
                            $('#HomeCostCentre')[0].selectize.setValue(res);
                            //$('#CrossChargeCostCentre')[0].selectize.setValue(res);
                        }
                        return;
                    }
                }
            });
        }


        function ValueChangeContractedHours() {
            if (document.getElementById('ContractedHours').value > '35') {
                document.getElementById('ContractType').selectedIndex = 2;
            }
            else {
                document.getElementById('ContractType').selectedIndex = 1;
            }
        }
        document.getElementById('ContractedHours').onchange = ValueChangeContractedHours;
    }
</script>

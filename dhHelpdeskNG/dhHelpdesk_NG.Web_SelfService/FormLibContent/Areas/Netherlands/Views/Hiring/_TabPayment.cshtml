@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

<div class="tab-pane" id="payment">
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Basic pay")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayrollCategory")</td>
                    <td>
                        @Model.Element("PayrollCategory")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BasicPayAmount")</td>
                    <td>
                        @Model.Element("BasicPayAmount")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayScaleType")</td>
                    <td>
                        @Model.Element("PayScaleType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayScaleLevel")</td>
                    <td>
                        @Model.Element("PayScaleLevel")
                    </td>
                </tr>

                @if (!FormLibUtils.IsSelfService())
                {
                    <tr>
                        <td class="tdstrong">@Model.Label("BasicPay")</td>
                        <td>
                            @Model.Element("BasicPay")
                        </td>
                    </tr>
                }

                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Allowances")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesType")</td>
                    <td>
                        @Model.Element("AllowancesType")
                        <div id="notice_AllowancesType" style="display: none;" class="notice">
                            @Model.Translate("The BHV allowance is calculated according to CLA article 28")
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesPaymentType")</td>
                    <td>
                        @Model.Element("AllowancesPaymentType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesAmountUnits")</td>
                    <td>
                        @Model.Element("AllowancesAmountUnits")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesNetGross")</td>
                    <td>
                        @Model.Element("AllowancesNetGross")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidFrom")</td>
                    <td>
                        @Model.Element("AllowancesValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidTo")</td>
                    <td>
                        @Model.Element("AllowancesValidTo")
                    </td>
                </tr>

                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="allowance@(i.ToString())" id="allowance@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Allowances") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesType" + i.ToString())
                            <div id="notice_AllowancesType@(i.ToString())" style="display: none;" class="notice">
                                @Model.Translate("The BHV allowance is calculated according to CLA article 28")
                            </div>
                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesPaymentType" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesNetGross" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addAllowanceTrr">
                    <td colspan="2">
                        @Model.Element("Allowances")
                        <a id="addAllowance" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Allowance")</a></td>
                </tr>

            </tbody>
        </table>
    </div>
    <div class="span6">
        <table class="table">
            <tbody>
@*                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Deductions")</h4>
                    </td>
                </tr>*@
                @*                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsType")</td>
                    <td>
                        @Model.Element("DeductionsType")
                    </td>
                </tr>*@
                @*                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsPaymentType")</td>
                    <td>
                        @Model.Element("DeductionsPaymentType")
                    </td>
                </tr>*@
                @*                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsAmountUnits")</td>
                    <td>
                        @Model.Element("DeductionsAmountUnits")
                    </td>
                </tr>*@
                @*                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsNetGross")</td>
                    <td>
                        @Model.Element("DeductionsNetGross")
                    </td>
                </tr>*@
                @*                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidFrom")</td>
                    <td>
                        @Model.Element("DeductionsValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidTo")</td>
                    <td>
                        @Model.Element("DeductionsValidTo")
                    </td>
                </tr>*@


                @*<tr class="deduction@(i.ToString())" id="deduction@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Deductions") @i.ToString()</h4>
                        </td>
                    </tr>*@
                @*
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsType" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsPaymentType" + i.ToString())</td>
                    </tr>*@
                @*<tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsAmountUnits" + i.ToString())</td>
                    </tr>*@

                @*
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsNetGross" + i.ToString())</td>
                    </tr>*@
                @*<tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidTo" + i.ToString())</td>
                    </tr>*@

                @*                <tr id="addDeductionTrr">
                    <td colspan="2">
                        @Model.Element("Deductions")
                        <a id="addDeduction" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Deduction")</a></td>
                </tr>*@



                @*                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Bonus Eligibility")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("OneIKEABonusLevel")</td>
                    <td>
                        @Model.Element("OneIKEABonusLevel")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CLAIncrease")</td>
                    <td>
                        @Model.Element("CLAIncrease")
                    </td>
                </tr>*@

                <tr class="globalmobility-first">
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Global Mobility")</h4>
                    </td>
                </tr>
                <tr class="globalmobility-first">
                    <td class="tdstrong">@Model.Label("TaxAssignment")</td>
                    <td>
                        @Model.Element("TaxAssignment")
                    </td>
                </tr>
                <tr class="globalmobility-first">
                    <td class="tdstrong">@Model.Label("SocialInsuranceAssignment")</td>
                    <td>
                        @Model.Element("SocialInsuranceAssignment")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Country Specifics")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TypeOfBenefit")</td>
                    <td>
                        @Model.Element("TypeOfBenefit")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("Category")</td>
                    <td>
                        @Model.Element("Category")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TypeOfCar")</td>
                    <td>
                        @Model.Element("TypeOfCar")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("MonthlyAmount")</td>
                    <td>
                        @Model.Element("MonthlyAmount")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NextRevisionDate")</td>
                    <td>
                        @Model.Element("NextRevisionDate")
                    </td>
                </tr>


                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="benefits@(i.ToString())" id="benefits@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Country Specifics") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("TypeOfBenefit" + i.ToString())</td>
                        <td>
                            @Model.Element("TypeOfBenefit" + i.ToString())</td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("Category" + i.ToString())</td>
                        <td>
                            @Model.Element("Category" + i.ToString())</td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("TypeOfCar" + i.ToString())</td>
                        <td>
                            @Model.Element("TypeOfCar" + i.ToString())</td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("MonthlyAmount" + i.ToString())</td>
                        <td>
                            @Model.Element("MonthlyAmount" + i.ToString())</td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("NextRevisionDate" + i.ToString())</td>
                        <td>
                            @Model.Element("NextRevisionDate" + i.ToString())</td>
                    </tr>
                }
                <tr id="addBenefits">
                    <td colspan="2">
                        @Model.Element("Benefits")
                        <a id="addBenefit" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another benefit")</a></td>
                </tr>
            </tbody>
        </table>
    </div>
    <input type="hidden" id="MultipleEntrySectionsNr" value="@FormLibConstants.FormField.MultipleEntrySectionsNr" />

</div>

<script>
    //Sets the variable depending on the usergroup also -- AC.
    var lockedbyUserGroup = document.getElementById('LockedByUserGroup').getAttribute('status');

    if ("@Model.ReadOnlyTab("#payment")" == 'False' && lockedbyUserGroup == 'False') {
        function setAllowancesValidTo(id, choos) {

            sEnd = $('#ContractEndDate').val();
            var allowancesValidTo = document.getElementById(id);

            var input = $('#' + id);
            if (choos == 'One Time') {
                allowancesValidTo.value = "";
                document.getElementById(id).disabled = true;
                document.getElementById('date_' + id).disabled = true;
            } else {

                document.getElementById(id).disabled = false;
                document.getElementById('date_' + id).disabled = false;

                var employmentCategory = document.getElementById('EmploymentCategory').value;
                if (choos == 'Recurring' && employmentCategory == 'Temporary')
                    if (allowancesValidTo.value == '' || allowancesValidTo.value == '31.12.9999')
                        allowancesValidTo.value = sEnd;
                    else {
                        if (allowancesValidTo == '')
                            allowancesValidTo.value = '31.12.9999';
                    }
            }
        };



        $('#AllowancesPaymentType').change(function () {
            setAllowancesValidTo('AllowancesValidTo', $(this).val());
        });
        setAllowancesValidTo('AllowancesValidTo', $('#AllowancesPaymentType').val());



        $('#AllowancesPaymentType2').change(function () {
            setAllowancesValidTo('AllowancesValidTo2', $(this).val());
        });
        setAllowancesValidTo('AllowancesValidTo2', $('#AllowancesPaymentType2').val());


        $('#AllowancesPaymentType3').change(function () {
            setAllowancesValidTo('AllowancesValidTo3', $(this).val());
        });
        setAllowancesValidTo('AllowancesValidTo3', $('#AllowancesPaymentType3').val());


        $('#AllowancesPaymentType4').change(function () {
            setAllowancesValidTo('AllowancesValidTo4', $(this).val());
        });
        setAllowancesValidTo('AllowancesValidTo4', $('#AllowancesPaymentType4').val());


        $('#AllowancesPaymentType5').change(function () {
            setAllowancesValidTo('AllowancesValidTo5', $(this).val());
        });
        setAllowancesValidTo('AllowancesValidTo5', $('#AllowancesPaymentType5').val());


        //$(function () {
        //function setNewToIKEA(value) {
        //    if (value == 'International Transfer') {
        //        $('.globalmobility').show();
        //    }
        //    else {
        //        $('.globalmobility').hide();
        //    }
        //};

        //$('#NewToIKEA').change(function () {

        //    setNewToIKEA($(this).val());
        //});

        //setNewToIKEA($('#NewToIKEA').val());

        //});

        var employmentCategory = document.getElementById('EmploymentCategory').value;
        var sEnd = document.getElementById('ContractEndDate');


        // Show notice if allowancestype comp.serv.allowance
        function selectIndexChangeAllowancesType() {
            if (this.options[this.selectedIndex].value == 'Comp.Serv.Allowance') {

                document.getElementById('notice_AllowancesType').style.display = "block";
            }
            else {
                document.getElementById('notice_AllowancesType').style.display = "none";
            }
        }
        document.getElementById('AllowancesType').onchange = selectIndexChangeAllowancesType;

        // Show notice if allowancestype comp.serv.allowance
        function selectIndexChangeAllowancesType2() {
            if (this.options[this.selectedIndex].value == 'Comp.Serv.Allowance') {

                document.getElementById('notice_AllowancesType2').style.display = "block";
            }
            else {
                document.getElementById('notice_AllowancesType2').style.display = "none";
            }
        }
        document.getElementById('AllowancesType2').onchange = selectIndexChangeAllowancesType2;

        // Show notice if allowancestype comp.serv.allowance
        function selectIndexChangeAllowancesType3() {
            if (this.options[this.selectedIndex].value == 'Comp.Serv.Allowance') {

                document.getElementById('notice_AllowancesType3').style.display = "block";
            }
            else {
                document.getElementById('notice_AllowancesType3').style.display = "none";
            }
        }
        document.getElementById('AllowancesType3').onchange = selectIndexChangeAllowancesType3;

        // Show notice if allowancestype comp.serv.allowance
        function selectIndexChangeAllowancesType4() {
            if (this.options[this.selectedIndex].value == 'Comp.Serv.Allowance') {

                document.getElementById('notice_AllowancesType4').style.display = "block";
            }
            else {
                document.getElementById('notice_AllowancesType4').style.display = "none";
            }
        }
        document.getElementById('AllowancesType4').onchange = selectIndexChangeAllowancesType4;

        // Show notice if allowancestype comp.serv.allowance
        function selectIndexChangeAllowancesType5() {
            if (this.options[this.selectedIndex].value == 'Comp.Serv.Allowance') {

                document.getElementById('notice_AllowancesType5').style.display = "block";
            }
            else {
                document.getElementById('notice_AllowancesType5').style.display = "none";
            }
        }
        document.getElementById('AllowancesType5').onchange = selectIndexChangeAllowancesType5;


        function setPaymentDatePickersBehavior() {
            var startDate = $('#ContractStartDate').val();
            var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
            var dStart = APIGlobal.DateTime.parseDate(startDate, format);
            var forcePicker = new Date(dStart.getFullYear(), dStart.getMonth(), dStart.getDate(), 0, 0, 0, 0);
            $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5').not(".disabled").datepicker(
            {
                onRender: function (ev) {
                    return ev.valueOf() < forcePicker.valueOf() ? 'disabled' : '';
                },
            });
        }

        setPaymentDatePickersBehavior();

        $('#date_ContractStartDate').on('changeDate', function (ev) {

            $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5').not(".disabled").datepicker('destroy');

            setPaymentDatePickersBehavior();

            $('#AllowancesValidFrom,#AllowancesValidFrom2,#AllowancesValidFrom3,#AllowancesValidFrom4,#AllowancesValidFrom5').val($('#ContractStartDate').val());
        }).data('datepicker');


        $('#ContractStartDate').change(function () {
            $('#AllowancesValidFrom,#AllowancesValidFrom2,#AllowancesValidFrom3,#AllowancesValidFrom4,#AllowancesValidFrom5').val($('#ContractStartDate').val());
        });

        //$('#EmploymentCategory').change(function () {
        //    setdeductionvalidto();
        //});
        //$('#ContractEndDate').change(function () {
        //    setdeductionvalidto();
        //});
        //$('#date_ContractEndDate').on('changeDate', function (ev) {
        //    setdeductionvalidto();
        //});

        //function setdeductionvalidto() {
        //    if ($('#EmploymentCategory').val() == 'Temporary') {
        //        var enddatetoset = $('#ContractEndDate').val();
        //        if (!(enddatetoset == '')) {
        //            $('#DeductionsValidTo').val(enddatetoset);
        //            $('#DeductionsValidTo2').val(enddatetoset);
        //            $('#DeductionsValidTo3').val(enddatetoset);
        //            $('#DeductionsValidTo4').val(enddatetoset);
        //            $('#DeductionsValidTo5').val(enddatetoset);
        //        }
        //    }
        //}



        var nowTemp = new Date();
        var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);

        $('#date_NextRevisionDate').not(".disabled").datepicker(
        {
            onRender: function (ev) {
                return ev.valueOf() <= now.valueOf() ? 'disabled' : '';
            }
        });

        document.getElementById('NextRevisionDate').onkeypress = function () { return true; }

        $('#date_NextRevisionDate2').not(".disabled").datepicker(
        {
            onRender: function (ev) {
                return ev.valueOf() <= now.valueOf() ? 'disabled' : '';
            }
        });

        document.getElementById('NextRevisionDate2').onkeypress = function () { return true; }

        $('#date_NextRevisionDate3').not(".disabled").datepicker(
        {
            onRender: function (ev) {
                return ev.valueOf() <= now.valueOf() ? 'disabled' : '';
            }
        });

        document.getElementById('NextRevisionDate3').onkeypress = function () { return true; }

        $('#date_NextRevisionDate4').not(".disabled").datepicker(
                {
                    onRender: function (ev) {
                        return ev.valueOf() <= now.valueOf() ? 'disabled' : '';
                    }
                });

        document.getElementById('NextRevisionDate4').onkeypress = function () { return true; }

        $('#date_NextRevisionDate5').not(".disabled").datepicker(
                       {
                           onRender: function (ev) {
                               return ev.valueOf() <= now.valueOf() ? 'disabled' : '';
                           }
                       });

        document.getElementById('NextRevisionDate5').onkeypress = function () { return true; }


        $('#AllowancesType').change(function () {

            GetXML('predefined_allowancetype_units_outs.xml', setAllowanceUnits);
        });

        $('#AllowancesType2').change(function () {

            GetXML('predefined_allowancetype_units_outs.xml', setAllowanceUnits2);
        });

        $('#AllowancesType3').change(function () {

            GetXML('predefined_allowancetype_units_outs.xml', setAllowanceUnits3);
        });

        $('#AllowancesType4').change(function () {

            GetXML('predefined_allowancetype_units_outs.xml', setAllowanceUnits4);
        });

        $('#AllowancesType5').change(function () {

            GetXML('predefined_allowancetype_units_outs.xml', setAllowanceUnits5);
        });

        function SelectIndexChangePayScaleLevel() {
            if (document.getElementById('PayScaleLevel').value <= 12) {
                if (document.getElementById('JobTitle').value == 'IKEA FOOD Manager') {
                    document.getElementById('CLAIncrease').selectedIndex = 2;
                }
                else {

                    document.getElementById('CLAIncrease').selectedIndex = 1;
                }
            }
            if (document.getElementById('PayScaleLevel').value >= 13) {
                document.getElementById('CLAIncrease').selectedIndex = 2;
            }

        }
        document.getElementById('PayScaleLevel').onchange = SelectIndexChangePayScaleLevel;


        $(function () {
            function setPayrollCategoryBehavior(value) {
                ////////////
                /// Created: 18-09-2014
                /// AC
                if (document.getElementById('BasicPay')) {
                    if (value == 'Hourly' || value == 'Juvenile Hourly') {
                        document.getElementById('BasicPay').disabled = true;
                        $('#BasicPay').val('');
                        document.getElementById('BasicPayAmount').disabled = false;
                    }
                    else if (value == 'Monthly' || value == 'Juvenile Monthly' || value == 'MT/Dep/SM') {
                        document.getElementById('BasicPay').disabled = false;
                        document.getElementById('BasicPayAmount').disabled = true;
                        $('#BasicPayAmount').val('');
                    }
                    else {
                        document.getElementById('BasicPay').disabled = false;
                        document.getElementById('BasicPayAmount').disabled = false;
                    }
                }
            }
            setPayrollCategoryBehavior($('#PayrollCategory').val());
            $('#PayrollCategory').change(function () {
                setPayrollCategoryBehavior($(this).val());
            });

        });




    }
</script>

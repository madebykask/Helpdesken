@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
@using ECT.FormLib.Pdfs;
@using ECT.Model.Entities;

@{
    Layout = null;
    Model.Language = "nl";
}
<!DOCTYPE html>
<html>

<body>
    <div>

        <p class="Normal" style="text-align: left; font-family: Verdana; font-size: 11px; padding-top: 30px;">
            <strong>ARBEIDSOVEREENKOMST</strong><br />
            <br />
            Tussen IKEA B.V., hierna te noemen de werkgever, en<br />
            <br />
        </p>
        <table style="font-family: Verdana; font-size: 11px; width: 100%;" border="0">
                <tr>
                    <td width="30%" style="text-align: left;">Voorletters</td>
                    <td width="70%" style="text-align: left;">: @Model.GetDocumentAnswer("Initials",true)</td>
                </tr>
            <tr>
                <td style="text-align: left;">Roepnaam</td>
                <td style="text-align: left;">: @Model.GetDocumentAnswer("FirstName",true)</td>
            </tr>
            <tr>
                <td style="text-align: left;">Achternaam</td>
                <td style="text-align: left;">: @Model.GetDocumentAnswer("Prefixes") @Model.GetDocumentAnswer("LastName",true)</td>
            </tr>
            <tr>
                <td style="text-align: left;">Adres</td>
                <td style="text-align: left;">: @Model.GetDocumentAnswer("PermanentAddressLine1",true) @Model.GetDocumentAnswer("PermanentAddressLine2") @Model.GetDocumentAnswer("PermanentAddressLine3")</td>
            </tr>
            <tr>
                <td style="text-align: left;">Postcode /  woonplaats</td>
                <td style="text-align: left;">: @Model.GetDocumentAnswer("PermanentPostalCode",true) @Model.GetDocumentAnswer("PermanentCity",true)</td>
            </tr>
            <tr>
                <td style="text-align: left;">Geboortedatum</td>
                <td style="text-align: left;">: @Model.GetDocumentAnswer("DateOfBirth",true)</td>
            </tr>

        </table>

        <p style="text-align: left; font-family: Verdana; font-size: 11px;">
            <br />
            Hierna te noemen werknemer, wordt een arbeidsovereenkomst afgesloten waarvan de voorwaarden als volgt luiden:<br />
            <br />
        </p>



        @{
            var list = new List<PdfListItem>();
            var pdfList = new List<PdfListItem>();


            var brText = "<br /><br />";


            //1
            string text1 = "Met ingang van {0} treedt de werknemer bij de werkgever in dienst.";
            list.Add(new PdfListItem { Text = string.Format(text1, Model.GetDocumentAnswer("ContractStartDate", true)) });

            //2
            string text2 = "De werknemer wordt aangesteld in de functie van {0} op het Service Office. Deze functie is ingedeeld in functiegroep {1}.";
            list.Add(new PdfListItem { Text = string.Format(text2, Model.GetDocumentAnswer("LocalJobTitle", true), Model.GetDocumentAnswer("PayScaleLevel", true)) });

            //3
            if (Model.GetDocumentAnswer("EmploymentCategory").ToLower() == "Permanent".ToLower())
            {
                string text3 = "Deze arbeidsovereenkomst wordt afgesloten voor onbepaalde tijd.";
                list.Add(new PdfListItem { Text = text3 });
            }

            if (Model.GetDocumentAnswer("EmploymentCategory").ToLower() == "Temporary".ToLower())
            {
               
                string text3 = "Deze arbeidsovereenkomst wordt afgesloten voor bepaalde tijd. Looptijd van het contract is van {0} tot en met {1} en eindigt derhalve van rechtswege aan het einde van de overeengekomen periode, zonder dat hiervoor enige opzegging is vereist.";
                list.Add(new PdfListItem { Text = string.Format(text3, Model.GetDocumentAnswer("ContractStartDate", true), Model.GetDocumentAnswer("ContractEndDate", true)) });
            }

            //4
            string text4 = "Partijen zijn gerechtigd om de arbeidsovereenkomst tussentijds tegen het einde van de kalendermaand op te zeggen met inachtneming van de wettelijke opzegtermijn.";
            list.Add(new PdfListItem { Text = text4 });

            //5
            string text5 = "Het dienstverband tussen werkgever en werknemer eindigt in ieder geval van rechtswege bij het bereiken van de pensioengerechtigde leeftijd door werknemer.";
            list.Add(new PdfListItem { Text = text5 });


            //6
            if (Model.GetDocumentAnswer("ProbationPeriod").ToLower() == "Yes".ToLower())
            {
                string text6 = "De eerste twee maanden van het dienstverband gelden als proeftijd. Tijdens de proeftijd hebben beide partijen het recht om het dienstverband met onmiddellijke ingang op te zeggen en te beëindigen.";
                list.Add(new PdfListItem { Text = text6 });
            }

            //7
            string text7 = "Het betreft een {0} dienstverband. Het gemiddeld te werken uren per week bedraagt {1} uur. De werknemer behoort tot de categorie {2}.";
            list.Add(new PdfListItem { Text = string.Format(text7, Model.GetDocumentTranslatedAnswer("ContractType", true), Model.GetDocumentAnswer("ContractedHours", true), NetherlandsPdfPage.GetPayRollCategoryText(Model.GetDocumentAnswer("PayrollCategory", true), Model)) });


            //8
            if (Model.GetDocumentAnswer("ContractType").ToLower() == "Full Time".ToLower())
            {
                //set mandatory for contract
                Model.SetDocumentMandatoryField("BasicPay");
                       
                string text8 = "Het salaris bedraagt &euro;  {0} bruto per maand. {1} De salarisbetalingen vinden telkens aan het einde van de kalendermaand plaats.";
                list.Add(new PdfListItem { Text = string.Format(text8, Model.GetDocumentAnswer("BasicPay"), brText) });
            }

            //8 START
            if (Model.GetDocumentAnswer("ContractType").ToLower() == "Part Time".ToLower())
            {
                //set mandatory for contract
                Model.SetDocumentMandatoryField("BasicPayAmount");
                
                string text8 = "Het salaris bedraagt &euro;  {0} bruto per uur. {1} De salarisbetalingen vinden telkens aan het einde van de kalendermaand plaats.";
                list.Add(new PdfListItem { Text = string.Format(text8, Model.GetDocumentAnswer("BasicPayAmount"), brText) });
            }

            
            //SUBLIST

            //8b

            pdfList = new List<PdfListItem>();

            if (Model.GetDocumentAnswer("Allowances Type").ToLower() == "Travel Allowance per Time".ToLower())
            {

                string text8b = "De tegemoetkorning inde reiskosten wordt berekend conform de geldende IKEA CAO, artikel 29.";
                list.Add(new PdfListItem { Text = text8 });
            }

            if (Model.GetDocumentAnswer("TypeOfBenefit").ToLower() == "Company Car".ToLower() | Model.GetDocumentAnswer("TypeOfBenefit2").ToLower() == "Company Car".ToLower() | Model.GetDocumentAnswer("TypeOfBenefit3").ToLower() == "Company Car".ToLower())
            {
                string text8c =  "Werknemer heeft recht op gebruik van een lease-auto categorie {0}. {1}";

                //Need to do this check because you can add 3 benefits

                if (Model.GetDocumentAnswer("TypeOfBenefit").ToLower() == "Company Car".ToLower())
                {

                    //set mandatory for contract
                    Model.SetDocumentMandatoryField("TypeOfCar");
                    Model.SetDocumentMandatoryField("Category");

                    string TypeOfCar = Model.GetDocumentTranslatedAnswer("TypeOfCar");
                    pdfList.Add(new PdfListItem { Text = string.Format(list.Count.ToString() + NetherlandsPdfPage.GetLetter(pdfList.Count) + text8c, Model.GetDocumentAnswer("Category"), NetherlandsPdfPage.FirstLetterToUpperCase(TypeOfCar)) });
                }

                if (Model.GetDocumentAnswer("TypeOfBenefit2").ToLower() == "Company Car".ToLower())
                {
                    //set mandatory for contract
                    Model.SetDocumentMandatoryField("TypeOfCar2");
                    Model.SetDocumentMandatoryField("Category2");

                    string TypeOfCar2 = Model.GetDocumentTranslatedAnswer("TypeOfCar2");
                    pdfList.Add(new PdfListItem { Text = string.Format(list.Count.ToString() + NetherlandsPdfPage.GetLetter(pdfList.Count) + text8c, Model.GetDocumentAnswer("Category2"), NetherlandsPdfPage.FirstLetterToUpperCase(TypeOfCar2)) });
                }


                if (Model.GetDocumentAnswer("TypeOfBenefit3").ToLower() == "Company Car".ToLower())
                {

                    //set mandatory for contract
                    Model.SetDocumentMandatoryField("TypeOfCar3");
                    Model.SetDocumentMandatoryField("Category3");

                    string TypeOfCar3 = Model.GetDocumentTranslatedAnswer("TypeOfCar3");
                    pdfList.Add(new PdfListItem { Text = string.Format(list.Count.ToString() + NetherlandsPdfPage.GetLetter(pdfList.Count) + text8c, Model.GetDocumentAnswer("Category3"), NetherlandsPdfPage.FirstLetterToUpperCase(TypeOfCar3)) });
                }

            }
            else
            {
                string text8c = list.Count.ToString() + NetherlandsPdfPage.GetLetter(pdfList.Count) + "De tegemoetkoming in de reiskosten wordt berekend conform de geldende IKEA CAO, artikel 29.";
                pdfList.Add(new PdfListItem { Text = text8c });
            }

            //8d 
            if (Model.GetDocumentAnswer("PayrollCategory").ToLower() == "MT/Dep/SM".ToLower() && (Model.GetDocumentAnswer("PayScaleLevel") == "9" || Model.GetDocumentAnswer("PayScaleLevel") == "10" || Model.GetDocumentAnswer("PayScaleLevel") == "11" || Model.GetDocumentAnswer("PayScaleLevel") == "12"))
            {
                string text8d = list.Count.ToString() + NetherlandsPdfPage.GetLetter(pdfList.Count) + "Als tegemoetkoming in kosten voor representatie en telefoongebruik  ontvang je een algemene onkostenvergoeding van EUR 50,- bruto per maand. Dit is conform CAO artikel 28A.";
                pdfList.Add(new PdfListItem { Text = text8d });
            }

            //8e
            if (Model.GetDocumentAnswer("TypeOfBenefit").ToLower() == "Salary Revision".ToLower() | Model.GetDocumentAnswer("TypeOfBenefit2").ToLower() == "Salary Revision".ToLower() | Model.GetDocumentAnswer("TypeOfBenefit3").ToLower() == "Salary Revision".ToLower())
            {
                //Need to do this check because you can add 3 benefits

                string text8e =  "Eerste salarisrevisie: {0}.";

                if (Model.GetDocumentAnswer("TypeOfBenefit").ToLower() == "Salary Revision".ToLower())
                {
                    //set mandatory for contract
                    Model.SetDocumentMandatoryField("NextRevisionDate");

                    pdfList.Add(new PdfListItem { Text = string.Format(list.Count.ToString() + NetherlandsPdfPage.GetLetter(pdfList.Count) + text8e, Model.GetDocumentAnswer("NextRevisionDate")) });
                                        
                }

                if (Model.GetDocumentAnswer("TypeOfBenefit2").ToLower() == "Salary Revision".ToLower())
                {
                    //set mandatory for contract
                    Model.SetDocumentMandatoryField("NextRevisionDate2");

                    pdfList.Add(new PdfListItem { Text = string.Format(list.Count.ToString() + NetherlandsPdfPage.GetLetter(pdfList.Count) + text8e, Model.GetDocumentAnswer("NextRevisionDate2")) });

                }

                if (Model.GetDocumentAnswer("TypeOfBenefit3").ToLower() == "Salary Revision".ToLower())
                {

                    //set mandatory for contract
                    Model.SetDocumentMandatoryField("NextRevisionDate3");
                    
                    pdfList.Add(new PdfListItem { Text = string.Format(list.Count.ToString() + NetherlandsPdfPage.GetLetter(pdfList.Count) + text8e, Model.GetDocumentAnswer("NextRevisionDate3")) });

                }

            }


            //lägg till i sublist (vet att b alltid kommer läggas till så behöver inte kolla null
            list[list.Count - 1].SubList = pdfList;

            //SUBLIST END

            //8 END

            //9
            string text9 = "Op deze arbeidsovereenkomst is het pensioenreglement van toepassing als bedoeld in artikel 10 van de IKEA CAO.";
            list.Add(new PdfListItem { Text = text9 });


            //10
            if (Model.GetDocumentAnswer("DocumentType") == "Work permit")
            {
                string text10 = "Op deze arbeidsovereenkomst zijn de van tijd tot tijd geldende IKEA CAO, de IKEA Group Code of Contact en de regels die zijn opgenomen in Mijn IKEA van toepassing. De IKEA CAO en de IKEA Group Code of Contact zijn te raadplegen op en downloaden via de internetsite www.ico-worker.com/nl. De inloggegevens voor deze site vind je in de bijgesloten brief. Op verzoek van de werknemer stuurt IKEA een digitale versie per e-mail of een geprinte versie per gewone post toe van de toepasselijke regels. Het boekje Mijn IKEA ontvang je tegelijk met deze arbeidsovereenkomst.";
                list.Add(new PdfListItem { Text = text10 });
            }

            //11 START
            string text11 = "Op deze arbeidsovereenkomst zijn de van tijd tot tijd geldende IKEA CAO, de IKEA Group Code of Contact en de regels die zijn opgenomen in Mijn IKEA van toepassing. De IKEA CAO en de IKEA Group Code of Contact zijn te raadplegen op en downloaden via de internetsite <a href=\"http://www.ico-worker.com/nl\" target=\"_blank\" title=\"http://www.ico-worker.com/nl\" style=\"text-decoration: underline; color: blue;\">www.ico-worker.com/nl</a>. De inloggegevens voor deze site vind je in de bijgesloten brief. Op verzoek van de werknemer stuurt IKEA een digitale versie per e-mail of een geprinte versie per gewone post toe van de toepasselijke regels. Het boekje Mijn IKEA ontvang je tegelijk met deze arbeidsovereenkomst.";


            if ((Model.GetDocumentAnswer("PayScaleType").ToLower() == "IKEA NL CAO".ToLower() | Model.GetDocumentAnswer("PayScaleType").ToLower() == "IKEA NL geen CAO - out of scope".ToLower()) && ((Model.GetDocumentAnswer("PayScaleLevel") == "14" || Model.GetDocumentAnswer("PayScaleLevel") == "15")))
            {
                text11 += brText + "Hoewel de IKEA CAO niet op deze arbeidsovereenkomst van toepassing is, worden de artikelen met de volgende onderwerpen uit de laatst overeengekomen IKEA CAO door ondertekening van deze arbeidsovereenkomst op de arbeidsovereenkomst van toepassing en worden die geacht daarvan onderdeel uit te maken, ook als de looptijd van deze CAO is verstreken en nog geen nieuwe CAO tot stand is gekomen:";
                text11 += brText + "- Ontwikkel- en beoordelingscyclus (II, artikel 4)";
                text11 += "<br />- Beloningssysteem (II, artikel 5)";
                text11 += "<br />- Personeelskorting (II, artikel 9)";
                text11 += "<br />- Pensioen (II artikel 10)";
                text11 += "<br />- Vergoedingen incidentele dienstreizen binnen- en buitenland (II, artikel 30)";
                text11 += "<br />- Algemeen (wettelijk) verlof (VI, artikel 41)";
                text11 += "<br />- Bijzonder verlof met behoud van salaris (VI, artikel 42)";
                text11 += "<br />- Gezondheidsbeleid (VII, artikel 45 t/m 52)";
                text11 += "<br />- Verzekeringen (VIII artikel 55 t/m 59).";

                text11 += brText + "De tussen haakjes vermelde artikelen verwijzen naar de desbetreffende bepalingen van de IKEA CAO zoals deze luidde ten tijde van het aangaan van de arbeidsovereenkomst. Indien een of meer van de bovengenoemde bepalingen of de nummering ervan in een latere IKEA CAO wijzigen, treden deze gewijzigde bepalingen in de plaats van die bepalingen.";

            }

            list.Add(new PdfListItem { Text = text11 });

            //11
            int PayScaleLevel = 0;
            
            if (Model.GetDocumentAnswer("PayScaleLevel").Length > 0 && Model.GetDocumentAnswer("PayScaleLevel").ToLower() != "N/A".ToLower())
            {
                 try
                {

                    PayScaleLevel = int.Parse(Model.GetDocumentAnswer("PayScaleLevel", true));
               }
                catch (Exception)
                {
                }                     

                if (PayScaleLevel >= 14)
                {
                    string text12 = "Werknemer gaat akkoord met een mogelijk volgende loopbaanstap welke uitzending naar het buitenland zou kunnen betekenen. Plaatsing geschiedt in overleg met werknemer.";
                    list.Add(new PdfListItem { Text = text12 });
                }
                
            }
         

           
        }

        @if (list.Count > 1)
        {
            for (int i = 0; i < list.Count; i++)
            { 
            <br />                                        
            <p style="text-align: left; font-family: Verdana; font-size: 11px; padding-left: 20px; padding-right: 50px;">@(i + 1). @Html.Raw(list[i].Text)</p>
                if (list[i].SubList != null && list[i].SubList.Count > 0)
                {
                    foreach (var item in list[i].SubList)
                    {
            <br />
            <p style="text-align: left; font-family: Verdana; font-size: 11px; padding-left: 20px; padding-right: 50px;">@item.Text </p>
                    }
                }
            }
        }
        else
        {
            for (int i = 0; i == list.Count - 1; i++)
            {
            <p style="font-family: Verdana; font-size: 11px;">@Html.Raw(list[i])</p>
            }
        }

        @*  <p style="text-align: left; font-family: Verdana; font-size: 11px;">
            <br />
            <br />
           De werknemer verklaart hiermee voorafgaande aan ondertekening van de arbeidsovereenkomst kennis te hebben genomen van de IKEA CAO, de IKEA Group Code of Conduct en de regels in Mijn IKEA en verder met het bovenstaande akkoord te gaan.<br />
            <br />
            <br />
        </p>*@
        <endpage />

    </div>
</body>
</html>

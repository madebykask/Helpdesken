@model DH.Helpdesk.EForm.FormLib.Models.FormModel
@using DH.Helpdesk.EForm.FormLib;
@using DH.Helpdesk.EForm.FormLib.Models;

@{
    var baseUrl = Url.CurrentController();
    var freezeAction = "";
    var freeze = "";
    bool lockedByUserGroup = false;

    if (!FormLibUtils.IsSelfService())
    {
        if (Model.Contract.Id > 0)
        {
            if (DH.Helpdesk.EForm.FormLib.FormLibSessions.User.WorkingGroups != null
                && DH.Helpdesk.EForm.FormLib.FormLibSessions.User.WorkingGroups.FirstOrDefault(x => x.Id == Model.Contract.WorkingGroupId) == null)
            {
                Model.IsLooked = true;
                lockedByUserGroup = true;
            }
        }
    }
    else
    {
        if (Model.Contract.StateSecondaryId > 10)
        {
            Model.IsLooked = true;
        }
    }

    if (Model.IsLooked || Model.Contract.StateSecondaryId > 59 /* over 59 then the case is closed or cancelled */)
    {
        freezeAction = "disabled";
        freeze = "disabled";
    }

    int caseId = Model.Contract != null ? Model.Contract.Id : 0;
    var rootUrl = Url.CurrentRoot();
    var areaUrl = Url.CurrentArea();
}

@functions{
    
    public bool ShowStatusBar()
    {
        if (
          (FormLibUtils.IsSelfService() && !string.IsNullOrEmpty(Model.Contract.AlternativeStateSecondaryName)) | (!FormLibUtils.IsSelfService() && !string.IsNullOrEmpty(Model.Contract.StateSecondary)) | (Model.Contract.ParentCaseNumber != 0) | (Model.Contract.ChildCaseNumbers != null) | (!string.IsNullOrEmpty(Model.Contract.FirstName) | !string.IsNullOrEmpty(Model.Contract.FirstName) | !string.IsNullOrEmpty(Model.Contract.EmployeeNumber)))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

}

<span style="display: none;" id="ajaxInfo" customerId="@Model.Form.CustomerId" url="@baseUrl" rootUrl="@rootUrl" areaUrl="@areaUrl" formGuid="@Model.Form.FormGuid" caseId="@caseId"></span>
<span style="display: none;" id="LockedByUserGroup" status="@lockedByUserGroup.ToString()"></span>
<div class="navbar navbar-inverse navbar-fixed-top">
    @*Add by Tan /Case: 51017*@
    <style>
     @*Define top margin depending on if StatusBar is visible or not*@
      @if (FormLibUtils.IsSelfService())
      {
           if (ShowStatusBar()){<text> .containeralignright {margin-top: 35px;}</text>}  else  { <text> .containeralignright {margin-top: 15px;}</text> }
      }
    else
      {
          if (ShowStatusBar()){<text> .containeralignright {margin-top: 88px;}</text>}  else  { <text> .containeralignright {margin-top: 60px;}</text> }
      }
    </style>
     <div class="navbarbgcolorblue">
            <ul class="nav">
                @if (Model.Form != null)
                {<li class="pull-left">@Model.Translate(Model.Form.FormName)</li>}
                <li class="pull-right">@DH.Helpdesk.EForm.FormLib.FormLibSessions.User.FullName</li>
                <li style="float:right;"><i class="icon icon-user"></i>&nbsp;</li>
            </ul>
    </div>
    <div class="clearfix"></div>
    @*don't show statusbar if we dont have any values*@
    @if (ShowStatusBar())
    {
        <div class="statusbar">
            <ul class="nav nav-pills" role="tablist">
                <li role="presentation">@if (FormLibUtils.IsSelfService() && !string.IsNullOrEmpty(Model.Contract.AlternativeStateSecondaryName))
                                        {<text><strong>@Model.Translate("Status")</strong>: </text>@Model.Translate(Model.Contract.AlternativeStateSecondaryName)}
                                        else if (!string.IsNullOrEmpty(Model.Contract.StateSecondary))
                                        {
                                            <text><strong>@Model.Translate("Status")</strong>: </text>@Model.Translate(Model.Contract.StateSecondary)
                                        }</li>

                @if (Model.Contract.ParentCaseNumber != 0)
                {
                    <li>&nbsp;|&nbsp;<strong>@Model.Translate("Parent case number")</strong>: @Model.Contract.ParentCaseNumber</li>
                }
                @if (Model.Contract.ChildCaseNumbers != null)
                {
                    if (Model.Contract.ChildCaseNumbers.FirstOrDefault() != null && Model.Contract.ChildCaseNumbers.FirstOrDefault() != 0)
                    {
                    <li>&nbsp;|&nbsp;<strong>@Model.Translate("Child case number")</strong>: @Model.Contract.ChildCaseNumbers.FirstOrDefault()</li>
                    }
                }
                @if (Model.Contract != null)
                {
                    if (!string.IsNullOrEmpty(Model.Contract.FirstName) | !string.IsNullOrEmpty(Model.Contract.FirstName))
                    {
                    <li class="employeename pull-right" role="presentation"><strong>@Model.Translate("Co-Worker name"):</strong> @Model.Contract.FirstName @Model.Contract.Surname</li>
                    }

                    if (!string.IsNullOrEmpty(Model.Contract.EmployeeNumber))
                    {
                    <li class="employeenumber pull-right" role="presentation"><strong>@Model.Translate("Co-Worker ID"):</strong> @Model.Contract.EmployeeNumber

                        @if (!string.IsNullOrEmpty(Model.Contract.FirstName) | !string.IsNullOrEmpty(Model.Contract.FirstName))
                        {
                            <text>&nbsp;|&nbsp;</text>
                        }

                    </li>
                    }
                }

            </ul>

        </div>
        <div class="clearfix"></div>
    }
          
@*  End Add by Tan /Case: 51017*@
    <div class="navbar-inner navbarbgcolor">
        <div class="nav-collapse collapse">
            <ul class="nav" id="navigation">
                <li>
                    <button id="btnGlobalSave" type="submit" class="btn btnmarginleft" @freeze>
                        @Model.Translate("Save")
                    </button>
                </li>
                <li style="width: 400px;">
                    <div class="input-append input-append-top margintopleft" style="margin-left: 20px !important;">
                        <select name="actionState" id="actionState" class="ieselect" @freezeAction>
                            <option value="">-- @Model.Translate("Select action") --</option>
                            @foreach (var pair in Model.GetStatusActions())
                            {
                                <option @((pair.Key == Model.ActiveStatus ? "selected" : "")) value="@pair.Key">@Model.Translate(pair.Value)</option>
                            }
                        </select>
                        <button class="btn" name="actionStateChange" id="actionStateChange" type="button" @freezeAction>@Model.Translate("Go") <i class="icon-chevron-right"></i></button>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</div>
@using DH.Helpdesk.BusinessData.OldComponents
@using DH.Helpdesk.Common.Extensions.Integer
@using DH.Helpdesk.NewSelfService.Infrastructure
@model DH.Helpdesk.NewSelfService.Models.Case.NewCaseModel

@Html.Partial("_Plupload")
<script type="text/javascript">

    function refreshFilesTable(files) {
        $('#files_table > tbody > tr').remove();

        var fileMarkup =
            $('<tr>' +
                '<td> &nbsp; <td>' +
                '<tr>');
        $('#files_table > tbody').append(fileMarkup);

        for (var i = 0; i < files.length; i++) {
            var file = files[i];

            fileMarkup =
                $('<tr>' +
                    '<td>' +
                    '<a style="color:blue" href="@this.Url.Action("DownloadLogFile")?@(!string.IsNullOrEmpty(this.Model.ExLogFileGuid) ? "id=" + this.Model.ExLogFileGuid + "&" : string.Empty)' + 'fileName=' + file + '"> <i class="icon-file"></i>' + file + '</a>' +
                    '</td>' +
                    '<td>' +
                    '<a id="delete_file_button_' + i + '" class="btn bt-small" title="@Translation.Get("Ta bort", Enums.TranslationSource.TextTranslation)"> <i class="icon-remove"></i> </a>' +
                    '</td>' +
                    '</tr>');

            $('#files_table > tbody').append(fileMarkup);
        }

        bindDeleteFileBehaviorToDeleteButtons();
    }


    function bindDeleteFileBehaviorToDeleteButtons() {
        $('#files_table a[id^="delete_file_button_"]').click(function () {
            var fileName = $(this).parents('tr:first').children('td:first').children('a').text();
            var pressedDeleteFileButton = this;

            $.post('@this.Url.Action("DeleteFile")', { id: '@this.Model.ExLogFileGuid', fileName: fileName }, function() {
                $(pressedDeleteFileButton).parents('tr:first').remove();
            });
        });
    }

    $(function () {        
        window.alreadyExistFileIds = [];
        bindDeleteFileBehaviorToDeleteButtons();

        $('#file_uploader').pluploadQueue(
        {
            url:
                '@this.Url.Action("UploadFile")',
            multipart_params:
            {
                Id:
                    '@this.Model.ExLogFileGuid'
            },
            max_file_size:
                '10mb',

            init:
            {
                FileUploaded:
                    function() {
                        $.
                            get('@this.Url.Action("Files")',
                                {
                                    id:
                                        '@this.Model.ExLogFileGuid'
                                },
                                function(files) {
                                    refreshFilesTable(files);
                                }
                            );
                    },

                UploadComplete:
                    function(up, file) {
                        //plupload_add
                        $
                        (".plupload_buttons").css("display", "inline");
                        $
                        (".plupload_upload_status").css("display", "inline");
                        up.refresh();
                    },

                Error:
                    function(uploader, e) {
                        if (e.status != 409) {
                            return;
                        }

                        window.alreadyExistFileIds.push(e.file.id);
                    },

                StateChanged:
                    function(uploader) {
                        if (uploader.state != plupload.STOPPED) {
                            return;
                        }

                        for (var i = 0; i < window.alreadyExistFileIds.length; i++) {
                            var fileId = window.alreadyExistFileIds[i];
                            $
                            ('#file_uploader ul[class="plupload_filelist"] li[id="' + fileId + '"] div[class="plupload_file_action"] a').prop('title', '@Translation.Get("File already exists.", Enums.TranslationSource.TextTranslation)');
                        }

                        window.alreadyExistFileIds.length = 0;
                        uploader.refresh();
                    }

            }

        });

        $('#NewCasefile_uploader').pluploadQueue({
            url: '@this.Url.Action("NewCaseUploadFile")',
            multipart_params: { Id: '@this.Model.CaseFileKey' },
            max_file_size: '10mb',

            init: {
                FileUploaded: function() {

                    $.get('@this.Url.Action("NewCaseFiles")', { id: '@this.Model.CaseFileKey' }, function(files) {
                        refreshNewCaseFilesTable(files);
                    });
                },

                UploadComplete: function(up, file) {
                    //plupload_add
                    $(".plupload_buttons").css("display", "inline");
                    $(".plupload_upload_status").css("display", "inline");
                    up.refresh();
                },

                Error: function(uploader, e) {
                    if (e.status != 409) {
                        return;
                    }

                    window.alreadyExistFileIds.push(e.file.id);
                },

                StateChanged: function(uploader) {
                    if (uploader.state != plupload.STOPPED) {
                        return;
                    }

                    for (var i = 0; i < window.alreadyExistFileIds.length; i++) {
                        var fileId = window.alreadyExistFileIds[i];
                        $('#NewCasefile_uploader ul[class="plupload_filelist"] li[id="' + fileId + '"] div[class="plupload_file_action"] a').prop('title', '@Translation.Get("File already exists.", Enums.TranslationSource.TextTranslation)');
                    }

                    window.alreadyExistFileIds.length = 0;
                    uploader.refresh();
                }

            }
        });
    });


    $('#NewCase_upload_files_popup').on('hide', function () {
        if ($('#NewCasefile_uploader') != undefined) {
            if ($('#NewCasefile_uploader').pluploadQueue().files.length > 0) {
                if ($('#NewCasefile_uploader').pluploadQueue().state == plupload.UPLOADING)
                    $('#NewCasefile_uploader').pluploadQueue().stop();

                while ($('#NewCasefile_uploader').pluploadQueue().files.length > 0) {
                    $('#NewCasefile_uploader').pluploadQueue().removeFile($('#NewCasefile_uploader').pluploadQueue().files[0]);
                }
                $('#NewCasefile_uploader').pluploadQueue().refresh();
            }
        }
    });


</script>

<div class="container-fluid dh-container">
    <ul class="nav nav-tabs" id="NewCaseTab">
        <li id="NewCaseT" class="active">
            <a href="#fragment-1">New Case </a>
        </li>
    </ul>

    <div class="content">
        <div id="fragment-1" class="tab-pane active">
            <div class="container-fluid dh-container">

                @using (Html.BeginForm("NewCase", "case", null, FormMethod.Post, new { id = "NewCaseForm" }))
                {
                    @Html.HiddenFor(model => model.NewCase.Id)
                    @Html.HiddenFor(model => model.NewCase.CaseGUID)
                    @Html.HiddenFor(model => model.NewCase.Customer_Id)
                    @Html.HiddenFor(model => model.NewCase.User_Id)
                    @Html.HiddenFor(model => model.NewCase.IpAddress)
                    @Html.HiddenFor(model => model.NewCase.Deleted)
                    @Html.HiddenFor(model => model.NewCase.RegistrationSource)   
                    @Html.HiddenFor(model => model.NewCase.RegUserDomain)
                    @Html.HiddenFor(model => model.NewCase.RegUserId)
                    @Html.HiddenFor(model => model.NewCase.CaseNumber)
                    @Html.HiddenFor(model => model.NewCase.ProductAreaSetDate)
                    @Html.HiddenFor(model => model.NewCase.LockCaseToWorkingGroup_Id)
                    @Html.HiddenFor(model => model.NewCase.FinishingDate)
                    @Html.HiddenFor(model => model.NewCase.ProductAreaQuestionVersion_Id)
                    @Html.HiddenFor(model => model.NewCase.LeadTime)
                    @Html.HiddenFor(model => model.NewCase.CaseCleanUp_Id)
                    @Html.HiddenFor(model => model.NewCase.RelatedCaseNumber)
                    @Html.HiddenFor(model => model.NewCase.ApprovedDate)
                    @Html.HiddenFor(model => model.NewCase.ApprovedBy_User_Id)
                    @Html.HiddenFor(model => model.NewCase.ApprovedBy_User_Id)
                    @Html.HiddenFor(model => model.NewCase.FollowUpDate)
                    @Html.HiddenFor(model => model.NewCase.ExternalTime)
                    @Html.HiddenFor(model => model.NewCase.DefaultOwnerWG_Id)
                    @Html.HiddenFor(model => model.CaseMailSetting.SendMailAboutNewCaseTo)
                    @Html.HiddenFor(model => model.CaseMailSetting.HelpdeskMailFromAdress)
                    @Html.HiddenFor(model => model.CaseMailSetting.AbsoluterUrl)
                    @Html.HiddenFor(model => model.CaseMailSetting.DontConnectUserToWorkingGroup)
                    @Html.HiddenFor(l => Model.NewCase.RegLanguage_Id)     
     
                    @Html.HiddenFor(k => Model.CaseFileKey)
        
    
                    if (Model.CaseFieldGroups.Contains("UserInformation"))
                    {
                        <h4>@Translation.Get("Användarinformation", Enums.TranslationSource.TextTranslation)</h4>
                        <div class="row">
                            <div class="col-md-3 dh-col">
                                <div class="container form-horizontal">
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Customer_Id"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Customer_Id").Select(f => f.LabelToChange).SingleOrDefault():                        
                                            </label>
                                            <div class="col-md-10">
                                                @Model.NewCase.Customer.Name
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("ReportedBy"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "ReportedBy").Select(f => f.LabelToChange).SingleOrDefault():                          
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "ReportedBy").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(model => model.NewCase.ReportedBy, new { maxlength = "40", autocomplete = "Off" })
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Persons_Name"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Persons_Name").Select(f => f.LabelToChange).SingleOrDefault():                          
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Persons_Name").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(p => Model.NewCase.PersonsName)
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Persons_EMail"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Persons_EMail").Select(f => f.LabelToChange).SingleOrDefault():                          
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Persons_EMail").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(p => Model.NewCase.PersonsEmail)
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Persons_Phone"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Persons_Phone").Select(f => f.LabelToChange).SingleOrDefault():                          
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Persons_Phone").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(p => Model.NewCase.PersonsPhone)
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Persons_CellPhone"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Persons_CellPhone").Select(f => f.LabelToChange).SingleOrDefault():                          
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Persons_CellPhone").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(c => Model.NewCase.PersonsCellphone)
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Region_Id"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Region_Id").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Region_Id").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                <select id="NewCase_Region_Id" name="NewCase.Region_Id">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Regions != null)
                                                    {
                                                        foreach (var e in Model.Regions.Where(e => e.IsActive == 1))
                                                        {
                                                            <option value="@e.Id">@e.Name</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Department_Id"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Department_Id").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Department_Id").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }

                                                <select id="NewCase_Department_Id" name="NewCase.Department_Id">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Departments != null)
                                                    {
                                                        foreach (var e in Model.Departments.Where(e => e.IsActive == 1))
                                                        {
                                                            <option value="@e.Id">@e.DepartmentName </option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Place"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Place").Select(f => f.LabelToChange).SingleOrDefault():                          
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Place").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(p => Model.NewCase.Place)
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("UserCode"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "UserCode").Select(f => f.LabelToChange).SingleOrDefault():                          
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "UserCode").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(u => Model.NewCase.UserCode)
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }                   
                    <!-- User Information Fields -->

                    if (Model.CaseFieldGroups.Contains("ComputerInformation"))
                    {
                        <h4>@Translation.Get("Datorinformation", Enums.TranslationSource.TextTranslation)</h4>
                        <div class="row">
                            <div class="col-md-3 dh-col">
                                <div class="container form-horizontal">
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("InventoryNumber"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "InventoryNumber").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "InventoryNumber").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(i => Model.NewCase.InventoryNumber)
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("ComputerType_Id"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "ComputerType_Id").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "ComputerType_Id").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(i => Model.NewCase.InventoryType)
                                            </div>
                                        </div>
                                    }
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("InventoryLocation"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "InventoryLocation").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "InventoryLocation").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(i => Model.NewCase.InventoryLocation)
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }                   
                    <!-- Computer Information Fields -->
                    
                    if (Model.CaseFieldGroups.Contains("CaseInfo"))
                    {
                        <h4>@Translation.Get("Ärendeinformation", Enums.TranslationSource.TextTranslation) </h4>
                        <div class="row">
                            <div class="col-md-3 dh-col">
                                <div class="container form-horizontal">
                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("CaseType_Id"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "CaseType_Id").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "CaseType_Id").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                <div id="divCaseType" class="btn-group">
                                                    <div class="btn btn-default" id="divBreadcrumbs_CaseType">@Model.CaseTypeParantPath</div>
                                                    <button class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a href="#">@Translation.Get("--", Enums.TranslationSource.TextTranslation)</a></li>
                                                        @Html.CaseTypeDropdownButtonString(Model.CaseTypes)
                                                    </ul>
                                                    <input type="hidden" id="NewCase.CaseType_Id" name="NewCase.CaseType_Id" value="@Model.NewCase.CaseType_Id.supressZero()" />

                                                </div>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("ProductArea_Id"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "ProductArea_Id").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "ProductArea_Id").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                <div id="divProductArea" class="btn-group">
                                                    <div class="btn" id="divBreadcrumbs_ProductArea">@Model.ProductAreaParantPath</div>
                                                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a href="#">@Translation.Get("--", Enums.TranslationSource.TextTranslation)</a></li>
                                                        @Html.ProductAreaDropdownButtonString(Model.ProductAreas)
                                                    </ul>
                                                    @Html.HiddenFor(model => model.NewCase.ProductArea_Id)
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("System_Id"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "System_Id").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "System_Id").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                <select id="NewCase_System_Id" name="NewCase.System_Id">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Systems != null)
                                                    {
                                                        foreach (var e in Model.Systems)
                                                        {
                                                            <option value="@e.Id">@e.SystemName</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Category_Id"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Category_Id").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Category_Id").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                <select id="NewCase_Category_Id" name="NewCase.Category_Id">
                                                    <option value="">&nbsp;</option>
                                                    @if (Model.Categories != null)
                                                    {
                                                        foreach (var e in Model.Categories.Where(c => c.IsActive == 1))
                                                        {
                                                            <option value="@e.Id">@e.Name</option>
                                                        }
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Supplier_Id"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Supplier_Id").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                        
                                            @if (Model.Suppliers != null)
                                            {
                                                <div class="col-md-10">
                                                    @if (Model.FieldSettings.Where(f => f.Name == "Supplier_Id").Select(f => f.Required).SingleOrDefault() == 1)
                                                    {
                                                        <span class="mandatorystar">*</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="mandatorystar">&nbsp;</span>
                                                    }
                                                    <select id="NewCase_Supplier_Id" name="NewCase.Supplier_Id">
                                                        <option value="">&nbsp;</option>
                                                        @foreach (var e in Model.Suppliers.Where(e => e.IsActive == 1))
                                                        {
                                                            <option value="@e.Id">@e.Name</option>
                                                        }
                                                    </select>
                                                </div>
                                            }
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("InvoiceNumber"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "InvoiceNumber").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "InvoiceNumber").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(i => Model.NewCase.InvoiceNumber)
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("ReferenceNumber"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "ReferenceNumber").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "ReferenceNumber").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(r => Model.NewCase.ReferenceNumber)
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Caption"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Caption").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Caption").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextBoxFor(c => Model.NewCase.Caption)
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Description"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Description").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Description").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextAreaFor(d => Model.NewCase.Description)
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Miscellaneous"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Miscellaneous").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Miscellaneous").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Html.TextAreaFor(m => Model.NewCase.Miscellaneous)
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("ContactBeforeAction"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "ContactBeforeAction").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                <input type="checkbox" name="NewCase.ContactBeforeAction" @(Model.NewCase.ContactBeforeAction == 1 ? "checked=checked" : "") value="1"/>
                                                @Translation.Get("Ska anmälaren kontaktas innan åtgärd", Enums.TranslationSource.TextTranslation)
                                                <input type="hidden" name="NewCase.ContactBeforeAction" value="0" />
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("SMS"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "SMS").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                <input type="checkbox" name="NewCase.SMS" @(Model.NewCase.SMS == 1 ? "checked=checked" : "") value="1"/>
                                                @Translation.Get("Skicka SMS när ärendet avslutas", Enums.TranslationSource.TextTranslation)
                                                <input type="hidden" name="NewCase.SMS" value="0" />
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Available"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Available").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                @if (Model.FieldSettings.Where(f => f.Name == "Available").Select(f => f.Required).SingleOrDefault() == 1)
                                                {
                                                    <span class="mandatorystar">*</span>
                                                }
                                                else
                                                {
                                                    <span class="mandatorystar">&nbsp;</span>
                                                }
                                                @Translation.Get("Anmälaren nås säkrast på följande tider", Enums.TranslationSource.TextTranslation)
                                                <br />
                                                &nbsp;@Html.TextBoxFor(m => Model.NewCase.Available)
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Cost"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Cost").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">
                                                <table>
                                                    <tr>
                                                        <td>@Translation.Get("Artikelkostnad", Enums.TranslationSource.TextTranslation)<br />
                                                            @Html.TextBoxFor(model => model.NewCase.Cost, new { maxlength = "7", Class = "inputw50" })
                                                        </td>
                                                        <td>@Translation.Get("Övrig kostnad", Enums.TranslationSource.TextTranslation)<br />
                                                            @Html.TextBoxFor(model => model.NewCase.OtherCost, new { maxlength = "7", Class = "inputw50" })
                                                        </td>
                                                        <td>@Translation.Get("Valuta", Enums.TranslationSource.TextTranslation)<br />
                                                            <select id="NewCase_Currency" name="NewCase.Currency" class="inputw100">
                                                                <option value="">&nbsp;</option>
                                                                @if (Model.Currencies != null)
                                                                {
                                                                    foreach (var e in Model.Currencies)
                                                                    {
                                                                        <option value="@e.Code" >@e.Code</option>
                                                                    }
                                                                }
                                                            </select>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.FieldSettings.Select(f => f.Name).Contains("Filename"))
                                    {
                                        <div class="form-group row">
                                            <label class="col-md-2">
                                                @Model.FieldSettings.Where(f => f.Name == "Filename").Select(f => f.LabelToChange).SingleOrDefault():
                                            </label>
                                            <div class="col-md-10">                                                
                                                <a href="#NewCase_upload_files_popup" role="button" class="btn btn-default" data-toggle="modal">@Translation.Get("Lägg till", Enums.TranslationSource.TextTranslation)</a>
                                                <div id="NewCase_upload_files_popup" role="dialog" class="modal fade" aria-labelledby="myModalLabel" aria-hidden="true">                                                    
                                                    <div class="modal-dialog">
                                                        <div class="modal-content">                                                
                                                            <div class="modal-header">
                                                                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                                                                <h3>&nbsp;</h3>
                                                            </div>
                                                            <div class="modal-body">
                                                                <div id="NewCasefile_uploader"></div>
                                                            </div>
                                                            <div class="modal-footer">
                                                                <button class="btn" data-dismiss="modal" aria-hidden="true">@Translation.Get("Stäng", Enums.TranslationSource.TextTranslation)</button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <table id="NewCasefiles_table" class="table table-striped">
                                                    <tbody>
                                                        @if (this.Model.NewCase.CaseFiles == null)
                                                        {
                                                            <div id="no_uploaded_files_label">
                                                            </div>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    }
                                    <div class="form-group row">
                                        <label class="col-md-2"></label>
                                        <div class="col-md-10">
                                            @Html.ActionLink(Translation.Get("Spara och skicka", Enums.TranslationSource.TextTranslation), null, null, null, new { onclick = "$('#NewCaseForm').submit();return false;", @class = "btn btn-primary" })
                    
                                        </div>
                                    </div>
                                    

                                </div>
                            </div>
                        </div>
                    }
                    <!-- Case Info Fields -->
 
                }
            </div>

        </div>
    </div>
</div>

<script type="text/javascript">

    $(document).ready(function () {
        NewCaseInitForm();
    });

    function NewCaseInitForm() {

        $('#NewCase_ReportedBy').typeahead(_GetComputerUserSearchOptions());
        $('#NewCase_InventoryNumber').typeahead(_GetComputerSearchOptions());
    }

    function _GetComputerUserSearchOptions() {

        var options = {
            items: 20,
            minLength: 2,

            source: function (query, process) {
                return $.ajax({
                    url: '/case/SearchUser',
                    type: 'post',
                    data: { query: query, customerId: $('#NewCase_Customer_Id').val() },
                    dataType: 'json',
                    success: function (result) {
                        var resultList = jQuery.map(result, function (item) {
                            var aItem = {
                                id: item.Id
                                , num: item.UserId
                                , name: item.SurName + ' ' + item.FirstName
                                , email: item.Email
                                , place: item.Location
                                , phone: item.Phone
                                , usercode: item.UserCode
                                , cellphone: item.CellPhone
                                , regionid: item.Region_Id
                                , departmentid: item.Department_Id
                                , ouid: item.OU_Id
                            };
                            return JSON.stringify(aItem);
                        });

                        return process(resultList);
                    }
                });
            },

            matcher: function (obj) {
                var item = JSON.parse(obj);
                //console.log(JSON.stringify(item));
                return ~item.name.toLowerCase().indexOf(this.query.toLowerCase())
                    || ~item.num.toLowerCase().indexOf(this.query.toLowerCase())
                    || ~item.phone.toLowerCase().indexOf(this.query.toLowerCase())
                    || ~item.email.toLowerCase().indexOf(this.query.toLowerCase());
            },

            sorter: function (items) {
                var beginswith = [], caseSensitive = [], caseInsensitive = [], item;
                while (aItem = items.shift()) {
                    var item = JSON.parse(aItem);
                    if (!item.num.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(JSON.stringify(item));
                    else if (~item.num.indexOf(this.query)) caseSensitive.push(JSON.stringify(item));
                    else caseInsensitive.push(JSON.stringify(item));
                }

                return beginswith.concat(caseSensitive, caseInsensitive);
            },

            highlighter: function (obj) {
                var item = JSON.parse(obj);
                var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
                var result = item.name + ' - ' + item.num + ' - ' + item.phone + ' - ' + item.email;

                return result.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
                    return '<strong>' + match + '</strong>';
                });
            },

            updater: function (obj) {

                var item = JSON.parse(obj);
                //console.log(JSON.stringify(item));
                $('#NewCase_ReportedBy').val(item.num);
                $('#NewCase_PersonsName').val(item.name);
                $('#NewCase_PersonsEmail').val(item.email);
                $('#NewCase_PersonsPhone').val(item.phone);
                $('#NewCase_PersonsCellphone').val(item.cellphone);
                $('#NewCase_Place').val(item.place);
                $('#NewCase_UserCode').val(item.usercode);
                $('#NewCase_Region_Id').val(item.regionid);
                $('#NewCase_Department_Id').val(item.departmentid);
                $('#NewCase_Ou_Id').val(item.ouid);

                return item.num;
            }
        };

        return options;
    }

    function _GetComputerSearchOptions() {

        var options = {
            items: 20,
            minLength: 2,

            source: function (query, process) {
                return $.ajax({
                    url: '/case/SearchComputer',
                    type: 'post',
                    data: { query: query, customerId: $('#NewCase_Customer_Id').val() },
                    dataType: 'json',
                    success: function (result) {
                        var resultList = jQuery.map(result, function (item) {
                            var aItem = {
                                id: item.Id
                                , num: item.ComputerName
                                , location: item.Location
                                , computertype: item.ComputerTypeDescription
                            };
                            return JSON.stringify(aItem);
                        });

                        return process(resultList);
                    }
                });
            },

            matcher: function (obj) {
                var item = JSON.parse(obj);
                //console.log(JSON.stringify(item));
                return ~item.num.toLowerCase().indexOf(this.query.toLowerCase())
                    || ~item.computertype.toLowerCase().indexOf(this.query.toLowerCase())
                    || ~item.location.toLowerCase().indexOf(this.query.toLowerCase());
            },

            sorter: function (items) {
                var beginswith = [], caseSensitive = [], caseInsensitive = [], item;
                while (aItem = items.shift()) {
                    var item = JSON.parse(aItem);
                    if (!item.num.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(JSON.stringify(item));
                    else if (~item.num.indexOf(this.query)) caseSensitive.push(JSON.stringify(item));
                    else caseInsensitive.push(JSON.stringify(item));
                }

                return beginswith.concat(caseSensitive, caseInsensitive);
            },

            highlighter: function (obj) {
                var item = JSON.parse(obj);
                var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
                var result = item.num + ' - ' + item.location + ' - ' + (item.computertype == null ? ' ' : item.computertype);

                return result.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
                    return '<strong>' + match + '</strong>';
                });
            },

            updater: function (obj) {
                var item = JSON.parse(obj);
                //console.log(JSON.stringify(item));                
                $('#NewCase_InventoryNumber').val(item.num);
                $('#NewCase_InventoryType').val(item.computertype);
                $('#NewCase_InventoryLocation').val(item.location);

                return item.num;
            }
        };

        return options;
    }

    function NewCase() {
        $("#NewCaseForm").attr("action", '/Case/NewCase');
        $("#NewCaseForm").submit();
    }

    


    $('#divProductArea ul.dropdown-menu li a').click(function (e) {
        e.preventDefault();
        var val = $(this).attr('value');
        $("#divBreadcrumbs_ProductArea").text(getBreadcrumbs(this));
        //$("#NewCase.ProductArea_Id").val(val);
        var ee = document.getElementById("NewCase_ProductArea_Id");
        ee.setAttribute('value', val);
    });

    function refreshNewCaseFilesTable(files) {
        $('#NewCasefiles_table > tbody > tr').remove();

        var fileMarkup =
            $('<tr>' +
                '<td> &nbsp; <td>' +
                '<tr>');
        $('#NewCasefiles_table > tbody').append(fileMarkup);

        for (var i = 0; i < files.length; i++) {
            var file = files[i];

            fileMarkup =
                $('<tr>' +
                    '<td>' +
                    '<a style="color:blue" href="@this.Url.Action("DownloadNewCaseFile")?@(!string.IsNullOrEmpty(this.Model.CaseFileKey) ? "id=" + this.Model.CaseFileKey + "&" : string.Empty)' + 'fileName=' + file + '"> <i class="icon-file"></i>' + file + '</a>' +
                    '</td>' +
                    '<td>' +
                    '<a id="delete_file_button_' + i + '" class="btn bt-small" title="@Translation.Get("Ta bort", Enums.TranslationSource.TextTranslation)"> <i class="icon-remove"></i> </a>' +
                    '</td>' +
                    '</tr>');

            $('#NewCasefiles_table > tbody').append(fileMarkup);
        }

        bindDeleteNewCaseFileBehaviorToDeleteButtons();
    }

    function bindDeleteNewCaseFileBehaviorToDeleteButtons() {
        $('#NewCasefiles_table a[id^="delete_file_button_"]').click(function () {
            var fileName = $(this).parents('tr:first').children('td:first').children('a').text();
            var pressedDeleteFileButton = this;

            $.post('@this.Url.Action("DeleteNewCaseFile")', { id: '@this.Model.CaseFileKey', fileName: fileName }, function () {
                $(pressedDeleteFileButton).parents('tr:first').remove();
            });
        });
    }

    $('#divCaseType ul.dropdown-menu li a').click(function (e) {
        e.preventDefault();        
        var val = $(this).attr('value');
        $("#divBreadcrumbs_CaseType").text(getBreadcrumbs(this));
        //$("#NewCase.CaseType_Id").val(val);
        var ee = document.getElementById("NewCase.CaseType_Id");        
        ee.setAttribute('value', val);
    });

    $('#divCaseTypeSetting ul.dropdown-menu li a').click(function (e) {
        e.preventDefault();
        var val = $(this).attr('value');
        $("#divBreadcrumbs_CaseTypeSetting").text(getBreadcrumbs(this));        

        var ee = document.getElementById("NewCase_CaseType_Id");
        ee.setAttribute('value', val);        
    });

    $('#divProductAreaSetting ul.dropdown-menu li a').click(function (e) {
        e.preventDefault();
        var val = $(this).attr('value');
        $("#divBreadcrumbs_ProductAreaSetting").text(getBreadcrumbs(this));
        var ee = document.getElementById("NewCase_ProductArea_Id");
        ee.setAttribute('value', val);
    });


    var validator = $("#NewCaseForm").validate({
        ignore: "",
        rules: {
            "NewCase.ReportedBy": {
                required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.ReportedBy.ToString())")
                },
                "NewCase.PersonsName": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_Name.ToString())")
            },
                "NewCase.PersonsEmail": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_EMail.ToString())")
            },
                "NewCase.PersonsCellphone": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString())")
            },
                "NewCase.PersonsPhone": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_Phone.ToString())")
            },
                "NewCase.Region_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Region_Id.ToString())")
            },
                "NewCase.Department_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Department_Id.ToString())")
            },
                "NewCase.OU_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.OU_Id.ToString())")
            },
                "NewCase.Place": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Place.ToString())")
            },
                "NewCase.UserCode": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.UserCode.ToString())")
            },
                "NewCase.InventoryNumber": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.InventoryNumber.ToString())")
            },
                "NewCase.InventoryLocation": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.InventoryLocation.ToString())")
            },
                "NewCase.InventoryType": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString())")
            },
                "NewCase.CaseType_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.CaseType_Id.ToString())")
            },
                "NewCase.ProductArea_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString())")
            },
                "NewCase.System_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.System_Id.ToString())")
            },
                "NewCase.Urgency_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Urgency_Id.ToString())")
            },
                "NewCase.Impact_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Impact_Id.ToString())")
            },
                "NewCase.Category_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Category_Id.ToString())")
            },
                "NewCase.Supplier_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Supplier_Id.ToString())")
            },
                "NewCase.InvoiceNumber": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString())")
            },
                "NewCase.ReferenceNumber": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString())")
            },
                "NewCase.Caption": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Caption.ToString())")
            },
                "NewCase.Description": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Description.ToString())")
            },
                "NewCase.Miscellaneous": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Miscellaneous.ToString())")
            },
                "NewCase.AgreedDate": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.AgreedDate.ToString())")
            },
                "NewCase.Available": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Available.ToString())")
            },
                "NewCase.WorkingGroup_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString())")
            },
                "NewCase.Performer_User_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString())")
            },
                "NewCase.CaseResponsible_User_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.CaseResponsibleUser_Id.ToString())")
            },
                "NewCase.Priority_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Priority_Id.ToString())")
            },
                "NewCase.Status_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.Status_Id.ToString())")
            },
                "NewCase.StateSecondary_Id": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString())")
            },
                "NewCase.PlanDate": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.PlanDate.ToString())")
            },
                "NewCase.WatchDate": {
                    required: FieldIsRequired("@Model.CaseFieldSettings.CaseFieldSettingExternalRequiredCheck(GlobalEnums.TranslationCaseFields.WatchDate.ToString())")
            },
            },
            messages: {
                "NewCase.ReportedBy": {
                    required: "@Translation.Get(GlobalEnums.TranslationCaseFields.ReportedBy.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.PersonsName": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Persons_Name.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.PersonsEmail": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Persons_EMail.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.PersonsCellPhone": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.PersonsPhone": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Persons_Phone.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Region_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Region_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Department_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Department_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.OU_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.OU_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Place": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Place.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.UserCode": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.UserCode.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.InventoryNumber": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.InventoryNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.InventoryLocation": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.InventoryLocation.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.InventoryType": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.ProductArea_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.CaseType_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.CaseType_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.System_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.System_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Urgency_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Urgency_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Impact_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Impact_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Category_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Category_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Supplier_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Supplier_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.InvoiceNumber": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.ReferenceNumber": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Caption": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Caption.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Description": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Description.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Miscellaneous": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Miscellaneous.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.AgreedDate": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.AgreedDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Available": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Available.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.WorkingGroup_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Performer_User_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.CaseResponsible_User_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.CaseResponsibleUser_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Priority_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Priority_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.Status_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.Status_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.StateSecondary_Id": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.PlanDate": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.PlanDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
            "NewCase.WatchDate": {
                required: "@Translation.Get(GlobalEnums.TranslationCaseFields.WatchDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.NewCase.Customer_Id) @Translation.Get("måste anges", Enums.TranslationSource.TextTranslation)"
            },
        },
            //errorPlacement: function (error, element) {
            //    alert(error.text());
            //},
            submitHandler: function (form) {
                form.submit();
            }
        });

    function FieldIsRequired(value) {
        var ret = false;
        if (value == '1') {
            ret = true;
        }
        return ret;
    }
</script>

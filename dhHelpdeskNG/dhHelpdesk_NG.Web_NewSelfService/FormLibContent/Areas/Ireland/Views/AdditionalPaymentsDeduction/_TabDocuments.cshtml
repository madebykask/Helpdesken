@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;


@functions{
    public string GetContract(string allowanceNr)
    {
        string allowanceType = Model.GetDocumentAnswer("AllowancesType" + allowanceNr).Trim().ToLower();



        if (allowanceType == "Fork Lift Truck Allowance".ToLower() | allowanceType == "Power Stacker".ToLower())
        {
            return "AllowancesDoc";
        }

        return "";
         
        
        //switch (allowanceType)
        //{
        //    case "fork lift truck":
        //        return "AllowancesDoc";
        //    case "100f salary flt skills":
        //        return "AllowancesDoc";
        //    case "power stacker":
        //        return "AllowancesDoc";
        //    default:
        //        return "";
        //}
       
    }

    public string PrintText()
    {
        return Model.Translate("Print");
    }
}

<div class="tab-pane" id="documents">
    <div class="span12">
        <table class="table-striped">
            <thead>
                <tr>
                    <th>@Model.Translate("Document")
                    </th>
                    <th>@Model.Translate("Type")
                    </th>
                    <th>&nbsp;</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
            <tbody>
            @if (!string.IsNullOrEmpty(GetContract("")) | !string.IsNullOrEmpty(GetContract("2")) | !string.IsNullOrEmpty(GetContract("3")))
            {
            
                for (int i = 1; i <= int.Parse(Model.GetAnswer("Allowances")); i++)
                {
                    string allowanceNr = "";

                    if (i > 1)
                    {
                        allowanceNr = i.ToString();
                    }


                    if (!string.IsNullOrEmpty(GetContract(allowanceNr)))
                    {

                        if (!string.IsNullOrEmpty(Model.GetAnswer("AllowancesType" + allowanceNr)))
                        {
                    <tr>
                        <td>@Model.GetAnswer("AllowancesType" + allowanceNr)</td>
                        <td>pdf</td>
                        <td>&nbsp;</td>
                        <td>
                            <a href="@Url.Action("print", "AdditionalPaymentsDeduction", new
                            {
                                id = GetContract(allowanceNr),
                                caseId = Model.Contract.Id,
                                path = Path.Combine(Path.GetDirectoryName(Model.FormXmlPath), Path.GetFileNameWithoutExtension(Model.FormXmlPath)),
                                userId = FormLibSessions.User.UserId,
                                allowanceNr = i
                            })" class="btn pull-right print"><i class="icon-file"></i>&nbsp;@Model.Translate("Print")</a>
                        </td>
                    </tr>
                        }

                    }
                }
             }
            else
            {
                <tr><td colspan="4"><div class="alert alert-info"><strong><i class="icon-info-sign"></i>&nbsp;@Model.Translate("A document can not be created based on current selections")</strong></div></td></tr>
            }

            @Html.Partial("_StaticDocuments", Model)
            </tbody>
        </table>
    </div>
</div>






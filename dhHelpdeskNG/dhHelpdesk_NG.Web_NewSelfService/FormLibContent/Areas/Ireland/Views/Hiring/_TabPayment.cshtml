@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

@{
    const string PayrollCategory = "Hourly";
    const string Level = "Level 1";
}

<div class="tab-pane" id="payment">
    <div class="span5">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Basic pay")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayrollCategory")</td>
                    <td>
                        @Model.Element("PayrollCategory")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayScaleGroup")</td>
                    <td>
                        @Model.Element("PayScaleGroup")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BasicPayAmount")</td>
                    <td>
                        @Model.Element("BasicPayAmount")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Allowances")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesType")</td>
                    <td>
                        @Model.Element("AllowancesType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesPaymentType")</td>
                    <td>
                        @Model.Element("AllowancesPaymentType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesAmountUnits")</td>
                    <td>
                        @Model.Element("AllowancesAmountUnits")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesNetGross")</td>
                    <td>
                        @Model.Element("AllowancesNetGross")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidFrom")</td>
                    <td>
                        @Model.Element("AllowancesValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidTo")</td>
                    <td>
                        @Model.Element("AllowancesValidTo")
                    </td>
                </tr>

                @for (int i = 2; i <= 3; i++)
                {
                    <tr class="allowance@(i.ToString())" id="allowance@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Allowances") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesType" + i.ToString())
                            <div id="notice_AllowancesType@(i.ToString())" style="display: none;" class="notice">
                                @Model.Translate("The BHV allowance is calculated according to CLA article 28")
                            </div>
                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesPaymentType" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesNetGross" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addAllowanceTr">
                    <td colspan="2">
                        @Model.Element("Allowances")
                        <a id="addAllowance" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Allowance")</a></td>
                </tr>

            </tbody>
        </table>
    </div>
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Deductions")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsType")</td>
                    <td>
                        @Model.Element("DeductionsType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsPaymentType")</td>
                    <td>
                        @Model.Element("DeductionsPaymentType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsAmountUnits")</td>
                    <td>
                        @Model.Element("DeductionsAmountUnits")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsNetGross")</td>
                    <td>
                        @Model.Element("DeductionsNetGross")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidFrom")</td>
                    <td>
                        @Model.Element("DeductionsValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidTo")</td>
                    <td>
                        @Model.Element("DeductionsValidTo")
                    </td>
                </tr>

                @for (int i = 2; i <= 3; i++)
                {
                    <tr class="deduction@(i.ToString())" id="deduction@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Deductions") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsType" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsPaymentType" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsNetGross" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addDeductionTr">
                    <td colspan="2">
                        @Model.Element("Deductions")
                        <a id="addDeduction" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Deduction")</a></td>
                </tr>



                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Bonus Eligibility")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("OneIKEABonusLevel")</td>
                    <td>
                        @Model.Element("OneIKEABonusLevel")
                    </td>
                </tr>


                <tr class="globalmobility">
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Global Mobility")</h4>
                    </td>
                </tr>
                <tr class="globalmobility">
                    <td class="tdstrong">@Model.Label("TaxAssignment")</td>
                    <td>
                        @Model.Element("TaxAssignment")
                    </td>
                </tr>
                <tr class="globalmobility">
                    <td class="tdstrong">@Model.Label("SocialInsuranceAssignment")</td>
                    <td>
                        @Model.Element("SocialInsuranceAssignment")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Country Specifics")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DateOfNextSalaryReview")</td>
                    <td>
                        @Model.Element("DateOfNextSalaryReview")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BenefitLevel")</td>
                    <td>
                        @Model.Element("BenefitLevel")
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script>

    $(function () {

        // allowance and deduction datepickers
        var employmentCategory = document.getElementById('EmploymentCategory').value;
        var sEnd = document.getElementById('ContractEndDate');


        function setPaymentDatePickersBehavior() {
            var startDate = $('#ContractStartDate').val();
            var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
            var dStart = APIGlobal.DateTime.parseDate(startDate, format);
            var forcePicker = new Date(dStart.getFullYear(), dStart.getMonth(), dStart.getDate(), 0, 0, 0, 0);
            $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,' +
                '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3').not(".disabled").datepicker(
            {
                onRender: function (ev) {
                    return ev.valueOf() < forcePicker.valueOf() ? 'disabled' : '';
                },
            });
        }

        setPaymentDatePickersBehavior();

        $('#date_ContractStartDate').on('changeDate', function (ev) {

            $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,' +
            '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3').not(".disabled").datepicker('destroy');

            setPaymentDatePickersBehavior();
        }).data('datepicker');

        $('#AllowancesPaymentType').change(function () {
            var allowancesValidTo = document.getElementById('AllowancesValidTo');

            var input = $('#AllowancesValidTo');
            if ($(this).val() == 'One Time') {
                allowancesValidTo.value = "";
                $('#date_AllowancesValidTo').datepicker("destroy");
                $('#date_AllowancesValidTo').addClass("disabled");
                input.attr('readonly', 'readonly');
            } else {
                $('#date_AllowancesValidTo').removeClass("disabled");
                input.removeAttr('readonly', 'readonly');
                if (employmentCategory == 'Temporary')
                    allowancesValidTo.value = sEnd.value;
                else
                    if (allowancesValidTo.value == '') {
                        allowancesValidTo.value = '31.12.9999';
                    }
                $('#date_AllowancesValidTo').datepicker();
            }
        });
        $('#AllowancesPaymentType').change();

        $('#AllowancesPaymentType2').change(function () {
            var allowancesValidTo2 = document.getElementById('AllowancesValidTo2');
            var input = $('#AllowancesValidTo2');
            if ($(this).val() == 'One Time') {
                allowancesValidTo2.value = "";
                $('#date_AllowancesValidTo2').datepicker("destroy");
                $('#date_AllowancesValidTo2').addClass("disabled");
                input.attr('readonly', 'readony');
            } else {
                input.removeAttr('readonly');
                if (employmentCategory == 'Temporary')
                    allowancesValidTo2.value = sEnd.value;
                else
                    if (allowancesValidTo2.value == '') {
                        allowancesValidTo2.value = '31.12.9999';
                    }
                $('#date_AllowancesValidTo2').datepicker();
            }
        });
        $('#AllowancesPaymentType2').change();


        $('#AllowancesPaymentType3').change(function () {
            var allowancesValidTo3 = document.getElementById('AllowancesValidTo3');

            var input = $('#AllowancesValidTo3');
            if ($(this).val() == 'One Time') {
                allowancesValidTo3.value = "";
                $('#date_AllowancesValidTo3').datepicker("destroy");
                $('#date_AllowancesValidTo3').addClass("disabled");
                input.attr('readonly', 'readony');
            } else {
                input.removeAttr('readonly');
                if (employmentCategory == 'Temporary')
                    allowancesValidTo3.value = sEnd.value;
                else
                    if (allowancesValidTo3.value == '') {
                        allowancesValidTo3.value = '31.12.9999';
                    }
                $('#date_AllowancesValidTo3').datepicker();
            }
        });
        $('#AllowancesPaymentType3').change();


        $('#DeductionsPaymentType').change(function () {
            var deductionsValidTo = document.getElementById('DeductionsValidTo');

            var input = $('#DeductionsValidTo');
            if ($(this).val() == 'One Time') {
                deductionsValidTo.value = "";
                $('#date_DeductionsValidTo').datepicker("destroy");
                $('#date_DeductionsValidTo').addClass("disabled");
                input.attr('readonly', 'readony');

            } else {
                input.removeAttr('readonly');
                if (employmentCategory == 'Temporary')
                    deductionsValidTo.value = sEnd.value;
                else
                    if (deductionsValidTo.value == '') {
                        deductionsValidTo.value = '31.12.9999';
                    }
                $('#date_DeductionsValidTo').datepicker();
            }
        });
        $('#DeductionsPaymentType').change();


        $('#DeductionsPaymentType2').change(function () {
            var deductionsValidTo2 = document.getElementById('DeductionsValidTo2');

            var input = $('#DeductionsValidTo2');
            if ($(this).val() == 'One Time') {
                deductionsValidTo2.value = "";
                $('#date_DeductionsValidTo2').datepicker("destroy");
                $('#date_DeductionsValidTo2').addClass("disabled");
                input.attr('readonly', 'readony');
            } else {
                input.removeAttr('readonly');
                if (employmentCategory == 'Temporary')
                    deductionsValidTo2.value = sEnd.value;
                else
                    if (deductionsValidTo2.value == '') {
                        deductionsValidTo2.value = '31.12.9999';
                    }
                $('#date_DeductionsValidTo2').datepicker();
            }
        });
        $('#DeductionsPaymentType2').change();



        $('#DeductionsPaymentType3').change(function () {
            var deductionsValidTo3 = document.getElementById('DeductionsValidTo3');

            var input = $('#DeductionsValidTo3');
            if ($(this).val() == 'One Time') {
                deductionsValidTo3.value = "";
                $('#date_DeductionsValidTo3').datepicker("destroy");
                $('#date_DeductionsValidTo3').addClass("disabled");
                input.attr('readonly', 'readony');
            } else {
                input.removeAttr('readonly');
                if (employmentCategory == 'Temporary')
                    deductionsValidTo3.value = sEnd.value;
                else
                    if (deductionsValidTo3.value == '') {
                        deductionsValidTo3.value = '31.12.9999';
                    }
                $('#date_DeductionsValidTo3').datepicker();
            }
        });
        $('#DeductionsPaymentType3').change();

        function setOneIKEABonusLevel(value) {
            if (!value) {
                $('#OneIKEABonusLevel option[value="' + '@Level' + '"]').prop('selected', true);
    }
    else {
        $('#OneIKEABonusLevel option:not([value])').prop('selected', true);
    }
};

        $('#JobTitle').change(function () {
            setOneIKEABonusLevel($(this).val());
        });

        setOneIKEABonusLevel($(this).val());
    });

    @*// Following script is for hiding global mobility class if NewToIKEA is equal to string 'International Transfer'
    if ('@Model.GetAnswer("NewToIKEA")' == 'International Transfer') {
        $(".globalmobility").hide();

    }

    document.getElementById('AllowancesValidFrom').value = '@Model.GetAnswer("ContractStartDate")';
    document.getElementById('DeductionsValidFrom').value = '@Model.GetAnswer("ContractStartDate")';

    for (var i = 2; i <= 3; i++) {
        //Defaults variables to ContractStartDate
        var AllowancesValidFrom = "AllowancesValidFrom" + [i].toString();
        var DeductionsValidFrom = "DeductionsValidFrom" + [i].toString();
        document.getElementById(AllowancesValidFrom).value = '@Model.GetAnswer("ContractStartDate")';
        document.getElementById(DeductionsValidFrom).value = '@Model.GetAnswer("ContractStartDate")';
    }*@
        
</script>

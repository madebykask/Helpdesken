@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;


@functions{
    public string GetContract()
    {
        
        //Temporary_FixedTerm
        if (Model.GetDocumentAnswer("EmploymentCategory").ToLower() == "Temporary".ToLower() | Model.GetDocumentAnswer("EmploymentCategory").ToLower() == "Fixed Term".ToLower())
        {
            return "Temporary_FixedTerm";
        }
        
        //Temporary_FixedTerm
        
         string valueFromModel = Model.GetDocumentAnswer("JobTitle").ToLower();

        int payScaleGroupFromModel = 0;

        try
        {
            payScaleGroupFromModel = int.Parse(Model.GetDocumentAnswer("PayScaleGroup"));
        }
        catch (Exception)
        {
        }


        //DUBLIN pc 44 to 49 hr and payroll or DUBLIN pc 50 to 55 hr and payroll or DUBLIN pc 56 to 61 hr and payroll
        
         // accepted jobtitles
        string[] jobTitles = new string[] { "HR Generalist".ToLower(), "HR Administrator".ToLower(), "HR Manager".ToLower(), "Staff Planner".ToLower(), "Accounting Assistant Reconciliation".ToLower(), "Accountant".ToLower() };

        //DUBLIN pc 44 to 49 hr and payroll
        if (payScaleGroupFromModel >= 44 && payScaleGroupFromModel <= 49)
        {
            int pos = Array.IndexOf(jobTitles, valueFromModel);
            if (pos >= 0)
            {
                 //the array contains the string
                return "Pc44to49HrAndPayroll";
            }
        }

        //DUBLIN pc 50 to 55 hr and payroll
        if (payScaleGroupFromModel >= 50 && payScaleGroupFromModel <= 55)
        {
            int pos = Array.IndexOf(jobTitles, valueFromModel);
            if (pos >= 0)
            {
                //the array contains the string
                return "Pc50to55HrAndPayroll";
            }
        }

        //DUBLIN pc 56 to 61 hr and payroll
        if (payScaleGroupFromModel >= 56 && payScaleGroupFromModel <= 61)
        {
            int pos = Array.IndexOf(jobTitles, valueFromModel);
            if (pos >= 0)
            {
                //the array contains the string
                return "Pc56to61HrAndPayroll";
            }
        }

        // DUBLIN pc 44 to 49 hr and payroll or DUBLIN pc 50 to 55 hr and payroll or DUBLIN pc 56 to 61 hr and payroll
        
        
        //DUBLIN pc 50 to 55 risk and security
        
        
        // accepted jobtitles

        jobTitles = new string[] { "Safety & Security Manager".ToLower(), "Safety and Security Function Support (Specialist)".ToLower(), "Safety & Security Co-worker".ToLower(), "Safety &amp; Security Co-worker".ToLower(), "Facility Specialist".ToLower(), "Site Facility Management Co-worker".ToLower() };

        //DUBLIN pc 44 to 49 hr and payroll
        if (payScaleGroupFromModel >= 50 && payScaleGroupFromModel <= 55)
        {
            int pos = Array.IndexOf(jobTitles, valueFromModel);
            if (pos >= 0)
            {
                 //the array contains the string
                return "Pc50to55RiskAndSecurity";
            }
        }
        
        
        
        
        //DUBLIN pc 50 to 55 risk and security
        

       /* Co worker */

        //Få svar på
        //Safety and Security Function Support (Specialist) ? samma som Security Function Support ?
        
        //Not accepted jobtitles
        string[] jobTitlesNotAccepted = new string[] { "Safety & Security Manager".ToLower(), "Safety and Security Function Support (Specialist)".ToLower(), "Safety & Security Co-worker".ToLower(), "Facility Specialist".ToLower(), "Site Facility Management Co-worker".ToLower(), "HR Generalist".ToLower(), "HR Administrator".ToLower(), "HR Manager".ToLower(), "Staff Planner".ToLower(), "Accounting Assistant Reconciliation".ToLower(), "Accountant".ToLower() };

        if ((payScaleGroupFromModel >= 43 && payScaleGroupFromModel <= 49) | Model.GetDocumentAnswer("PayScaleGroup").ToLower() == "Starter".ToLower())
        {
            int pos = Array.IndexOf(jobTitlesNotAccepted, valueFromModel);
            if (pos == -1)
            {
                 //the array dont contains the string
                return "CoWorker";
            }
        }
        
        if (payScaleGroupFromModel >= 50 && payScaleGroupFromModel <= 55)
        {
            int pos = Array.IndexOf(jobTitlesNotAccepted, valueFromModel);
            if (pos == -1)
            {
                 //the array dont contains the string
                return "Pc50to55CoWorker";
            }
        }

        if (payScaleGroupFromModel >= 56 && payScaleGroupFromModel <= 61)
        {
            int pos = Array.IndexOf(jobTitlesNotAccepted, valueFromModel);
            if (pos == -1)
            {
                //the array dont contains the string
                return "Pc56to61CoWorker";
            }
        }
        

        //Få svar på
        //Safety and Security Function Support (Specialist) ? samma som Security Function Support ?
        //

      /* Co worker End */

        return "";

    }

    public string PrintText()
    {
        ////Should be implemented in status 20. Taken away after status 30.
        //if (Model.Contract.StateSecondaryId >= 20 && Model.Contract.StateSecondaryId < 40)
        //{
        // return Model.Translate("Print draft");
        //}
        //else
        //{
        return Model.Translate("Print");
        //}

    }
}

<div class="tab-pane" id="documents">
    <div class="span12">
        <table class="table-striped align-middle">
            <thead>
                <tr>
                    <th>@Model.Translate("Document")
                    </th>
                    <th>@Model.Translate("Type")
                    </th>
                    <th>&nbsp;</th>
                    <th>&nbsp;</th>
                </tr>
            </thead>
            <tbody>
            @if (!string.IsNullOrEmpty(GetContract()))
            {
        
                        <tr>
                            <td>@Model.Translate("Contract")</td>
                            <td>pdf</td>
                            <td>&nbsp;</td>
                            <td>
                            <a href="@Url.Action("print", "hiring", new
                {
                    id = GetContract(),
                    caseId = Model.Contract.Id,
                    path = Path.Combine(Path.GetDirectoryName(Model.FormXmlPath), Path.GetFileNameWithoutExtension(Model.FormXmlPath)),
                    userId = FormLibSessions.User.UserId
                })" class="btn pull-right print"><i class="icon-file"></i>&nbsp;@PrintText()</a>

                               
                          </td>
                        </tr>
                
            }
            else
            {
            <tr><td colspan="4"><div class="alert alert-info"><strong><i class="icon-info-sign"></i>&nbsp;@Model.Translate("A document can not be created based on current selections")</strong></div></td></tr>
            }

            @Html.Partial("_StaticDocuments", Model)
            </tbody>
        </table>
    </div>
</div>


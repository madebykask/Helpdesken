@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
@using ECT.FormLib.Pdfs;

@{
    Layout = null;
    Model.Language = "nl";
}
<!DOCTYPE html>
<html>
<body>
    <div>
        <p style="text-align: left; font-family: Verdana; font-size: 11px; padding-top: 30px;">
            <strong>STAGE OVEREENKOMST</strong>
            <br />
            <br />
            Ondergetekenden:
           <br />
            <br />
        </p>
        <p style="text-align: left;font-family: Verdana; font-size: 11px; padding-top: 30px;">
            Tussen IKEA Nederland B.V., hierna te noemen IKEA, 
            <br />
            <br />
        </p>
        <table style="font-family: Verdana; font-size: 11px; width: 100%;" border="0">
            @if (!string.IsNullOrEmpty(Model.GetAnswer("Initials")))
            {
                <tr>
                    <td width="30%" style="text-align: left;">Voorletters</td>
                    <td width="70%" style="text-align: left;">: @Model.GetAnswer("Initials")</td>
                </tr>
            }
            <tr>
                <td style="text-align: left;">Roepnaam</td>
                <td style="text-align: left;">: @Model.GetAnswer("FirstName")</td>
            </tr>
            <tr>
                <td style="text-align: left;">Achternaam</td>
                <td style="text-align: left;">: @Model.GetAnswer("Prefixes") @Model.GetAnswer("LastName")</td>
            </tr>
            <tr>
                <td style="text-align: left;">Adres</td>
                <td style="text-align: left;">: @Model.GetAnswer("PermanentAddressLine1") @Model.GetAnswer("PermanentAddressLine2") @Model.GetAnswer("PermanentAddressLine3")</td>
            </tr>
            <tr>
                <td style="text-align: left;">Postcode /  woonplaats</td>
                <td style="text-align: left;">: @Model.GetAnswer("PermanentPostalCode") @Model.GetAnswer("PermanentCity")</td>
            </tr>
            <tr>
                <td style="text-align: left;">Geboortedatum</td>
                <td style="text-align: left;">: @Model.GetAnswer("DateOfBirth")</td>
            </tr>
            <tr>
                <td style="text-align: left;">Verbonden aan</td>
                <td style="text-align: left;">: @Model.GetAnswer("NameOfSchool")</td>
            </tr>
        </table>
        <br />
        <p style="text-align: left;font-family: Verdana; font-size: 11px;">
            Hierna te noemen de stagiair,<br />
            <br />
            Verklaren als volgt te zijn overeengekomen:<br />
            
        </p>


          @{
            var list = new List<PdfListItem>();
            var pdfList = new List<PdfListItem>();

            var brText = "<br /><br />";

            //1
            string text1 = "Dat IKEA de stagiair in de gelegenheid zal stellen in samenhang met zijn/haar opleiding praktische ervaringen op te doen met betrekking tot het werk in de volgende bedrijfsafdeling(en): {0} in de vestiging {1}, tijdens de periode {2} tot en met {3}, gedurende {4} uur per week, met uitzon¬dering van de dagen of gedeelten van dagen dat er in de onder¬neming niet wordt gewerkt.";

            list.Add(new PdfListItem { Text = string.Format(text1, Model.GetAnswer("ServiceArea"), Model.GetAnswer("BusinessUnit"), Model.GetAnswer("ContractStartDate"), Model.GetAnswer("ContractEndDate"), Model.GetAnswer("ContractedHours")) });
    
            //2
            list.Add(new PdfListItem { Text = "De rechtspositie van de stagiair is die van leerling van de school waar hij/zij onderwijs volgt." });

      
            //3
            list.Add(new PdfListItem { Text = "De dagelijkse leertijd is voor de stagiair in overeenstemming met de arbeidstijd welke geldt voor de afdeling waar hij geplaatst is, tenzij dit anders is overeengekomen en voor zover niet in strijd met de arbeidswetgeving voor jeugdigen." });

            //4
            list.Add(new PdfListItem { Text = "In geval van verzuim of het voornemen daartoe is de stagiair verplicht IKEA op de hoogte te stellen of te doen stellen op een wijze zoals die bij IKEA gebruikelijk is." });

            //5
            // string format
            list.Add(new PdfListItem { Text = string.Format("IKEA zal aanstellen als praktijkbegeleider: {0} van de afdeling: {1}.", Model.GetAnswer("MentorAtIKEA"), Model.GetAnswer("ServiceArea")) });
    
            //6
            list.Add(new PdfListItem { Text = "De stagiair verbindt zich om zowel tijdens de duur der stage als ook na afloop daarvan aan derden geen mededelingen te doen betreffende bijzonderheden van de IKEA organisatie." });

            //7
            list.Add(new PdfListItem { Text = "Een stage overeenkomst kan op initiatief en met overeenstemming van IKEA of de stagiair en de vertegenwoordiger van de school, worden verbroken, verlengd of bekort." });


            //8
            //IF Payroll Category = No Salary then paragraph number 8 should not appear on the contract
            if (Model.GetAnswer("PayrollCategory").ToLower() != "No Salary".ToLower())
            {
            list.Add(new PdfListItem { Text = string.Format("Stagevergoeding bruto per maand: EUR {0}. De vergoeding vindt telkens aan het einde van de kalendermaand plaats.", @Model.GetAnswer("BasicPay")) });
            }
                
            //9
            list.Add(new PdfListItem { Text = "De stagiair verklaart hiermee tevens kennis te hebben genomen van de IKEA Group Code of Conduct en de regels in Mijn IKEA en zich aan deze regels te zullen houden en verder met het bovenstaande akkoord te gaan." });

            //10
            list.Add(new PdfListItem { Text = "Indien de stagiaire niet in het bezit is van een OV- jaarkaart, dan geldt de reiskostenvergoeding conform de IKEA CAO." });

            
            }

          @if (list.Count > 1)
        {
            for (int i = 0; i < list.Count; i++)
            { 
            <br />                                        
            <p style="text-align: left;font-family: Verdana; font-size: 11px; padding-left: 20px; padding-right: 50px;">@(i + 1). @Html.Raw(list[i].Text)</p>
                if (list[i].SubList != null && list[i].SubList.Count > 0)
                {
                    foreach (var item in list[i].SubList)
                    {
            <br />
            <p style="text-align: left;font-family: Verdana; font-size: 11px; padding-left: 20px; padding-right: 50px;">@item.Text </p>
                    }
                }
            }
        }
        else
        {
            for (int i = 0; i == list.Count - 1; i++)
            {
            <p style="font-family: Verdana; font-size: 11px;">@Html.Raw(list[i])</p>
            }
        }
        
        <endpage />
    </div>


</body>
</html>

@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

@{
    Layout = null;
}
<!DOCTYPE html>
<html>

<body>
    <div>
        <br />

          <table style="font-family: Verdana; font-size: 11px; width: 100%;" border="0">
            <tr>
                <td style="text-align: right;">@Model.Contract.FirstName @Model.Contract.Surname</td>
            </tr>
            <tr>
                <td style="text-align: right;">@Model.GetAnswer("PermanentAddressLine1") @Model.GetAnswer("PermanentAddressLine2") @Model.GetAnswer("PermanentAddressLine3")</td>
            </tr>
            <tr>
                <td style="text-align: right;">@Model.GetAnswer("PermanentPostalCode") @Model.GetAnswer("PermanentCity")</td>
            </tr>
        </table>


        <p style="font-family:Verdana; font-size:10px;"><strong>Appendixes</strong></p><br/>
        <p style="font-family:Verdana; font-size:10px;">
            Between IKEA B.V., hereinafter referred to as the Employer, and
        </p>
     
        
       
        <p style="text-align: justify;font-family:Verdana; font-size:10px;">  

                1. <br/>
                As from @Model.GetAnswer("ContractStartDate"), the Employee enters employment with the Employer
                <br />
               
        </p>

        <p style="font-family:Verdana; font-size:9px;">
            <br />
        </p>
        <p style="text-align:justify;font-family:Verdana; font-size:10px;">
           2.<br/>
            The Employee is appointed in the job role of @Model.GetAnswer("JobTitle") at @Model.GetAnswer("BusinessUnit"). The scale of this position is "JOBSCALE".
            The above job is specific to the store @Model.GetAnswer("BusinessUnit") and is out of scope of the job structure of IKEA B.V. At the moment the VAPS construction of IKEA @Model.GetAnswer("BusinessUnit") expires and IKEA @Model.GetAnswer("BusinessUnit") is a regular store again, this will have consequences for this job. Together with you we will arrange another job associated with the job structure of IKEA B.V.
        </p>

        <p style="text-align:justify; font-family:Verdana; font-size:10px;">
            @if(Model.GetAnswer("ContractType") == "Full time")
            {
                <text>
                3.<br/>
                This Contract of Employment is entered into for a definite period of time: @Model.GetAnswer("ContractStartDate") - @Model.GetAnswer("ContractEndDate"). This contract legally ends at the end of the agreed period, without requiring any notice is required.

                </text>
            }        
        </p>
        
        <p style="text-align:justify; font-family:Verdana; font-size:10px;">
            @if(Model.GetAnswer("ContractType") == "Permanent")
            {
                <text>
                    3.<br/>
                    This Contract of Employment is entered into for an indefinite period of time. 
                </text>
            }        
        </p>
        <p style="text-align:justify;font-family:Verdana; font-size:10px;">
            
            4.<br/>
            Either party may terminate this Contract of Employment in the meantime by observing the statutory legal notice period. 
               
        </p>
        <p style="text-align:justify;font-family:Verdana; font-size:10px;">
           5.<br/>
            The Employee's employment with the Employer will lawfully cease in any case when the Employee reaches pensionable age. 
        </p>
        
        <p style="text-align:justify;font-family:Verdana; font-size:10px;">
            6.<br/>
            The first two month's of employment will serve as a probation period. During this trial period, either party may give notice and terminate the employment with immediate effect. 
        </p>
        
        <p style="text-align:justify;font-family:Verdana; font-size:10px;">
           7.<br/>
            This is a @Model.GetAnswer("FullTime/PartTime") Contract of Employment. The average number of working hours per week will be @Model.GetAnswer("WorkingHours") hours.
            The employee belongs to the category @Model.GetAnswer("EmployeeSubGroup").
            The employee is flexible to be scheduled during weekdays, Saturdays, Sundays and public holidays according to the IKEA CLA in time and hours and declares expressly agree.
        </p>   
        
        


        <div>
        <p style=" text-align: center; font-family: Verdana; font-size: 10px;">
            <br /> 
        </p>
        <p style="text-align: right; font-family: Verdana; font-size: 13px;">
            <strong>@Model.GetAnswer("Prefix") @Model.GetAnswer("EmployeeFirstName") @Model.GetAnswer("EmployeeLastName")</strong><br />
        </p>
        <p style="text-align: center; font-family: Verdana; font-size: 10px;">
            <br />
        </p>
        <p style="text-align: center; font-family: Verdana; font-size: 10px;">
            <br />
        </p>
        <p style="text-align: center; font-family: Verdana; font-size: 13px;"><strong>Addendum to Contract of Employment</strong></p>
        <p style="text-align: center; font-family: Verdana; font-size: 10px;">
            <br />
        </p>
        <p style=" text-align:justify; font-family: Verdana; font-size: 10px;">
            @if (Model.GetAnswer("ContractType") == "Replacement contract")
            {
                if (string.IsNullOrEmpty(Model.GetAnswer("EndDate")))
                {
                  <text>
                  As of <strong>@Model.GetAnswer("EffectiveDate") </strong> the following changes are introduced to the 
                      <strong> @Model.GetAnswer("ContractType") </strong> 
                  </text>
                       if (string.IsNullOrEmpty(Model.GetAnswer("AppendixConcludedOn"))) 
                       {
                           <text>
                           concluded on ..........................
                           </text>
                       }
                      else 
                      { 
                           <text>
                           concluded on @Model.GetAnswer("AppendixConcludedOn")
                           </text>
                           
                       }
               
                }
            }
             @if (Model.GetAnswer("ContractType") == "Replacement contract")
            {
                if (!string.IsNullOrEmpty(Model.GetAnswer("EndDate")))
                {
                  <text>
                  As of <strong>@Model.GetAnswer("EffectiveDate")</strong> until <strong>@Model.GetAnswer("EndDate")</strong> the following changes are introduced to the 
                      <strong> @Model.GetAnswer("ContractType") </strong> 
                  </text>
                       if (string.IsNullOrEmpty(Model.GetAnswer("AppendixConcludedOn"))) 
                       {
                           <text>
                           concluded on ..........................
                           </text>
                       }
                      else 
                      { 
                           <text>
                           concluded on @Model.GetAnswer("AppendixConcludedOn").
                           </text>
                           
                       }
               
                }
            }
            @if (Model.GetAnswer("ContractType") != "Replacement contract") 
            {
                if (string.IsNullOrEmpty(Model.GetAnswer("EndDate")))
                {
                  <text>
                  As of <strong>@Model.GetAnswer("EffectiveDate") </strong>the following changes are introduced to the Contract of Employment concluded for <strong>@Model.GetAnswer("ContractType") </strong>on 
                   </text>
                 if (string.IsNullOrEmpty(Model.GetAnswer("AppendixConcludedOn"))) 
                       {
                           <text>
                           ..........................
                           </text>
                       }
                      else 
                      { 
                           <text>
                           @Model.GetAnswer("AppendixConcludedOn").
                           </text>
                           
                       }
                }
                
             }
             @if (Model.GetAnswer("ContractType") != "Replacement contract") 
            {
               
                if (!string.IsNullOrEmpty(Model.GetAnswer("EndDate")))
                {
                   <text>
                   As of <strong>@Model.GetAnswer("EffectiveDate")</strong> until <strong>@Model.GetAnswer("EndDate") </strong> 
                   the following changes are introduced to the Contract of Employment concluded for <strong>@Model.GetAnswer("ContractType") </strong>on
                   </text>
                    if (string.IsNullOrEmpty(Model.GetAnswer("AppendixConcludedOn"))) 
                       {
                           <text>
                           ..........................
                           </text>
                       }
                      else 
                      { 
                           <text>
                           @Model.GetAnswer("AppendixConcludedOn").
                           </text>
                           
                       } 
                }
            }

        </p>
        
        <p style="text-align: center; font-family: Verdana; font-size: 10px;">
           <br />
        </p>

            <p style="text-align: center; font-family: Verdana; font-size: 10px; color:red;">
                
           @Model.GetAnswer("DataChangeSelection")
                </p>


        @{
            var list = new List<string>();

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("4"))
            {
                list.Add("Employee Job Title changes to <strong> " + Model.GetAnswer("JobTitle") + "</strong>.");

            }

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("5") && Model.GetAnswer("Extent") != "Part time")
            {
                list.Add("Working load is agreed as <strong> " + Model.GetAnswer("Extent") + "</strong>.");
            }    
   
            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("5") && Model.GetAnswer("Extent") == "Part time")
            {
                list.Add( "Working load is agreed as <strong> " + Model.GetAnswer("Extent") + "</strong>.  " + " Workload percentage is <strong> " + Model.GetAnswer("Workload") + " % </strong>.");
                list.Add( "Work exceeding the standard working time, specified in the Employee contract (considered as an overtime work and entitled to an additional compensation - art. 151<sup>1</sup> § 1 Labour Code) is above " + "<strong>39 hours </strong>" + " per week.");
            }

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("7") && Model.GetAnswer("MonthlyHourly") == "monthly" 
                && !string.IsNullOrEmpty(Model.GetAnswer("BasicPayInWords")))
            {
                list.Add("Employee will receive a<strong> " + Model.GetAnswer("MonthlyHourly") + " </strong>gross salary of PLN <strong>" +
                    Model.GetAnswer("BasicPay") + "</strong>" + " (in words: " + Model.GetAnswer("BasicPayInWords") + ").<br />" ); 
            }
            
           if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("7") && Model.GetAnswer("MonthlyHourly") == "monthly" &&
               string.IsNullOrEmpty(Model.GetAnswer("BasicPayInWords")) && Model.Contract.Company.Key == "OI") 
                    {
                    
                         list.Add("Employee will receive a<strong> " + Model.GetAnswer("MonthlyHourly") + " </strong>gross salary of PLN <strong>" +
                         Model.GetAnswer("BasicPay") + "</strong> <br/>" + "(in words: .......................................................................................................).<br />");                 
                     }
                     
            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("7") && Model.GetAnswer("MonthlyHourly") == "monthly" &&
             string.IsNullOrEmpty(Model.GetAnswer("BasicPayInWords")) && Model.Contract.Company.Key != "OI") 
                     {

                         list.Add("Employee will receive a<strong> " + Model.GetAnswer("MonthlyHourly") + " </strong>gross salary of PLN <strong>" +
                              Model.GetAnswer("BasicPay") + "</strong> <br/>" + "(in words: .........................................................................................................................).<br />");                                     
                     }  
                   

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("7") && Model.GetAnswer("MonthlyHourly") == "hourly"
                && !string.IsNullOrEmpty(Model.GetAnswer("BasicPayInWords")) )
            {
                list.Add("Employee will receive a<strong> " + Model.GetAnswer("MonthlyHourly") + " </strong> gross salary of PLN <strong>" + Model.GetAnswer("BasicPay") +
                          " per hour</strong> "+ " (in words:" + Model.GetAnswer("BasicPayInWords")+").<br />");
            }
            
            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("7") && Model.GetAnswer("MonthlyHourly") == "hourly"
                 && string.IsNullOrEmpty(Model.GetAnswer("BasicPayInWords")) && Model.Contract.Company.Key == "OI")
                {
                    list.Add("Employee will receive a<strong> " + Model.GetAnswer("MonthlyHourly") + " </strong> gross salary of PLN <strong>" + Model.GetAnswer("BasicPay") +
                         " per hour</strong> <br/>" + "(in words: .......................................................................................................).<br />");                 
                }
                
            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("7") && Model.GetAnswer("MonthlyHourly") == "hourly"
                && string.IsNullOrEmpty(Model.GetAnswer("BasicPayInWords")) && Model.Contract.Company.Key != "OI")
                     {
                         list.Add("Employee will receive a<strong> " + Model.GetAnswer("MonthlyHourly") + " </strong> gross salary of PLN <strong>" + Model.GetAnswer("BasicPay") +
                                  " per hour</strong> <br/>" + "(in words: .........................................................................................................................).<br />");                 
                     }

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("1") && string.IsNullOrEmpty(Model.GetAnswer("AdditionalPlaceOfWork")))
            {
                list.Add("Place of Work will be <strong>" +  Model.GetOptionText("EmployeeUnit", Model.GetAnswer("EmployeeUnit")) + "</strong>.");
            }

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("1") && !string.IsNullOrEmpty(Model.GetAnswer("AdditionalPlaceOfWork")))
            {
                list.Add("Place of Work will be <strong>" + Model.GetOptionText("EmployeeUnit", Model.GetAnswer("EmployeeUnit")) + "</strong>" + " and <strong>" + Model.GetAnswer("AdditionalPlaceOfWork") + "</strong>.");
            }

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("8") 
                && Model.GetAnswer("FunctionAllowance") == "1045 - Functional supplement" && Model.Contract.Company.Key == "OI") 
            {
                list.Add("Employee will receive a monthly gross Function allowance of <strong> PLN " + Model.GetAnswer("FunctionAllowanceAmount") + " </strong>.<br />"
                          + "(in words: .......................................................................................................).<br />");
            }

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("8")
                && Model.GetAnswer("FunctionAllowance") == "1045 - Functional supplement" && Model.Contract.Company.Key != "OI")
            {
                list.Add("Employee will receive a monthly gross Function allowance of <strong> PLN " + Model.GetAnswer("FunctionAllowanceAmount") + " </strong>.<br />"
                          + "(in words: .........................................................................................................................).<br />");
            }            
            
            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("8")
                && Model.GetAnswer("FunctionAllowance2") == "1045 - Functional supplement" && Model.Contract.Company.Key == "OI")
            {
                list.Add("Employee will receive a monthly gross Function allowance of <strong> PLN " + Model.GetAnswer("FunctionAllowanceAmount2") + " </strong>.<br />"
                          + "(in words: .......................................................................................................).<br />");
            }

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("8")
                && Model.GetAnswer("FunctionAllowance2") == "1045 - Functional supplement" && Model.Contract.Company.Key != "OI")
            {
                list.Add("Employee will receive a monthly gross Function allowance of <strong> PLN " + Model.GetAnswer("FunctionAllowanceAmount2") + " </strong>.<br />"
                          + "(in words: .........................................................................................................................).<br />");
            }         

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("8")
              && Model.GetAnswer("FunctionAllowance3") == "1045 - Functional supplement" && Model.Contract.Company.Key == "OI")
            {
                list.Add("Employee will receive a monthly gross Function allowance of <strong> PLN " + Model.GetAnswer("FunctionAllowanceAmount3") + " </strong>.<br />"
                          + "(in words: .......................................................................................................).<br />");
            }

            if (Model.GetAnswer("DataChangeSelection").Split(',').Contains("8")
                 && Model.GetAnswer("FunctionAllowance3") == "1045 - Functional supplement" && Model.Contract.Company.Key != "OI")
            {
                list.Add("Employee will receive a monthly gross Function allowance of <strong> PLN " + Model.GetAnswer("FunctionAllowanceAmount3") + " </strong>.<br />"
                          + "(in words: .........................................................................................................................).<br />");
            }
 
        }

        @if (list.Count>1)
      	{
          for (int i = 0; i < list.Count; i++)
          {
            <p style=" text-align:justify; font-family: Verdana; font-size: 10px;">@(i+1) ) @Html.Raw(list[i])</p>
          }
	    }  
        else
         { for (int i = 0; i == list.Count-1; i++)
          {
	        <p style="font-family: Verdana; font-size: 10px;">@Html.Raw(list[i])</p>
	      }     
         }
        <p style="text-align: center; font-family: Verdana; font-size: 10px;">
            <br />
        </p>
        <p style="text-align:justify; font-family: Verdana; font-size: 10px;">
            The remaining working conditions stay unchanged.
        </p>
        <p style="text-align: center; font-family: Verdana; font-size: 10px;">
            <br />
        </p>
        <p style=" text-align:justify; font-family: Verdana; font-size: 10px;">
            The Employee certifies to have received a copy of this Addendum and after familiarising with its content – accepts working conditions mentioned above.  
        </p>        
    </div>
        
                                                        
        <endpage/>
    </div>
    

</body>
</html>

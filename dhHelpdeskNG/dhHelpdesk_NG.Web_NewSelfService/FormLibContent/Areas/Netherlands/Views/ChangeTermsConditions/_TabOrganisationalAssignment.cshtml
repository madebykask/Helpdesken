@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

@{
    var fillOldVal = TempData["oldValues"];
    var newfill = (List<KeyValuePair<string, string>>)fillOldVal;
}

<div class="tab-pane" id="OrganisationalAssignment">
    <div class="span8">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Organisation")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("OrganisationCountry")</td>
                    <td>@Model.Element("OrganisationCountry")</td>
                    @*<td>
                        <input type="hidden" class="oldValue"  id="OLD_OrganisationCountry" name="OLD_OrganisationCountry" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_OrganisationCountry").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_OrganisationCountry">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_OrganisationCountry").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>*@
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("Company")</td>
                    <td>@Model.Element("Company")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_Company" name="OLD_Company" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_Company").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_Company">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_Company").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewBusinessUnit")</td>
                    <td>@Model.Element("NewBusinessUnit")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_NewBusinessUnit" name="OLD_NewBusinessUnit" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewBusinessUnit").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewBusinessUnit">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewBusinessUnit").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>

                <tr>
                    <td class="tdstrong">@Model.Label("NewDepartment")</td>
                    <td>@Model.Element("NewDepartment")</td>
                    <td>
                         <input type="hidden" class="oldValue"  id="OLD_NewDepartment" name="OLD_NewDepartment" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewDepartment").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewDepartment">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewDepartment").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ServiceArea")</td>
                    <td>@Model.Element("ServiceArea")</td>
                    <td>
                         <input type="hidden" class="oldValue"  id="OLD_ServiceArea" name="OLD_ServiceArea" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ServiceArea").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_ServiceArea">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ServiceArea").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("HomeCostCentre")</td>
                    <td>@Model.Element("HomeCostCentre")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_HomeCostCentre" name="OLD_HomeCostCentre" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_HomeCostCentre").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_HomeCostCentre">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_HomeCostCentre").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CostAllocation")</td>
                    <td>@Model.Element("CostAllocation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CrossChargeCostCentre")</td>
                    <td>@Model.Element("CrossChargeCostCentre")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_CrossChargeCostCentre" name="OLD_CrossChargeCostCentre" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CrossChargeCostCentre").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_CrossChargeCostCentre">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CrossChargeCostCentre").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Job")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("JobTitle")</td>
                    <td>@Model.Element("JobTitle")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_JobTitle" name="OLD_JobTitle" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_JobTitle").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_JobTitle">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_JobTitle").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LocalJobTitle")</td>
                    <td>@Model.Element("LocalJobTitle")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_LocalJobTitle" name="OLD_LocalJobTitle" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_LocalJobTitle").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_LocalJobTitle">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_LocalJobTitle").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewPosition")</td>
                    <td>@Model.Element("NewPosition")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ReportsToLineManager")</td>
                    <td>@Model.Element("ReportsToLineManager")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_ReportsToLineManager" name="OLD_ReportsToLineManager" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ReportsToLineManager").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_ReportsToLineManager">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ReportsToLineManager").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("EligibleForManagementAllowance")</td>
                    <td>@Model.Element("EligibleForManagementAllowance")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Employment Conditions")</h4>
                    </td>
                    <td class="tdstrong">
                        <h4>@Model.Translate("Current record")</h4>
                    </td> 
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("EmploymentCategory")</td>
                    <td>@Model.Element("EmploymentCategory")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_EmploymentCategory" name="OLD_EmploymentCategory" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_EmploymentCategory").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_EmploymentCategory">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_EmploymentCategory").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractEndDate")</td>
                    <td>@Model.Element("ContractEndDate")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ResidencePermitRestriction")</td>
                    <td>@Model.Element("ResidencePermitRestriction")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractedHours")</td>
                    <td>@Model.Element("ContractedHours")</td>  
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_ContractedHours" name="OLD_ContractedHours" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ContractedHours").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_ContractedHours">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ContractedHours").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>                  
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PreviousContractHours")</td>
                    <td>@Model.Element("PreviousContractHours")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_PreviousContractHours" name="OLD_PreviousContractHours" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_PreviousContractHours").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_PreviousContractHours">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_PreviousContractHours").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractType")</td>
                    <td>@Model.Element("ContractType")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ProbationPeriod")</td>
                    <td>@Model.Element("ProbationPeriod")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ProbationEndDate")</td>
                    <td>@Model.Element("ProbationEndDate")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("CDS")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PrimarySite")</td>
                    <td>@Model.Element("PrimarySite")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TECApprover")</td>
                    <td>@Model.Element("TECApprover")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("HelpDesk")</td>
                    <td>@Model.Element("HelpDesk")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Apprentice education")</h4>
                    </td>
                </tr>                
                <tr>
                    <td class="tdstrong">@Model.Label("NameOfSchool")</td>
                    <td>@Model.Element("NameOfSchool")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NameOfEducation")</td>
                    <td>@Model.Element("NameOfEducation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CityEducationSchool")</td>
                    <td>@Model.Element("CityEducationSchool")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LevelOfEducation")</td>
                    <td>@Model.Element("LevelOfEducation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("MentorAtIKEA")</td>
                    <td>@Model.Element("MentorAtIKEA")</td>
                </tr>
            </tbody>
        </table>
    </div>

</div>

<script>

    function selectIndexChangeProbationPeriod() {
        
        var probitionEndDate = document.getElementById('ProbationEndDate');
        if (this.options[this.selectedIndex].value == 'No') {
            probitionEndDate.disabled = true;
            probitionEndDate.className = probitionEndDate.className + " disabled";
        } else {
            probitionEndDate.disabled = false;
            $(probitionEndDate).removeClass("disabled");

            var validFrom = document.getElementById('ChangeValidFrom');
            var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
            var date = APIGlobal.DateTime.parseDate(validFrom.value, format);
            date.setMonth(date.getMonth() + 2);

            probitionEndDate.value = APIGlobal.DateTime.formatDate(date, format);
        }
    }
    document.getElementById('ProbationPeriod').onchange = selectIndexChangeProbationPeriod;

    function selectIndexChangeEmploymentCategory() {
        if (this.options[this.selectedIndex].value == 'Permanent') {
            $('#date_ContractEndDate').datepicker("destroy");
            $('#date_ContractEndDate').addClass("disabled");
            document.getElementById("ContractEndDate").disabled = true;
            document.getElementById("date_ContractEndDate").className = document.getElementById("date_ContractEndDate").className + " disabled";

        }
        else {
            document.getElementById('ContractEndDate').disabled = false;
            $("#ContractEndDate").removeClass("disabled");
        }
    }
    document.getElementById('EmploymentCategory').onchange = selectIndexChangeEmploymentCategory;




        if (document.getElementById('EmploymentCategory').value == 'Permanent') {
            document.getElementById('ContractEndDate').disabled = true;
        }

        function selectIndexChangeLineManagertoTECApprover() {
            document.getElementById('TECApprover').value = document.getElementById('ReportsToLineManager').value;
        }
        document.getElementById('ReportsToLineManager').onchange = selectIndexChangeLineManagertoTECApprover;


        function selectIndexChangeBusinessUnittoPrimarySite() {

            document.getElementById('PrimarySite').value = document.getElementById('NewBusinessUnit').value;

        }
        document.getElementById('NewBusinessUnit').onchange = selectIndexChangeBusinessUnittoPrimarySite;

</script>

@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

<div class="tab-pane" id="Payment">
    <div class="span5">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Basic pay")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayrollCategory")</td>
                    <td>
                        @Model.Element("PayrollCategory")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayrollCategoryOldData")</td>
                    <td>
                        @Model.Element("PayrollCategoryOldData")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BasicPayAmount")</td>
                    <td>
                        @Model.Element("BasicPayAmount")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayScaleType")</td>
                    <td>
                        @Model.Element("PayScaleType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayScaleLevel")</td>
                    <td>
                        @Model.Element("PayScaleLevel")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BasicPay")</td>
                    <td>
                        @Model.Element("BasicPay")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BasicPayChangeReason")</td>
                    <td>
                        @Model.Element("BasicPayChangeReason")
                    </td>
                </tr>

                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Allowances")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesType")</td>
                    <td>
                        @Model.Element("AllowancesType")
                        <div id="notice_AllowancesType" style="display:none;" class="notice">
                            @Model.Translate("The BHV allowance is calculated according to CLA article 28")
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesPaymentType")</td>
                    <td>
                        @Model.Element("AllowancesPaymentType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesAmountUnits")</td>
                    <td>
                        @Model.Element("AllowancesAmountUnits")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesNetGross")</td>
                    <td>
                        @Model.Element("AllowancesNetGross")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidFrom")</td>
                    <td>
                        @Model.Element("AllowancesValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidTo")</td>
                    <td>
                        @Model.Element("AllowancesValidTo")
                    </td>
                </tr>
                
                @for(int i = 2; i <= 3; i++)
                {
                    <tr class="allowance@(i.ToString())" id="allowance@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Allowances") @(i.ToString())</h4>
                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesType" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesPaymentType" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesNetGross" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addAllowanceTr">
                    <td colspan="2">
                        @Model.Element("Allowances")
                        <a id="addAllowance" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Allowance")</a></td>
                </tr>

            </tbody>
        </table>
    </div>
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Deductions")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsType")</td>
                    <td>
                        @Model.Element("DeductionsType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsPaymentType")</td>
                    <td>
                        @Model.Element("DeductionsPaymentType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsAmountUnits")</td>
                    <td>
                        @Model.Element("DeductionsAmountUnits")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsNetGross")</td>
                    <td>
                        @Model.Element("DeductionsNetGross")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidFrom")</td>
                    <td>
                        @Model.Element("DeductionsValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidTo")</td>
                    <td>
                        @Model.Element("DeductionsValidTo")
                    </td>
                </tr>
                
                 @for(int i = 2; i <= 3; i++)
                {
                    <tr class="deduction@(i.ToString())" id="deduction@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Deductions") @(i.ToString())</h4>
                        </td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsType" + i.ToString())</td>
                    </tr>
                     <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsPaymentType" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsNetGross" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addDeductionTr">
                    <td colspan="2">
                        @Model.Element("Deductions")
                        <a id="addDeduction" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Deduction")</a></td>
                </tr>
               
                

                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Bonus Eligibility")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("OneIKEABonusLevel")</td>
                    <td>
                        @Model.Element("OneIKEABonusLevel")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CLAIncrease")</td>
                    <td>
                        @Model.Element("CLAIncrease")
                    </td>
                </tr>


                 <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Benefits:")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TypeOfBenefit")</td>
                    <td>
                        @Model.Element("TypeOfBenefit")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("Category")</td>
                    <td>
                        @Model.Element("Category")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TypeOfCar")</td>
                    <td>
                        @Model.Element("TypeOfCar")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("MonthlyAmount")</td>
                    <td>
                        @Model.Element("MonthlyAmount")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NextRevisionDate")</td>
                    <td>
                        @Model.Element("NextRevisionDate")
                    </td>
                </tr>


                @for(int i = 2; i <= 3; i++)
                {
                    <tr class="benefits@(i.ToString())" id="benefits@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Benefits") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("TypeOfBenefit" + i.ToString())</td>
                        <td>
                            @Model.Element("TypeOfBenefit" + i.ToString())</td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("Category" + i.ToString())</td>
                        <td>
                            @Model.Element("Category" + i.ToString())</td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("TypeOfCar" + i.ToString())</td>
                        <td>
                            @Model.Element("TypeOfCar" + i.ToString())</td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("MonthlyAmount" + i.ToString())</td>
                        <td>
                            @Model.Element("MonthlyAmount" + i.ToString())</td>
                    </tr>
                    <tr class="benefits@(i.ToString())">
                        <td class="tdstrong">@Model.Label("NextRevisionDate" + i.ToString())</td>
                        <td>
                            @Model.Element("NextRevisionDate" + i.ToString())</td>
                    </tr>
                }
                <tr id="addBenefitsTr">
                    <td colspan="2">
                        @Model.Element("Benefits")
                        <a id="addBenefit" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another benefit")</a></td>
                </tr>   

             </tbody>
        </table>
    </div>
</div>

<script>
    if (!document.getElementById('AllowancesValidFrom').value == '') {
        document.getElementById('AllowancesValidFrom').value = document.getElementById('ChangeValidFrom').value;
    }
    if (!document.getElementById('DeductionsValidFrom').value == '') {
        document.getElementById('DeductionsValidFrom').value = document.getElementById('ChangeValidFrom').value;
    }
    

    for (var i = 2; i <= 3; i++) {
        //Defaults variables to ChangeValidFrom
        var AllowancesValidFrom = "AllowancesValidFrom" + [i].toString();
        var DeductionsValidFrom = "DeductionsValidFrom" + [i].toString();
        if (!document.getElementById(AllowancesValidFrom).value == '') {
            document.getElementById(AllowancesValidFrom).value = document.getElementById('ChangeValidFrom').value;
        }
        if (!document.getElementById(DeductionsValidFrom).value == '') {
            document.getElementById(DeductionsValidFrom).value = document.getElementById('ChangeValidFrom').value;
        }
    }


    // Show notice if allowancestype comp.serv.allowance
    function selectIndexChangeAllowancesType() {
        if (this.options[this.selectedIndex].value == 'Comp.Serv.Allowance') {

            document.getElementById('notice_AllowancesType').style.display = "block";
        }
        else {
            document.getElementById('notice_AllowancesType').style.display = "none";
        }
    }
    document.getElementById('AllowancesType').onchange = selectIndexChangeAllowancesType;

    // allowance and deduction datepickers
    var employmentCategory = document.getElementById('EmploymentCategory').value;
    var sEnd = document.getElementById('ContractEndDate');

    $('#AllowancesPaymentType').change(function () {
        var allowancesValidTo = document.getElementById('AllowancesValidTo');
        var input = $('#AllowancesValidTo');
        if ($(this).val() == 'One Time') {
            allowancesValidTo.value = "";
            $('#date_AllowancesValidTo').datepicker("destroy");
            $('#date_AllowancesValidTo').addClass("disabled");
            input.attr('readonly', 'readonly');
        } else {
            $('#date_AllowancesValidTo').removeClass("disabled");
            input.removeAttr('readonly', 'readonly');
            if (employmentCategory == 'Temporary')
                allowancesValidTo.value = sEnd.value;
            else
                allowancesValidTo.value = '31.12.9999';
        }

    });

    $('#AllowancesPaymentType').change();

    var startDate = $('#ChangeValidFrom').val();
    var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
    var dStart = APIGlobal.DateTime.parseDate(startDate, format);
    var forcePicker = new Date(dStart.getFullYear(), dStart.getMonth(), dStart.getDate(), 0, 0, 0, 0);
    $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,' +
        '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3').not(".disabled").datepicker(
    {
        onRender: function (ev) {
            return ev.valueOf() < forcePicker.valueOf() ? 'disabled' : '';
        }
    });


    $('#AllowancesPaymentType2').change(function () {
        var allowancesValidTo2 = document.getElementById('AllowancesValidTo2');
        var input = $('#AllowancesValidTo2');
        if ($(this).val() == 'One Time') {
            allowancesValidTo2.value = "";
            $('#date_AllowancesValidTo2').datepicker("destroy");
            $('#date_AllowancesValidTo2').addClass("disabled");
            input.attr('readonly', 'readony');
        } else {
            $('#date_AllowancesValidTo2').removeClass("disabled");
            input.removeAttr('readonly');
            if (employmentCategory == 'Temporary')
                allowancesValidTo2.value = sEnd.value;
            else
                allowancesValidTo2.value = '31.12.9999';

        }

    });


    $('#AllowancesPaymentType3').change(function () {
        var allowancesValidTo3 = document.getElementById('AllowancesValidTo3');

        var input = $('#AllowancesValidTo3');
        if ($(this).val() == 'One Time') {
            allowancesValidTo3.value = "";
            $('#date_AllowancesValidTo3').datepicker("destroy");
            $('#date_AllowancesValidTo3').addClass("disabled");
            input.attr('readonly', 'readony');
        } else {
            $('#date_AllowancesValidTo3').removeClass("disabled");
            input.removeAttr('readonly');
            if (employmentCategory == 'Temporary')
                allowancesValidTo3.value = sEnd.value;
            else
                allowancesValidTo3.value = '31.12.9999';
        }

    });


    $('#DeductionsPaymentType').change(function () {
        var deductionsValidTo = document.getElementById('DeductionsValidTo');

        var input = $('#DeductionsValidTo');
        if ($(this).val() == 'One Time') {
            deductionsValidTo.value = "";
            $('#date_DeductionsValidTo').datepicker("destroy");
            $('#date_DeductionsValidTo').addClass("disabled");
            input.attr('readonly', 'readony');

        } else {
            $('#date_DeductionsValidTo').removeClass("disabled");
            input.removeAttr('readonly');
            if (employmentCategory == 'Temporary')
                deductionsValidTo.value = sEnd.value;
            else
                deductionsValidTo.value = '31.12.9999';
        }

    });


    $('#DeductionsPaymentType2').change(function () {
        var deductionsValidTo2 = document.getElementById('DeductionsValidTo2');

        var input = $('#DeductionsValidTo2');
        if ($(this).val() == 'One Time') {
            deductionsValidTo2.value = "";
            $('#date_DeductionsValidTo2').datepicker("destroy");
            $('#date_DeductionsValidTo2').addClass("disabled");
            input.attr('readonly', 'readony');
        } else {
            $('#date_DeductionsValidTo2').removeClass("disabled");
            input.removeAttr('readonly');
            if (employmentCategory == 'Temporary')
                deductionsValidTo2.value = sEnd.value;
            else
                deductionsValidTo2.value = '31.12.9999';
        }

    });


    $('#DeductionsPaymentType3').change(function () {
        var deductionsValidTo3 = document.getElementById('DeductionsValidTo3');

        var input = $('#DeductionsValidTo3');
        if ($(this).val() == 'One Time') {
            deductionsValidTo3.value = "";
            $('#date_DeductionsValidTo3').datepicker("destroy");
            $('#date_DeductionsValidTo3').addClass("disabled");
            input.attr('readonly', 'readony');
        } else {
            $('#date_DeductionsValidTo3').removeClass("disabled");
            input.removeAttr('readonly');
            if (employmentCategory == 'Temporary')
                deductionsValidTo3.value = sEnd.value;
            else
                deductionsValidTo3.value = '31.12.9999';
        }

    });




    //Next revisiondate


            var nowTemp = new Date();
            var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);

            $('#date_NextRevisionDate').not(".disabled").datepicker(
            {
                onRender: function (ev) {
                    return ev.valueOf() <= now.valueOf() ? 'disabled' : '';
                }
            });

            $("#date_NextRevisionDate").on("keydown keypress keyup", false);
        
        
            document.getElementById('NextRevisionDate').onkeypress = function () { return true; }

            $('#date_NextRevisionDate2').not(".disabled").datepicker(
            {
                onRender: function (ev) {
                    return ev.valueOf() <= now.valueOf() ? 'disabled' : '';
                }
            });

            $("#date_NextRevisionDate2").on("keydown keypress keyup", false);
        
            document.getElementById('NextRevisionDate2').onkeypress = function () { return true; }





            $('#date_NextRevisionDate3').not(".disabled").datepicker(
            {
                onRender: function (ev) {
                    return ev.valueOf() <= now.valueOf() ? 'disabled' : '';
                }
            });

            $("#date_NextRevisionDate3").on("keydown keypress keyup", false);
            document.getElementById('NextRevisionDate3').onkeypress = function () { return true; }


    function SelectIndexChangePayScaleLevel() {
        if (document.getElementById('PayScaleLevel').value <= 12) {
            if (document.getElementById('JobTitle').value == 'IKEA FOOD Manager') {
                document.getElementById('CLAIncrease').selectedIndex = 2;
            }
            else {

                document.getElementById('CLAIncrease').selectedIndex = 1;
            }
        }
        if (document.getElementById('PayScaleLevel').value >= 13) {
            document.getElementById('CLAIncrease').selectedIndex = 2;
        }

    }
    document.getElementById('PayScaleLevel').onchange = SelectIndexChangePayScaleLevel;

</script>
@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

<div class="tab-pane" id="Absences">
    <div class="span5">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Absences")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AbsenceType")</td>
                    <td>
                        @Model.Element("AbsenceType")
                    </td>
                </tr>

                <tr>
                    <td class="tdstrong">@Model.Label("AbsenceStartFrom")</td>
                    <td>
                        @Model.Element("AbsenceStartFrom")
                        <div id="notice_OldDate" style="display: none;" class="notice">
                            @Model.Translate("The date you've entered is in the past. Are you sure you want to backdate Absence start from?")
                        </div>
                    </td>
                </tr>

                <tr>
                    <td class="tdstrong">@Model.Label("AbsenceEndsOn")</td>
                    <td>
                        @Model.Element("AbsenceEndsOn")
                        <div id="notice_futureDate" style="display: none;" class="notice">
                            @Model.Translate("Absence end date cannot be earlier than Absence start date.")
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AbsenceHours")</td>
                    <td>
                        @Model.Element("AbsenceHours")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AbsenceDays")</td>
                    <td>
                        @Model.Element("AbsenceDays")
                    </td>
                </tr>


                @for (int i = 2; i <= 4; i++)
                {
                    <tr class="absence@(i.ToString())" id="absence@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Absences") @(i.ToString())</h4>
                        </td>
                    </tr>
                    <tr class="absence@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AbsenceType" + i.ToString())</td>
                        <td>
                            @Model.Element("AbsenceType" + i.ToString())</td>
                    </tr>
                     
                    <tr class="absence@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AbsenceStartFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("AbsenceStartFrom" + i.ToString())
                            <div id="notice_OldDate@(i.ToString())" style="display: none;" class="notice">
                            @Model.Translate("The date you've entered is in the past. Are you sure you want to backdate Absence start from?")
                            </div>
                        </td>
                    </tr>
                    <tr class="absence@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AbsenceEndsOn" + i.ToString())</td>
                        <td>
                            @Model.Element("AbsenceEndsOn" + i.ToString())
                            <div id="notice_futureDate@(i.ToString())" style="display: none;" class="notice">
                            @Model.Translate("Absence end date cannot be earlier than Absence start date.")
                        </div>
                        </td>
                    </tr>
                    
                    <tr class="absence@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AbsenceHours" + i.ToString())</td>
                        <td>
                            @Model.Element("AbsenceHours" + i.ToString())</td>
                    </tr>  
                    <tr class="absence@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AbsenceDays" + i.ToString())</td>
                        <td>
                            @Model.Element("AbsenceDays" + i.ToString())</td>
                    </tr>  
                }


                <tr id="addAbsenceTr">
                    <td colspan="2">
                        @Model.Element("AbsencesMulti")
                        <a id="addAbsence" class="btn btn-link btn-mini pull-right">@Model.Translate("I want to add another Absence")</a></td>
                </tr>

                @* Country Specifics *@

                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Country Specifics")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ChildName")</td>
                    <td>
                        @Model.Element("ChildName")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ChildDateOfBirth")</td>
                    <td>
                        @Model.Element("ChildDateOfBirth")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AbsenceHoursWeekly")</td>
                    <td>
                        @Model.Element("AbsenceHoursWeekly")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("Totalparentalleaveentitlement")</td>
                    <td>
                        @Model.Element("Totalparentalleaveentitlement")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractedHoursOldData")</td>
                    <td>
                        @Model.Element("ContractedHoursOldData")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("MonthTfTheLeave")</td>
                    <td>
                        @Model.Element("MonthTfTheLeave")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AbsenceHoursAlreadyUsed")</td>
                    <td>
                        @Model.Element("AbsenceHoursAlreadyUsed")
                    </td>
                </tr>
                @*<tr>
                    <td class="tdstrong">@Model.Label("PreviousContractHours")</td>
                    <td>
                        @Model.Element("PreviousContractHours")
                    </td>
                </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("AbsenceLongerThan2Months")</td>
                    <td>
                        @Model.Element("AbsenceLongerThan2Months")
                    </td>
                </tr>

                @* CDS *@
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("CDS")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LockCDSAccount")</td>
                    <td>
                        @Model.Element("LockCDSAccount")
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

</div>

<script>
    //Absense date validity
    var oldNotice = $('#notice_OldDate');
    var futureNotice = $('#notice_futureDate');
    var nowTemp = new Date();
    var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);

    var start = $('#date_AbsenceStartFrom').not(".disabled").datepicker({
        onRender: function (date) {
            return ''; 
        }
    }).on('changeDate', function (ev) {

        oldNotice.hide();

       if (ev.date.valueOf() < now.valueOf())
            oldNotice.show();

        if (ev.date.valueOf() > end.date.valueOf()) {
            var newDate = new Date(ev.date);
            newDate.setDate(newDate.getDate() + 1);
            end.setValue(newDate);
            $('#AbsenceEndsOn').val('');
        }
        end.update();
        start.hide();
    }).data('datepicker');

    $('#AbsenceStartFrom').change(function () {
        var absenceStartFrom = $('#AbsenceStartFrom').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dabsenceStartFrom = APIGlobal.DateTime.parseDate(absenceStartFrom, format);
        oldNotice.hide();
        if (dabsenceStartFrom.valueOf() < now.valueOf())
            oldNotice.show();
    });

    var end = $('#date_AbsenceEndsOn').not(".disabled").datepicker({
        onRender: function (date) {
            return date.valueOf() <= start.date.valueOf() ? 'disabled' : '';
        }
    }).on('changeDate', function (ev) {
        
        end.hide();
    }).data('datepicker');

    $('#AbsenceEndsOn').change(function () {
        var absenceEndsOn = $('#AbsenceEndsOn').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dabsenceEndsOn = APIGlobal.DateTime.parseDate(absenceEndsOn, format);
        var absenceStartFrom = $('#AbsenceStartFrom').val();
        var dabsenceStartFrom = APIGlobal.DateTime.parseDate(absenceStartFrom, format);
        futureNotice.hide();
        if (dabsenceEndsOn.valueOf() < dabsenceStartFrom.valueOf())
            futureNotice.show();
    });

    // Absence 2 date validity
    var oldNotice2 = $('#notice_OldDate2');
    var futureNotice2 = $('#notice_futureDate2');
    var start2 = $('#date_AbsenceStartFrom2').not(".disabled").datepicker({
        onRender: function (date) {
            return '';
        }
    }).on('changeDate', function (ev) {

        oldNotice2.hide();

        if (ev.date.valueOf() < now.valueOf())
            oldNotice2.show();

        if (ev.date.valueOf() > end2.date.valueOf()) {
            var newDate = new Date(ev.date);
            newDate.setDate(newDate.getDate() + 1);
            end2.setValue(newDate);
            $('#AbsenceEndsOn2').val('');
        }
        end2.update();
        start.hide();
    }).data('datepicker');
    $('#AbsenceStartFrom2').change(function () {
        var absenceStartFrom = $('#AbsenceStartFrom2').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dabsenceStartFrom = APIGlobal.DateTime.parseDate(absenceStartFrom, format);
        oldNotice2.hide();
        if (dabsenceStartFrom.valueOf() < now.valueOf())
            oldNotice2.show();
    });

    var end2 = $('#date_AbsenceEndsOn2').not(".disabled").datepicker({
        onRender: function (date) {
            return date.valueOf() <= start2.date.valueOf() ? 'disabled' : '';
        }
    }).on('changeDate', function (ev) {

        end2.hide();
    }).data('datepicker');
    
    $('#AbsenceEndsOn2').change(function () {
        var absenceEndsOn = $('#AbsenceEndsOn2').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dabsenceEndsOn = APIGlobal.DateTime.parseDate(absenceEndsOn, format);
        var absenceStartFrom = $('#AbsenceStartFrom2').val();
        var dabsenceStartFrom = APIGlobal.DateTime.parseDate(absenceStartFrom, format);
        futureNotice2.hide();
        if (dabsenceEndsOn.valueOf() < dabsenceStartFrom.valueOf())
            futureNotice2.show();
    });

    // Absence 3 date validity
    var oldNotice3 = $('#notice_OldDate3');
    var futureNotice3 = $('#notice_futureDate3');
    var start3 = $('#date_AbsenceStartFrom3').not(".disabled").datepicker({
        onRender: function (date) {
            return '';
        }
    }).on('changeDate', function (ev) {

        oldNotice3.hide();

        if (ev.date.valueOf() < now.valueOf())
            oldNotice3.show();

        if (ev.date.valueOf() > end3.date.valueOf()) {
            var newDate = new Date(ev.date);
            newDate.setDate(newDate.getDate() + 1);
            end3.setValue(newDate);
            $('#AbsenceEndsOn3').val('');
        }
        end2.update();
        start.hide();
    }).data('datepicker');
    $('#AbsenceStartFrom3').change(function () {
        var absenceStartFrom = $('#AbsenceStartFrom3').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dabsenceStartFrom = APIGlobal.DateTime.parseDate(absenceStartFrom, format);
        oldNotice3.hide();
        if (dabsenceStartFrom.valueOf() < now.valueOf())
            oldNotice3.show();
    });

    var end3 = $('#date_AbsenceEndsOn3').not(".disabled").datepicker({
        onRender: function (date) {
            return date.valueOf() <= start3.date.valueOf() ? 'disabled' : '';
        }
    }).on('changeDate', function (ev) {

        end3.hide();
    }).data('datepicker');
    $('#AbsenceEndsOn3').change(function () {
        var absenceEndsOn = $('#AbsenceEndsOn3').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dabsenceEndsOn = APIGlobal.DateTime.parseDate(absenceEndsOn, format);
        var absenceStartFrom = $('#AbsenceStartFrom3').val();
        var dabsenceStartFrom = APIGlobal.DateTime.parseDate(absenceStartFrom, format);
        futureNotice3.hide();
        if (dabsenceEndsOn.valueOf() < dabsenceStartFrom.valueOf())
            futureNotice3.show();
    });

</script>

@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
@functions{
    public string GetContract(string absenceNr)
    {

        if (Model.GetDocumentAnswer("BusinessUnit").ToLower() == "IKEA Competence B.V.".ToLower())
        {
            return "";   
        }
        
        string absenceType = Model.GetDocumentAnswer("AbsenceType" + absenceNr).Trim().ToLower();

        switch (absenceType)
        {
            case "parental leave":
                return "ParentalLeave";

            case "short term care leave (paid leave)":
                return "ShortTermCareLeave";

            case "unpaid leave":
                return "UnpaidLeave";

            case "long term care leave (unpaid)":
                return "UnpaidLeave";
            case "emergency leave":
                return "EmergencyLeave";
            default:
                return "";
        }
    }
}
<div class="tab-pane" id="documents">
    <div class="span12"> 
        @if (!string.IsNullOrEmpty(GetContract("")))
        {
            <table class="table-striped">
                <thead>
                    <tr>
                        <th>@Model.Translate("Document")
                        </th>
                        <th>@Model.Translate("Type")
                        </th>
                        <th>&nbsp;
                        </th>
                        <th>&nbsp;
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 1; i <= int.Parse(Model.GetAnswer("AbsencesMulti")); i++)
                    {
                        string absenceNr = "";

                        if (i > 1)
                        {
                            absenceNr = i.ToString();
                        }

                        if (!string.IsNullOrEmpty(Model.GetAnswer("AbsenceType" + absenceNr)))
                        {
                        <tr>
                            <td>@Model.GetAnswer("AbsenceType" + absenceNr)</td>
                            <td>pdf</td>
                            <td>&nbsp;</td>
                            <td>
                                <a href="@Url.Action("print", "Absences", new
                                {
                                    id = GetContract(absenceNr),
                                    caseId = Model.Contract.Id,
                                    path = Path.Combine(Path.GetDirectoryName(Model.FormXmlPath), Path.GetFileNameWithoutExtension(Model.FormXmlPath)),
                                    userId = FormLibSessions.User.UserId,
                                    absenceNr = i
                                })" class="btn pull-right print"><i class="icon-file"></i>&nbsp;@Model.Translate("Print")</a>
                            </td>
                        </tr>
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
         <div class="alert alert-info"><strong><i class="icon-info-sign"></i>&nbsp;@Model.Translate("A document can not be created based on current selections")</strong></div>
        }

    </div>
</div>

@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
@{
    const string Level = "Level 1";

    const string CompanyName = "IKEA Distribution Services Limited";
    const string ContractType = "Permanent";
    const string PartTime = "Part Time";
    const string FullTime = "Full Time";
    const string ZeroHours = "Zero Hours";
    const string Expats = "Expats";
    
}
<div class="tab-pane" id="Payment">
    <div class="span8">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Basic pay")</h4>
                    </td>
                    <td class="tdstrong"> 
                        <h4>@Model.Translate("Current record")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayrollCategory")</td>
                    <td>
                        @Model.Element("PayrollCategory")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayScaleGroup")</td>
                    <td>
                        @Model.Element("PayScaleGroup")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BasicPayAmount")</td>
                    <td>
                        @Model.Element("BasicPayAmount")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("MonthlySalaryRate")</td>
                    <td>
                        @Model.Element("MonthlySalaryRate")
                    </td>
                 </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BasicPayChangeReason")</td>
                    <td>
                        @Model.Element("BasicPayChangeReason")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Allowances")</h4>
                    </td>
                    <td class="tdstrong">
                        <h4>@Model.Translate("Current record")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesChangeType")</td>
                    <td>
                        @Model.Element("AllowancesChangeType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesType")</td>
                    <td>
                        @Model.Element("AllowancesType")
                    </td>
                </tr>
@*                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesPaymentType")</td>
                    <td>
                        @Model.Element("AllowancesPaymentType")
                    </td>
                </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesAmountUnits")</td>
                    <td>
                        @Model.Element("AllowancesAmountUnits")
                    </td>
                </tr>
                                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesPaidPer")</td>
                    <td>
                        @Model.Element("AllowancesPaidPer")
                    </td>
                </tr>
@*                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesNetGross")</td>
                    <td>
                        @Model.Element("AllowancesNetGross")
                    </td>
                </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidFrom")</td>
                    <td>
                        @Model.Element("AllowancesValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidTo")</td>
                    <td>
                        @Model.Element("AllowancesValidTo")
                    </td>
                </tr>
                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="allowance@(i.ToString())" id="allowance@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Allowances") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesChangeType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesChangeType" + i.ToString())
                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesType" + i.ToString())
                        </td>
                    </tr>@*
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesPaymentType" + i.ToString())</td>
                    </tr>*@
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesPaidPer" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesPaidPer" + i.ToString())</td>
                    </tr>
                    @*
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesNetGross" + i.ToString())</td>
                    </tr>*@
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addAllowanceTrr">
                    <td colspan="2">
                        @Model.Element("Allowances")
                        <a id="addAllowance" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Allowance")</a></td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Deductions")</h4>
                    </td>
                    <td class="tdstrong">
                        <h4>@Model.Translate("Current record")</h4>
                    </td>
                </tr>
                                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsChangeType")</td>
                    <td>
                        @Model.Element("DeductionsChangeType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsType")</td>
                    <td>
                        @Model.Element("DeductionsType")
                    </td>
                </tr>
@*                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsPaymentType")</td>
                    <td>
                        @Model.Element("DeductionsPaymentType")
                    </td>
                </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsAmountUnits")</td>
                    <td>
                        @Model.Element("DeductionsAmountUnits")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductedPer")</td>
                    <td>
                        @Model.Element("DeductedPer")
                    </td>
                </tr>
@*                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsNetGross")</td>
                    <td>
                        @Model.Element("DeductionsNetGross")
                    </td>
                </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidFrom")</td>
                    <td>
                        @Model.Element("DeductionsValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidTo")</td>
                    <td>
                        @Model.Element("DeductionsValidTo")
                    </td>
                </tr>
                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="deduction@(i.ToString())" id="deduction@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Deductions") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsChangeType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsChangeType" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsType" + i.ToString())</td>
                    </tr>
                    @*
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsPaymentType" + i.ToString())</td>
                    </tr>*@
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductedPer" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductedPer" + i.ToString())</td>
                    </tr>
                    @*
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsNetGross" + i.ToString())</td>
                    </tr>*@
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addDeductionTrr">
                    <td colspan="2">
                        @Model.Element("Deductions")
                        <a id="addDeduction" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Deduction")</a></td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Bonus Eligibility")</h4>
                    </td>
                    <td class="tdstrong">
                        <h4>@Model.Translate("Current record")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("OneIKEABonusLevel")</td>
                    <td>
                        @Model.Element("OneIKEABonusLevel")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Country Specifics")</h4>
                    </td>
                    <td class="tdstrong">
                        <h4>@Model.Translate("Current record")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DateOfNextSalaryReview")</td>
                    <td>
                        @Model.Element("DateOfNextSalaryReview")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BenefitLevel")</td>
                    <td>@Model.Element("BenefitLevel")
                        <div id="notice_BenefitLevel" style="display:inline-block; color:black;" class="notice">
                            @Model.Translate("If no default value, please consult UK & IE Comps & Bens Mgr")
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
        <input type="hidden" id="MultipleEntrySectionsNr" value="@FormLibConstants.FormField.MultipleEntrySectionsNr" />
</div>

<script>
    
    var lockedbyUserGroup = document.getElementById('LockedByUserGroup').getAttribute('status');
    
    if ("@Model.ReadOnlyTab("#Payment")" == 'False' && lockedbyUserGroup == 'False') {

        // Following script is for hiding global mobility class if NewToIKEA is equal to string 'International Transfer'
        @*if ('@Model.GetAnswer("NewToIKEA")' == 'International Transfer') {
        var globalmobility = document.getElementsByClassName('globalmobility'), i;
        for (var i = 0; i < globalmobility.length; i++) {
            globalmobility[i].style.display = 'none';
        }
    }*@

        function setPaymentDatePickersBehavior() {

            $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5,' +
            '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker('destroy');

            var startDate = $('#ChangeValidFrom').val();
            var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
            var dStart = APIGlobal.DateTime.parseDate(startDate, format);
            var forcePicker = new Date(dStart.getFullYear(), dStart.getMonth(), dStart.getDate(), 0, 0, 0, 0);
            $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5,' +
                '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker(
            {
                onRender: function (ev) {
                    return ev.valueOf() < forcePicker.valueOf() ? 'disabled' : '';
                },
            });

            ////set value to the datepicker
            $('#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker("setValue", forcePicker);
            $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5').not(".disabled").datepicker("setValue", forcePicker);
            $('#date_ChangeValidFrom').datepicker("setValue", startDate);

            $('#AllowancesValidFrom,#AllowancesValidFrom2,#AllowancesValidFrom3,#AllowancesValidFrom4,#AllowancesValidFrom5,' +
      '#DeductionsValidFrom,#DeductionsValidFrom2,#DeductionsValidFrom3,#DeductionsValidFrom4,#DeductionsValidFrom5').val(startDate);
        }

        // setPaymentDatePickersBehavior();

        $('#date_ChangeValidFrom').on('changeDate', function (ev) {
            setPaymentDatePickersBehavior();
        }).data('datepicker');

        $('#ChangeValidFrom').change(function () {
            setPaymentDatePickersBehavior();
        });

        $('#DeductionsValidFrom,#DeductionsValidFrom2,#DeductionsValidFrom3,#DeductionsValidFrom4,#DeductionsValidFrom5').change(function () {

            $('#date_' + $(this).attr("id")).datepicker("setValue", $(this).val());
        });

        $('#AllowancesValidFrom,#AllowancesValidFrom2,#AllowancesValidFrom3,#AllowancesValidFrom4,#AllowancesValidFrom5').change(function () {

            $('#date_' + $(this).attr("id")).datepicker("setValue", $(this).val());
        });

        // allowance and deduction datepickers
        var employmentCategory = document.getElementById('EmploymentCategory').value;
        var sEnd = document.getElementById('ChangeValidFrom');

        function setDefaultDate(id) {
            var input = $('#' + id);

            if (employmentCategory == 'Temporary') {
                input.val(sEnd.value);
            }
            else
                if (input.val() == '') {
                    input.val('31.12.9999');
                }
        }

        function disableDatePicker(id) {
            var input = $('#' + id);
            var datePicker = $('#date_' + id);

            datePicker.datepicker("destroy");
            datePicker.addClass("disabled");
            input.val("");
            input.attr('readonly', 'readonly');
        }

        function enableDatePicker(id) {
            var input = $('#' + id);
            var datePicker = $('#date_' + id);

            datePicker.removeClass("disabled");
            input.removeAttr('readonly', 'readonly');
            setDefaultDate(id);
            datePicker.datepicker();
        }

        function setDatePickerBehavior(id) {
            var input = $('#' + id);

            //if (value == 'One Time') {
            //    disableDatePicker(id);
            //} else {
            //    enableDatePicker(id);
            //}
        }

        //function setDefaultDatePickerBehavior(id) {
        //    var input = $('#' + id);

        //    //if (value == 'One Time') {
        //    //    disableDatePicker(id);
        //    //} else {
        //    //    setDefaultDate(id);
        //    //}
        //}

        //$('#ChangeValidFrom').change(function () {
        //    setDatePickerBehavior('AllowancesValidTo');
        //});
        // setDefaultDatePickerBehavior('AllowancesValidTo');

        //$('#AllowancesPaymentType2').change(function () {
        //    setDatePickerBehavior('AllowancesValidTo2', $(this).val());
        //});
        //setDefaultDatePickerBehavior('AllowancesValidTo2', $('#AllowancesPaymentType2').val());

        //$('#AllowancesPaymentType3').change(function () {
        //    setDatePickerBehavior('AllowancesValidTo3', $(this).val());
        //});
        //setDefaultDatePickerBehavior('AllowancesValidTo3', $('#AllowancesPaymentType3').val());

        //$('#DeductionsPaymentType').change(function () {
        //    setDatePickerBehavior('DeductionsValidTo', $(this).val());
        //});
        //setDefaultDatePickerBehavior('DeductionsValidTo', $('#DeductionsPaymentType').val());

        //$('#DeductionsPaymentType2').change(function () {
        //    setDatePickerBehavior('DeductionsValidTo2', $(this).val());
        //});
        //setDefaultDatePickerBehavior('DeductionsValidTo2', $('#DeductionsPaymentType2').val());

        //$('#DeductionsPaymentType3').change(function () {
        //    setDatePickerBehavior('DeductionsValidTo3', $(this).val());
        //});
        //setDefaultDatePickerBehavior('DeductionsValidTo3', $('#DeductionsPaymentType3').val());

        function setOneIKEABonusLevel(value) {
            if (!value) {
                $('#OneIKEABonusLevel option[value="' + '@Level' + '"]').prop('selected', true);
            }
            else {
                $('#OneIKEABonusLevel option:not([value])').prop('selected', true);
            }
        };

        $('#JobTitle').change(function () {
            setOneIKEABonusLevel($(this).val());

            setDefaultPayroll();

            AllowanceType = 1;
            setTimeout(function(){setAllowances()}, 30);
            
            
        });

        setOneIKEABonusLevel($('#JobTitle').val());

        //From OrganisationalAssignment

        var AllowanceType = 0; // Global


        function setEmployeeBehavior(value) {
            if (value == '@ContractType') {
                $('#date_ContractEndDate').datepicker("destroy");
                $('#date_ContractEndDate').addClass("disabled");
                $('#ContractEndDate').prop('disabled', true);
                $('#ContractEndDate').val("");
            }
            else {
                $('#date_ContractEndDate').datepicker();
                $('#ContractEndDate').prop('disabled', false);
                $("#ContractEndDate").removeClass("disabled");
            }


            //This validation doesen´t apply to "IKEA Distribution Services Limited";
            var newCompany = $("#NewCompany option:selected").text();

            if (newCompany != '@CompanyName') {
                if (value == '@ZeroHours') {
                    $('#ContractedHours').val("0");
                }
                else {
                    if ($('#ContractedHours').val() == "0") {
                        $('#ContractedHours').val("");
                    }
                }
            }

        }

        if ($('#ContractType').val() == '@ContractType') {
            $('#date_ContractEndDate').datepicker("destroy");
            $('#date_ContractEndDate').addClass("disabled");
            $('#ContractEndDate').prop('disabled', true);
            $('#ContractEndDate').val("");
        }


        $('#ContractType').change(function () {
            setEmployeeBehavior($(this).val());
        });

        $('#date_ContractEndDate').not(".disabled").datepicker().on('changeDate', function (ev) {
            $('#ChangeValidTo').val($('#ContractEndDate').val());
        });

        $('#ContractEndDate').change(function () {
            $('#ChangeValidTo').val($('#ContractEndDate').val());
        });

        $('#ContractedHours').change(function () {

            //This validation doesen´t apply to "IKEA Distribution Services Limited";
            var newCompany = $("#NewCompany option:selected").text();
            var value = $(this).val();

            if (newCompany != '@CompanyName') {

                //Order of the fieds to be changed, additional validations: 
                //if Contracted Hours less than 38 and greater > 0 – Employment Category default value "Part time";
                //if Contracted Hours equals 39 – Employment Category default value "Full time"; 
                //if Contract Type "Zero hours" – Contracted Hours default value “0”, available for all companies except for Distribution

                if (value > 0 && value <= 38) {
                    $('#EmploymentCategory option[value="' + '@PartTime' + '"]').prop('selected', true);
                }
                else if (value == 39) {
                    $('#EmploymentCategory option[value="' + '@FullTime' + '"]').prop('selected', true);
                }
                else if (value == 0) {
                    $('#ContractType option[value="' + '@ZeroHours' + '"]').prop('selected', true);
                }
                else {
                    $('#EmploymentCategory option:not([value])').prop('selected', true);
                }
            }

        });


        $('#ReportsToLineManager').change(function () {
            //////////
            //ReportsToLineManager change function
            //If certain business units, TEC Approver=ReportsToLinemanager
            //////////

            var bus = $("#NewBusinessUnit option:selected").text();

            if (bus == 'Distribution Centre Peterborough 012' | bus == 'IKEA Property Services' | bus == 'Peterborough Contact Centre' | bus == 'Service Office UK' | bus == 'Customer Distribution Centre Peterborough 269') {
                var line = document.getElementById('ReportsToLineManager').value;

                var tec = $("#TECApprover option:selected").text();

                if (tec == '') {

                    $('#TECApprover')[0].selectize.setValue(line);
                }
            }


        });



        $('#NewCompany').change(function () {

            if ($("#NewCompany option:selected").text() == 'IKEA Limited')
            { document.getElementById('HelpDesk').value = 'ICC3 UK Retail'; }
            else if ($("#NewCompany option:selected").text() == 'IKEA Properties Investments Ltd')
            { document.getElementById('HelpDesk').value = 'ICC3 UK Retail'; }
            else if ($("#NewCompany option:selected").text() == 'IKEA Distribution Services Limited')
            { document.getElementById('HelpDesk').value = 'ICC3 WER DS'; }
            else
            {
                document.getElementById('HelpDesk').value = '';
            }

            var value = $("#NewCompany option:selected").text();;

            if (!(value == '@CompanyName')) {
                document.getElementById('CostAllocation').disabled = true;
                if ($('#CrossChargeCostCentre')[0].selectize)
                { $('#CrossChargeCostCentre')[0].selectize.disable(); }

                //$('#CostAllocation, #CrossChargeCostCentre').prop('disabled', true);
            }
            else {
                document.getElementById('CostAllocation').disabled = false;
                if ($('#CrossChargeCostCentre')[0].selectize)
                { $('#CrossChargeCostCentre')[0].selectize.enable(); }
                //$('#CostAllocation, #CrossChargeCostCentre').prop('disabled', false);
            }
        });




        $('#NewBusinessUnit').change(function () {
            //////////
            //NewBusinessUnit change function
            //Calls other set functions, Sets primary site=business unit
            //////////
            
            addTecApprovers();
            setPayrollCategory();
            setBasicPayAmount();
            AllowanceType = 1;
            setAllowances();
            AllowanceType = 2;
            setAllowances();
            AllowanceType = 3;
            setAllowances();
            AllowanceType = 4;
            setAllowances();
            AllowanceType = 5;
            setAllowances();
            //setAllowanceType2();
            //setAllowanceType();
            //setAllowanceType3();



            var value = $(this).val();
            if ($('#NewBusinessUnit')[0].selectize) {
                var selectedText = $('#NewBusinessUnit')[0].selectize.getItem(value).text();

                if ($('#PrimarySite')[0].selectize) {
                    $('#PrimarySite')[0].selectize.setValue(selectedText);
                }
                else {
                    $('#PrimarySite').val(selectedText);
                }
            }
            else {
                var selectedText = $('#NewBusinessUnit').find('option:selected').text();
                if ($('#PrimarySite')[0].selectize) {
                    $('#PrimarySite')[0].selectize.setValue(selectedText);
                }
                else {
                    var selectedText = $('#NewBusinessUnit').find('option:selected').text();
                    $('#PrimarySite').val(selectedText);
                }
            }
        });

        $('#AllowancesType').change(function () {
            //////////
            //AllowancesType change function
            //Calls function to set allowance type unit
            //////////
            AllowanceType = 1;
            setAllowances();
            //setAllowanceType();

        });

        $('#AllowancesType2').change(function () {
            //////////
            //AllowancesType2 change function
            //Calls function to set allowance type unit
            //////////
            AllowanceType = 2;
            setAllowances();
            //setAllowanceType2();

        });

        $('#AllowancesType3').change(function () {
            //////////
            //AllowancesType3 change function
            //Calls function to set allowance type unit
            //////////
            AllowanceType = 3;
            setAllowances();
            //setAllowanceType3();

        });

        $('#AllowancesType4').change(function () {
            //////////
            //AllowancesType4 change function
            //Calls function to set allowance type unit
            //////////
            AllowanceType = 4;
            setAllowances();
            //setAllowanceType4();

        });

        $('#AllowancesType5').change(function () {
            //////////
            //AllowancesType5 change function
            //Calls function to set allowance type unit
            //////////
            AllowanceType = 5;
            setAllowances();
            //setAllowanceType5();

        });


        jQuery('#PayrollCategory').change(function () {
            //////////
            //PayrollCategory change function
            //Calls functions to set
            //////////

            addDeductionTypesOnPayroll();

            addAllowanceOnPayroll();
            addPayScaleOnPayroll();
            setPayrollCategory();

            setBasicPayAmount();
            AllowanceType = 1;
            setAllowances();
            AllowanceType = 2;
            setAllowances();
            AllowanceType = 3;
            setAllowances();
            AllowanceType = 4;
            setAllowances();
            AllowanceType = 5;
            setAllowances();
            //setAllowanceType();
            //setAllowanceType2();
            //setAllowanceType3();


        });


        $('#PayScaleGroup').change(function () {
            //////////
            //PayScaleGroup change function
            //Calls functions to set basic pay amount
            //////////

            setBasicPayAmount();

        });



        $('#NewServiceArea').change(function () {
            //////////
            //NewServiceArea change function
            //Calls functions to set job titles
            //////////

            //GetXML('predefined_function_jobtitleUK_outs.xml', setLineManagerJobTitle);


            //department, Line manager, cost centre NEW
            setTimeout(function () { GetXML('predefined_function_department_linemanager_outs.xml', setLineManagerAndCostCentre); }, 1);

            setTimeout(function () { GetXML('predefined_function_jobtitleUK_outs.xml', setLineManagerJobTitle); }, 1);



        });

        $('#NewDepartment').change(function () {
            //////////
            //NewDepartment change function
            //Calls functions to set cost centre, linemanager
            //////////

            //GetXML('predefined_department_costcentre_change_outs.xml', setCostCentre);



            //GetXML('predefined_linemanager_department_outs_UK.xml', setLineManager);



            ////Line manager jobtitle

            //GetXML('predefined_department_jobtitle_UK_outs.xml', setLineManagerJob);




            //department, Line manager, cost centre NEW
            GetXML('predefined_function_department_linemanager_outs.xml', setLineManagerAndCostCentre);


            //Line manager jobtitle

            setTimeout(function () { GetXML('predefined_department_jobtitle_UK_outs.xml', setLineManagerJob); }, 30);





        });

        $('#ReportsToLineManager').change(function () {
            setTimeout(function () { GetXML('predefined_department_jobtitle_UK_outs.xml', setLineManagerJob); }, 30);
        });

        function addDeductionTypesOnPayroll() {
            //////////
            //addDeductionTypesOnPayroll change function
            //Calls functions to set deduction types
            //////////''

            GetXML('Predefined_PayrollCategory_DeductionsType_Change.xml', addDeductionTypesOnPayrollXML);



        }

        function addAllowanceOnPayroll() {
            //////////
            //addAllowanceOnPayroll change function
            //Calls function to add allowance types
            //////////

            GetXML('predefined_payroll_allowance_outs_Change_New.xml', addAllowanceOnPayrollXML);




        }

        function setAllowances() {
            //////////
            //setAllowanceType2
            //Adds allowance types based on selected payrollcategory
            //////////

            GetXML('predefined_allowancetype_defaults_outs.xml', setAllowancesXML);


        }


        function addPayScaleOnPayroll() {
            //////////
            //Add deduction types on selected payroll category
            //////////
            //DONE IN CHANGE

            GetXML('predefined_payroll_payscale_Change_outs.xml', addPayScaleOnPayrollXML);




        }

        function setDefaultPayroll(xml) {


            GetXML('predefined_payroll_category_outs.xml', setDefaultPayrollXML);



        }

        function addTecApprovers() {
            //////////
            //Add deduction types on selected payroll category
            //////////

            GetXML('predefined_businessunit_tecprovider_outs.xml', addTecApproversXML);

        }

        function GetXML(xmlFile, url) {
            //////////
            //Gets XML File
            //////////

            var path = window.location.protocol + '//';
            path = path + window.location.host + '/';

            path = site.baseUrl + '/FormLibContent/Xmls/UnitedKingdom/Templates/' + xmlFile

            $.ajax({
                type: "GET",
                url: path,
                dataType: "xml",
                success: url,
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(jqXHR.responseText);
                    alert(textStatus);
                    alert(errorThrown);
                }

            });


        }


        function setLineManagerJob(xml) {
            //////////
            //Adds tec providers on selected businessunit
            //////////

            var show = ''

            var dep = '';
            if (document.getElementById('ReportsToLineManager')) {
                dep = $("#ReportsToLineManager").val();

            }

            $('#ManagerJobTitle')[0].selectize.setValue('');
            $(xml).find('dependent').each(function () {

                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department == dep) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            $('#ManagerJobTitle')[0].selectize.setValue(show);
                        }
                        else {
                            var res = show.substring(0, n);

                            $('#ManagerJobTitle')[0].selectize.setValue(res);
                        }
                        return;
                    }

                }
            });

        }



        function addDeductionTypesOnPayrollXML(xml) {
            //////////
            //addDeductionTypesOnPayrollXML change function
            //Sets deduction types based on selected payroll
            //////////

            var show = ''

            var dep = '';
            if (document.getElementById('PayrollCategory')) {
                dep = $("#PayrollCategory option:selected").text();
            }

            var temp = '';

            $(xml).find('dependent').each(function () {

                var $sel = $(this);

                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {

                        var optionsarray = show.split(',');
                        var seloption = "";

                        $('#DeductionsType')
                            .find('option')
                            .remove();

                        $('#DeductionsType2')
                           .find('option')
                           .remove();

                        $('#DeductionsType3')
                          .find('option')
                          .remove();

                        $('#DeductionsType4')
                          .find('option')
                          .remove();

                        $('#DeductionsType5')
                          .find('option')
                          .remove();

                        seloption = '<option value="' + temp + '">' + temp + '</option>';

                        $.each(optionsarray, function (i) {
                            seloption += '<option value="' + optionsarray[i] + '">' + optionsarray[i] + '</option>';
                        });


                        $('#DeductionsType').append(seloption);
                        $('#DeductionsType2').append(seloption);
                        $('#DeductionsType3').append(seloption);
                        $('#DeductionsType4').append(seloption);
                        $('#DeductionsType5').append(seloption);

                        return;
                    }


                }
            });
        }



        function addAllowanceOnPayrollXML(xml) {
            //////////
            //addAllowanceOnPayrollXML
            //Adds allowance types based on selected payrollcategory
            //////////

            var show = ''
            var dep = '';

            if (document.getElementById('PayrollCategory')) {
                dep = $("#PayrollCategory option:selected").text();
            }
            var a1 = document.getElementById('AllowancesType').value;
            var a2 = document.getElementById('AllowancesType2').value;
            var a3 = document.getElementById('AllowancesType3').value;
            var a4 = document.getElementById('AllowancesType4').value;
            var a5 = document.getElementById('AllowancesType5').value;

            var b1 = document.getElementById('AllowancesAmountUnits').value;
            var b2 = document.getElementById('AllowancesAmountUnits2').value;
            var b3 = document.getElementById('AllowancesAmountUnits3').value;
            var b4 = document.getElementById('AllowancesAmountUnits4').value;
            var b5 = document.getElementById('AllowancesAmountUnits5').value;

            var temp = '';

            $(xml).find('dependent').each(function () {

                var $sel = $(this);

                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {

                        var optionsarray = show.split(',');
                        var seloption = "";

                        $('#AllowancesType')
                            .find('option')
                            .remove();
                        $('#AllowancesType2')
                              .find('option')
                              .remove();

                        $('#AllowancesType3')
                            .find('option')
                            .remove();

                        $('#AllowancesType4')
                        .find('option')
                        .remove();

                        $('#AllowancesType5')
                        .find('option')
                        .remove();

                        seloption = '<option value="' + temp + '">' + temp + '</option>';

                        $.each(optionsarray, function (i) {
                            seloption += '<option value="' + optionsarray[i] + '">' + optionsarray[i] + '</option>';
                        });


                        $('#AllowancesType').append(seloption);
                        $('#AllowancesType2').append(seloption);
                        $('#AllowancesType3').append(seloption);
                        $('#AllowancesType4').append(seloption);
                        $('#AllowancesType5').append(seloption);


                        if (a1 != '') {
                            document.getElementById('AllowancesType').value = a1;
                        }
                        if (a2 != '') {
                            document.getElementById('AllowancesType2').value = a2;
                        }
                        if (a3 != '') {
                            document.getElementById('AllowancesType3').value = a3;
                        }
                        if (a4 != '') {
                            document.getElementById('AllowancesType4').value = a4;
                        }
                        if (a5 != '') {
                            document.getElementById('AllowancesType5').value = a5;
                        }
                        if (b1 != '') {
                            document.getElementById('AllowancesAmountUnits').value = b1;
                        }
                        if (b2 != '') {
                            document.getElementById('AllowancesAmountUnits2').value = b2;
                        }
                        if (b3 != '') {
                            document.getElementById('AllowancesAmountUnits3').value = b3;
                        }
                        if (b4 != '') {
                            document.getElementById('AllowancesAmountUnits4').value = b4;
                        }
                        if (b5 != '') {
                            document.getElementById('AllowancesAmountUnits5').value = b5;
                        }
                        return;
                    }


                }
            });

        }

        function setAllowancesXML(xml) {
            
            //////////
            //setAllowanceTypeXML:
            //Sets amount from XML based on allowance type
            //////////

            var show = ''
            var show2 = ''
            
            if (AllowanceType == 1) {
                if (document.getElementById('AllowancesAmountUnits')) {
                    document.getElementById('AllowancesAmountUnits').value = '';
                }
                if (document.getElementById('AllowancesNetGross')) {
                    document.getElementById('AllowancesNetGross').value = '';
                }
            }
            else {
                if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                    document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '';
                }
                if (document.getElementById('AllowancesNetGross' + AllowanceType.toString())) {
                    document.getElementById('AllowancesNetGross' + AllowanceType.toString()).value = '';
                }
            }

            var res = '0';

            var pay = '';
            if (document.getElementById('PayrollCategory')) {
                pay = document.getElementById('PayrollCategory').value;
            }
            var dep = '';

            if (AllowanceType == 1) {
                if (document.getElementById('AllowancesType')) {
                    dep = document.getElementById('AllowancesType').value;
                }
            }
            else {
                if (document.getElementById('AllowancesType' + AllowanceType.toString())) {
                    dep = document.getElementById('AllowancesType' + AllowanceType.toString()).value;
                }
            }
            var bus = '';
            if (document.getElementById('NewBusinessUnit')) {
                bus = $("#NewBusinessUnit option:selected").text();
            }


            //alert(bus);

            var d = dep + '_' + pay;

            $(xml).find('dependent').each(function () {

                
                var $sel = $(this);
                show = '';
                show2 = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show1').text();
                show2 = $sel.find('show2').text();

                
                    if (bus == 'Store Bristol 264' | bus == 'Store London Croydon 144' | bus == 'Store London Lakeside 262' | bus == 'Store Milton Keynes 185' | bus == 'Store London Tottenham 255' | bus == 'Store London Wembley 141' | bus == 'Service Office UK') {
                        
                        if (document.getElementById('AllowancesType').value == '') {

                            document.getElementById('AllowancesType').value = 'Location Allowance'
                        }
                        if (dep.toString().trim() == 'Location Allowance') {
              
                            if (bus == 'Store Bristol 264') {
                                
                                if (pay == 'Hourly') {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '0.10';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '0.10';
                                        }
                                    }
                                }
                                else {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '203.00';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '203.00';
                                        }
                                    }
                                }
                            }
                            else if (bus == 'Store London Croydon 144') {
                                if (pay == 'Hourly') {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '1.28';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '1.28';
                                        }
                                    }
                                }
                                else {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '2600.00';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '2600.00';
                                        }
                                    }
                                }
                            }
                            else if (bus == 'Store London Lakeside 262') {
                                if (pay == 'Hourly') {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '0.77';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '0.77';
                                        }
                                    }
                                }
                                else {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '1560.00';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '1560.00';
                                        }
                                    }
                                }
                            }
                            else if (bus == 'Store Milton Keynes 185') {
                                if (pay == 'Hourly') {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '0.35';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '0.35';
                                        }
                                    }
                                }
                                else {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '709.00';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '709.00';
                                        }
                                    }
                                }
                            }
                            else if (bus == 'Store London Tottenham 255') {
                                if (pay == 'Hourly') {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '1.28';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '1.28';
                                        }
                                    }
                                }
                                else {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '2600.00';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '2600.00';
                                        }
                                    }
                                }
                            }
                            else if (bus == 'Store London Wembley 141') {
                                if (pay == 'Hourly') {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '1.28';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '1.28';
                                        }
                                    }
                                }
                                else {
                   
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '2600.00';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '2600.00';
                                        }
                                    }
                                }
                            }
                            else if (bus == 'Service Office UK') {
                                if (pay == 'Hourly') {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '1.28';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '1.28';
                                        }
                                    }
                                }
                                else {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = '2600.00';
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '2600.00';
                                        }
                                    }
                                }
                            }
                        }
                    }
                    



                        if (department.toString().trim() == dep.toString().trim()) {

                            if (show != '') {

                                if (dep.toString().trim() == 'Advanced') {
                                    if (bus.toString().trim() != 'Peterborough Contact Centre') {
                                        if (AllowanceType == 1) {
                                            if (document.getElementById('AllowancesAmountUnits')) {
                                                document.getElementById('AllowancesAmountUnits').value = show;
                                            }
                                        }
                                        else {
                                            if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                                document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = show;
                                            }
                                        }
                                    }
                                    else {
                                        if (AllowanceType == 1) {
                                            if (document.getElementById('AllowancesAmountUnits')) {
                                                document.getElementById('AllowancesAmountUnits').value = '0.55';
                                            }
                                        }
                                        else {
                                            if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                                document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '0.55';
                                            }
                                        }
                                    }
                                }
                                else if (dep.toString().trim() == 'First Aid Allowance') {

                                    //if (bus.toString().trim() == 'Customer Distribution Centre Peterborough 269' | bus.toString().trim() == 'Distribution Centre Peterborough 012') {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = show;
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = show;
                                        }
                                    }
                                    //}
                                }
                                else if (dep.toString().trim() == 'Fork Lift Truck Allowance') {
                                    if (bus.toString().trim() != 'Store Milton Keynes 185') {
                                        if (AllowanceType == 1) {
                                            if (document.getElementById('AllowancesAmountUnits')) {
                                                document.getElementById('AllowancesAmountUnits').value = show;
                                            }
                                        }
                                        else {
                                            if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                                document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = show;
                                            }
                                        }
                                    }
                                    else {
                                        if (AllowanceType == 1) {
                                            if (document.getElementById('AllowancesAmountUnits')) {
                                                document.getElementById('AllowancesAmountUnits').value = '1.72';
                                            }
                                        }
                                        else {
                                            if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                                document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '1.72';
                                            }
                                        }
                                    }
                                }
                                else if (dep.toString().trim() == 'Kitchen Skills') {
                                    if (bus.toString().trim() == 'Store Edinburgh 265') {
                                        if (AllowanceType == 1) {
                                            if (document.getElementById('AllowancesAmountUnits')) {
                                                document.getElementById('AllowancesAmountUnits').value = '1.00';
                                            }
                                        }
                                        else {
                                            if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                                document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '1.00';
                                            }
                                        }
                                    }

                                    else if (bus.toString().trim() == 'Store London Tottenham 255' | bus == 'Store London Wembley 141' | bus == 'Store London Croydon 144' | bus == 'Store London Lakeside 262') {
                                        if (AllowanceType == 1) {
                                            if (document.getElementById('AllowancesAmountUnits')) {
                                                document.getElementById('AllowancesAmountUnits').value = '0.30';
                                            }
                                        }
                                        else {
                                            if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                                document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = '0.30';
                                            }
                                        }
                                    }
                                    else {
                                        if (AllowanceType == 1) {
                                            if (document.getElementById('AllowancesAmountUnits')) {
                                                document.getElementById('AllowancesAmountUnits').value = show;
                                            }
                                        }
                                        else {
                                            if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                                document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = show;
                                            }
                                        }
                                    }
                                }
                                else {
                                    if (AllowanceType == 1) {
                                        if (document.getElementById('AllowancesAmountUnits')) {
                                            document.getElementById('AllowancesAmountUnits').value = show;
                                        }
                                    }
                                    else {
                                        if (document.getElementById('AllowancesAmountUnits' + AllowanceType.toString())) {
                                            document.getElementById('AllowancesAmountUnits' + AllowanceType.toString()).value = show;
                                        }
                                    }
                                }

                            }

                            res = '1';
                        }


                        if (res == 1) {
                            return;
                        }
                    


                
            });
        }



        function addPayScaleOnPayrollXML(xml) {
            ///DONE IN CHANGE
            var show = ''
            var dep = '';

            if (document.getElementById('PayrollCategory')) {
                dep = $("#PayrollCategory option:selected").text();
            }

            var temp = '';

            $(xml).find('dependent').each(function () {

                var $sel = $(this);

                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {

                        var optionsarray = show.split(',');
                        var seloption = "";

                        $('#PayScaleGroup')
                            .find('option')
                            .remove();


                        optionsarray.push('');

                        $.each(optionsarray, function (key, value) {

                            var s = value.replace(/\n/g, '');

                            $('#PayScaleGroup')
                                .append($("<option></option>")
                                .attr("value", s)
                                .text(s));
                        });



                        return;
                    }


                }
            });

        }

        function setBasicPayAmount() {
            
            //////////
            //Sets Basic pay amount based on payroll category and pay scale group
            //////////
            ///CHANGE

            if (document.getElementById('BasicPayAmount')) {
                document.getElementById('BasicPayAmount').value = ''
            }


            var bus = '';
            if (document.getElementById('NewBusinessUnit')) {
                bus = $("#NewBusinessUnit option:selected").text();
            }
            var grp = '';
            if (document.getElementById('PayScaleGroup')) {

                grp = $("#PayScaleGroup option:selected").text();
            }

            var pay = '';
            if (document.getElementById('PayrollCategory')) {
                pay = document.getElementById('PayrollCategory').value;

            }

            if (bus != 'Distribution Centre Doncaster') {
                if (pay.toString().trim() == 'Hourly') {
                    var show;

                    show = 'STARTER';

                    if (grp == '') {
                        grp = 'STARTER';
                        document.getElementById('PayScaleGroup').value = grp;
                        document.getElementById('PayScaleGroup').selectedIndex = 1;

                    }

                    if (bus.toString().trim() == 'Peterborough Contact Centre') {
                        if (grp.toString().trim() == 'STARTER') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = '7.84'
                            }
                        }
                        else if (grp.toString().trim() == 'FOUNDATION') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = '7.84'
                            }
                        }
                        else if (grp.toString().trim() == 'ADVANCED') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = ''
                            }
                        }
                    }
                    else if (bus.toString().trim() == 'Customer Distribution Centre Peterborough 269' | bus == 'Distribution Centre Peterborough 012' | bus == 'Distribution Centre Doncaster') {
                        if (grp.toString().trim() == 'STARTER') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = '8.62'
                            }
                        }
                        else if (grp.toString().trim() == 'MULTSKLL') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = '8.95'
                            }
                        }
                        else if (grp.toString().trim() == 'BOOKOFF') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = '9.92'
                            }
                        }
                        else if (grp.toString().trim() == 'QUALITY') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = '10.41'
                            }
                        }

                    }
                    else {

                        if (grp.toString().trim() == 'STARTER') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = '7.13'
                            }
                        }
                        else if (grp.toString().trim() == 'FOUNDATION') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = '7.13'
                            }
                        }
                        else if (grp.toString().trim() == 'INTERN') {
                            if (document.getElementById('BasicPayAmount')) {
                                document.getElementById('BasicPayAmount').value = '6.50'
                            }
                        }
                    }
                }
            }
            else {
                if (document.getElementById('BasicPayAmount')) {
                    document.getElementById('BasicPayAmount').value = ''
                }
            }



        }

        function setPayrollCategory() {
            //////////
            //Sets PayScaleGroup
            //////////

            var sal = '';
            if (document.getElementById('PayrollCategory')) {
                sal = document.getElementById('PayrollCategory').value;
                if (sal == '') {
                    sal = $("#PayrollCategory option:selected").text();
                }
            }
            var bus = '';
            if (document.getElementById('NewBusinessUnit')) {
                bus = $("#NewBusinessUnit option:selected").text();
            }

            if (sal == 'Salaried' | sal == 'Salaried Management' | sal == 'Salaried Senior Management') {


                var path = window.location.protocol + '//';
                path = path + window.location.host + '/';

                path = site.baseUrl + '/FormLibContent/Xmls/UnitedKingdom/Templates/predefined_payroll_category_outs.xml'

                $.ajax({
                    type: "GET",
                    url: path,
                    dataType: "xml",
                    success: setPayrollCategoryXML,
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(jqXHR.responseText);
                        alert(textStatus);
                        alert(errorThrown);
                    }

                });


            }
            else if (sal == 'Hourly') {

                if (document.getElementById('PayScaleGroup')) {
                    document.getElementById('PayScaleGroup').value = '';
                }
                if (document.getElementById('BenefitLevel')) {
                    document.getElementById('BenefitLevel').value = '';
                }



                if (document.getElementById('PayScaleGroup')) {
                    if (bus == 'Store Cardiff 267' | bus == 'Store Edinburgh 265') {
                        document.getElementById('PayScaleGroup').value = 'STARTER';
                    }
                    else if (bus == 'Peterborough Contact Centre') {
                        document.getElementById('PayScaleGroup').value = 'STARTER';
                    }
                    else if (bus == 'Customer Distribution Centre Peterborough 269' | bus == 'Distribution Centre Peterborough 012') {
                        document.getElementById('PayScaleGroup').value = 'STARTER';
                    }
                    else {
                        document.getElementById('PayScaleGroup').value = 'STARTER';
                    }
                }


                var path = window.location.protocol + '//';
                path = path + window.location.host + '/';


                path = site.baseUrl + '/FormLibContent/Xmls/UnitedKingdom/Templates/predefined_payroll_category_outs.xml'

                $.ajax({
                    type: "GET",
                    url: path,
                    dataType: "xml",
                    success: setPayrollCategoryHourlyXML,
                    error: function (jqXHR, textStatus, errorThrown) {
                        alert(jqXHR.responseText);
                        alert(textStatus);
                        alert(errorThrown);
                    }

                });

            }
        }

        function setPayrollCategoryHourlyXML(xml) {
            //////////
            //setDefaultPayrollXML:
            //Sets Payrpll category from jobtitle
            //////////


            var show5 = ''
            var show6 = ''
            var res = '0';

            var dep = '';
            if (document.getElementById('JobTitle')) {
                dep = document.getElementById('JobTitle').value;
            }

            var bus = '';
            if (document.getElementById('NewBusinessUnit')) {
                bus = $("#NewBusinessUnit option:selected").text();
            }


            $(xml).find('dependent').each(function () {


                var $sel = $(this);

                show5 = '';
                show6 = '';


                var department = $sel.find('selected').text();
                var empty = '';


                show5 = $sel.find('show5').text();
                show6 = $sel.find('show6').text();


                if (department.toString().trim() == dep.toString().trim()) {


                    if (show6 != '') {
                        var n = show6.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('OneIKEABonusLevel')) {
                                document.getElementById('OneIKEABonusLevel').value = show6.toString().trim();
                            }
                        }
                        else {
                            var res = show6.substring(0, n);
                            if (document.getElementById('OneIKEABonusLevel')) {
                                document.getElementById('OneIKEABonusLevel').value = res.toString().trim();
                            }
                        }
                        res = '1';
                    }
                    else {
                        res = '1';
                        if (document.getElementById('OneIKEABonusLevel')) {
                            document.getElementById('OneIKEABonusLevel').value = '';
                        }
                    }

                    if (!(show5 == '')) {

                        var n = show5.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('BenefitLevel')) {
                                document.getElementById('BenefitLevel').value = show5.toString().trim();
                            }

                        }
                        else {
                            var res = show5.substring(0, n);
                            if (document.getElementById('BenefitLevel')) {
                                document.getElementById('BenefitLevel').value = res.toString().trim();
                            }

                        }
                        res = '1'
                    }
                    else {

                        res = '1';
                        if (document.getElementById('BenefitLevel')) {
                            document.getElementById('BenefitLevel').value = '';
                        }
                        $('#notice_BenefitLevel').show();
                    }

                }
            });
        }


        function setDefaultPayrollXML(xml) {
            //////////
            //Sets PayScaleGroup, OneIKEABonusLevel, BenefitLevel from predefined_payroll_category_outs.XML and selected Job title and payroll category
            //////////
            ///DONE IN CHANGE

            var show = ''
            var res = '0';

            var dep = '';
            if (document.getElementById('JobTitle')) {
                dep = document.getElementById('JobTitle').value;
            }

            var bus = '';
            if (document.getElementById('NewBusinessUnit')) {
                bus = $("#NewBusinessUnit option:selected").text();
            }



            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show7').text();


                if (department.toString().trim() == dep.toString().trim()) {


                    res = '1';
                    if (show != '') {
                        var n = show.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('PayrollCategory')) {
                                document.getElementById('PayrollCategory').value = show;
                            }
                        }
                        else {
                            var res = show.substring(0, n);
                            if (document.getElementById('PayrollCategory')) {
                                document.getElementById('PayrollCategory').value = res;
                            }
                        }
                    }
                    else {
                        if (document.getElementById('PayrollCategory')) {
                            document.getElementById('PayrollCategory').value = '';
                        }
                    }

                }
            });

            addPayScaleOnPayroll();

            setPayrollCategory();

            setBasicPayAmount();
        }
        function setPayrollCategoryXML(xml) {
            //////////
            //Sets PayScaleGroup, OneIKEABonusLevel, BenefitLevel from predefined_payroll_category_outs.XML and selected Job title and payroll category
            //////////
            ///DONE IN CHANGE

            var show = ''
            var show2 = ''
            var show3 = ''
            var show4 = ''
            var show5 = ''
            var show6 = ''
            var show7 = ''
            var res = '0';

            var dep = '';
            if (document.getElementById('JobTitle')) {
                dep = document.getElementById('JobTitle').value;
            }

            var bus = '';
            if (document.getElementById('NewBusinessUnit')) {
                bus = $("#NewBusinessUnit option:selected").text();
            }


            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';
                show2 = '';
                show3 = '';
                show4 = '';
                show5 = '';
                show6 = '';
                show7 = '';

                var empty = '';
                var department = $sel.find('selected').text();

                show = $sel.find('show1').text();
                show2 = $sel.find('show2').text();
                show3 = $sel.find('show3').text();
                show4 = $sel.find('show4').text();
                show5 = $sel.find('show5').text();
                show6 = $sel.find('show6').text();
                show7 = $sel.find('show7').text();


                if (department.toString().trim() == dep.toString().trim()) {

                    if (bus == 'Store Manchester 186' | bus == 'Store Belfast 113' | bus == 'Store Cardiff 267' | bus == 'Store Edinburgh 265' | bus == 'Store Gateshead 143' | bus == 'Store Milton Keynes 185' | bus == 'Store Coventry 150') {
                        res = '1';
                        if (show != '') {
                            var n = show.indexOf(",");
                            if (n == -1) {
                                if (document.getElementById('PayScaleGroup')) {
                                    //document.getElementById('PayScaleGroup').value = show;
                                    document.getElementById('PayScaleGroup').value = show;
                                }
                            }
                            else {
                                var res = show.substring(0, n);
                                if (document.getElementById('PayScaleGroup')) {
                                    document.getElementById('PayScaleGroup').value = res;
                                }
                            }
                        }
                        else {
                            if (document.getElementById('PayScaleGroup')) {
                                document.getElementById('PayScaleGroup').value = empty;
                            }
                        }
                    }
                    else if (bus == 'Store Bristol 264' | bus == 'Store London Tottenham 255' | bus == 'Store Glasgow 266' | bus == 'Store London Lakeside 262' | bus == 'Store Leeds 261' | bus == 'Store Nottingham 263' | bus == 'Store Southampton 125' | bus == 'Store Warrington 140' | bus == 'Store Birmingham 142') {
                        res = '1';

                        if (show2 != '') {
                            var n = show2.indexOf(",");
                            if (n == -1) {
                                if (document.getElementById('PayScaleGroup')) {
                                    document.getElementById('PayScaleGroup').value = show2;
                                }
                            }
                            else {
                                var res = show2.substring(0, n);
                                if (document.getElementById('PayScaleGroup')) {
                                    document.getElementById('PayScaleGroup').value = res;
                                }
                            }

                        }
                        else {
                            if (document.getElementById('PayScaleGroup')) {
                                document.getElementById('PayScaleGroup').value = empty;
                            }
                        }
                    }
                    else if (bus == 'Store London Croydon 144' | bus == 'Store London Wembley 141' | bus == 'Store Glasgow 266') {
                        res = '1';
                        if (show3 != '') {
                            var n = show3.indexOf(",");
                            if (n == -1) {
                                if (document.getElementById('PayScaleGroup')) {
                                    document.getElementById('PayScaleGroup').value = show3;
                                }
                            }
                            else {
                                var res = show3.substring(0, n);
                                if (document.getElementById('PayScaleGroup')) {
                                    document.getElementById('PayScaleGroup').value = res;
                                }
                            }
                        }
                        else {
                            if (document.getElementById('PayScaleGroup')) {
                                document.getElementById('PayScaleGroup').value = empty;
                            }
                        }
                    }
                    else {
                        res = '1';
                        if (show4 != '') {
                            var n = show4.indexOf(",");
                            if (n == -1) {
                                if (document.getElementById('PayScaleGroup')) {
                                    document.getElementById('PayScaleGroup').value = show4;
                                }
                            }
                            else {
                                var res = show4.substring(0, n);
                                if (document.getElementById('PayScaleGroup')) {
                                    document.getElementById('PayScaleGroup').value = res;
                                }
                            }
                        }
                        else {
                            if (document.getElementById('PayScaleGroup')) {
                                document.getElementById('PayScaleGroup').value = empty;
                            }
                        }
                    }


                    if (show6 != '') {

                        var n = show6.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('OneIKEABonusLevel')) {
                                document.getElementById('OneIKEABonusLevel').value = show6.toString().trim();
                            }
                        }
                        else {
                            var res = show6.substring(0, n);
                            if (document.getElementById('OneIKEABonusLevel')) {
                                document.getElementById('OneIKEABonusLevel').value = re.toString().trim();
                            }
                        }
                        res = '1';
                    }
                    else {
                        res = '1';
                        if (document.getElementById('OneIKEABonusLevel')) {
                            document.getElementById('OneIKEABonusLevel').value = '';
                        }
                    }

                    if (!(show5 == '')) {
                        var n = show5.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('BenefitLevel')) {
                                document.getElementById('BenefitLevel').value = show5.toString().trim();
                            }

                        }
                        else {
                            var res = show5.substring(0, n);
                            if (document.getElementById('BenefitLevel')) {
                                document.getElementById('BenefitLevel').value = res.toString().trim();
                            }

                        }
                        res = '1'
                    }
                    else {

                        res = '1';
                        if (document.getElementById('BenefitLevel')) {
                            document.getElementById('BenefitLevel').value = '';
                        }
                        $('#notice_BenefitLevel').show();
                    }

                }
            });
        }




        function addTecApproversXML(xml) {
            //////////
            //Sets Line manager from predefined_linemanager_department_outs.XML and selected department
            //////////

            var show = ''
            if (document.getElementById('TECApprover')) {
                $('#TECApprover')[0].selectize.setValue('');
            }
            var dep = '';
            if (document.getElementById('NewBusinessUnit')) {
                dep = $("#NewBusinessUnit option:selected").text();
            }

            var line = '';
            if (document.getElementById('ReportsToLineManager')) {
                line = document.getElementById('ReportsToLineManager').value;
            }

            if (dep == 'Distribution Centre Peterborough 012' | dep == 'IKEA Property Services' | dep == 'Peterborough Contact Centre' | dep == 'Service Office UK' | dep == 'Customer Distribution Centre Peterborough 269' | dep == 'E-Commerce') {

                if (document.getElementById('TECApprover')) {
                    $('#TECApprover')[0].selectize.setValue(line);
                }
            }

            else {
                $(xml).find('dependent').each(function () {

                    var $sel = $(this);
                    show = '';

                    var department = $sel.find('selected').text();

                    show = $sel.find('show').text();

                    if (department == dep) {

                        if (show != '') {
                            var n = show.indexOf(",");

                            if (n == -1) {

                                $('#TECApprover')[0].selectize.setValue(show);
                            }
                            else {
                                var res = show.substring(0, n);

                                $('#TECApprover')[0].selectize.setValue(res);
                            }
                            return;
                        }
                    }
                });
            }
        }


        function setLineManagerJobTitle(xml) {
            
            //////////
            //Sets Line manager job title from predefined_linemanager_jobtitle_outs.XML and selected line manager
            //////////
            ///DONE IN CHANGE

            $('#JobTitle').off('change');
            var jobtitle_value;
            jobtitle_value = $('#JobTitle').val();

            var show = ''

            var dep = '';
            var bus = '';

            if (document.getElementById('ServiceArea')) {
                dep = $("#NewServiceArea option:selected").text();
            }
            if (document.getElementById('NewBusinessUnit')) {
                bus = $("#NewBusinessUnit option:selected").text();
            }

            var selectize_tags = $("#JobTitle")[0].selectize
            selectize_tags.clearOptions();

            //_Doncaster
            //var n = bus.indexOf("Doncaster");

            //if (n > 0) {
            //    dep = dep + '_Doncaster';
            //}

            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {

                        show = ' ,' + show;

                        //temp, replace spaces that occours in the beginning of comma separation.
                        show = show.replace(/\, /g, ",");

                        var optionsarray = show.split(',');
                        optionsarray.unshift('');

                        //TEMP for Steering Group_Doncaster, Sales (problem with commas in the name) so we use  #
                        if (show.indexOf("#") > -1) {
                            $.each(optionsarray, function (i) {
                                optionsarray[i] = optionsarray[i].replace(/\#/g, ",");
                            });
                        }

                        var items = optionsarray.map(function (x) { return { text: x, value: x }; });

                        selectize_tags.addOption(items);

                        if (jobtitle_value != '')
                            selectize_tags.setValue(jobtitle_value);
                        else
                            selectize_tags.setValue('');
                        return;
                    }
                }
            });



            $('#JobTitle').on('change', function () {
                ////////
                //JobTitle change function
                setDefaultPayroll();
                addDeductionTypesOnPayroll();
                addAllowanceOnPayroll();
                addPayScaleOnPayroll();
                setPayrollCategory();
                setBasicPayAmount();
            });
        }
        function setLineManagerAndCostCentre(xml) {

            //////////
            //setLineManager:
            //Sets Line manager and cost centre from predefined_function_department_linemanager_outs.XML and selected department
            //////////

            var show1 = '' //Cost Centre
            var show2 = '' //Line manager

            var originalreportstolinemanager = document.getElementById('ReportsToLineManager').value;

            if (document.getElementById('ReportsToLineManager')) {
                $('#ReportsToLineManager')[0].selectize.setValue('');
            }

            var originalhomecostcentre = document.getElementById('HomeCostCentre').value;

            if (document.getElementById('HomeCostCentre')) {
                $('#HomeCostCentre')[0].selectize.setValue('');
            }

            if (document.getElementById('ManagerJobTitle')) {
                $('#ManagerJobTitle')[0].selectize.setValue('');
            }
            var func = '';
            if (document.getElementById('NewServiceArea')) {
                func = $("#NewServiceArea option:selected").text();
            }
            var dep = '';
            if (document.getElementById('NewDepartment')) {
                dep = $("#NewDepartment option:selected").text();
            }
            var resvar = '';
            resvar = func + '_' + dep;


            $(xml).find('dependent').each(function () {

                var $sel = $(this);
                show1 = '';
                show2 = '';

                var department = $sel.find('selected').text();

                show1 = $sel.find('show1').text();
                show2 = $sel.find('show2').text();

                //alert(res);


                if (department == resvar) {



                    if (show1 != '') {
                        var n = show1.indexOf(",");

                        if (n == -1) {
                            //document.getElementById('HomeCostCentre').value = show1;
                            $('#HomeCostCentre')[0].selectize.setValue(show1);
                        }
                        else {
                            var res = show1.substring(0, n);
                            //document.getElementById('HomeCostCentre').value = res;
                            //alert(res);

                            $('#HomeCostCentre')[0].selectize.setValue(res);
                        }
                    }

                    if (show2 != '') {
                        var n = show2.indexOf(",");

                        if (n == -1) {
                            //document.getElementById('HomeCostCentre').value = show1;
                            $('#ReportsToLineManager')[0].selectize.setValue(show2);
                        }
                        else {
                            var res = show2.substring(0, n);
                            //document.getElementById('HomeCostCentre').value = res;
                            //alert(res);

                            $('#ReportsToLineManager')[0].selectize.setValue(res);
                        }
                    }
                }
            });

            if (!('@Model.GetAnswer("ReportsToLineManager")' == '')) {
                if (!(originalreportstolinemanager == '')) {
                    $('#ReportsToLineManager')[0].selectize.setValue('@Model.GetAnswer("ReportsToLineManager")');
                }
            }

            if (!('@Model.GetAnswer("HomeCostCentre")' == '')) {
                if (!(originalhomecostcentre == '')) {
                    $('#HomeCostCentre')[0].selectize.setValue('@Model.GetAnswer("HomeCostCentre")');
                }
            }
        }


        function setLineManager(xml) {
            //////////
            //Sets Line manager from predefined_linemanager_department_outs.XML and selected department
            //////////
            var show = ''
            if (document.getElementById('ReportsToLineManager')) {
                $('#ReportsToLineManager')[0].selectize.setValue('');
            }
            if (document.getElementById('ManagerJobTitle')) {
                $('#ManagerJobTitle')[0].selectize.setValue('');
            }
            var dep = '';
            if (document.getElementById('NewDepartment')) {
                dep = $("#NewDepartment option:selected").text();
            }

            $(xml).find('dependent').each(function () {

                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department == dep) {

                    if (show != '') {

                        var n = show.indexOf(",");

                        if (n == -1) {
                            if (document.getElementById('ReportsToLineManager')) {
                                $('#ReportsToLineManager')[0].selectize.setValue(show);
                            }
                        }
                        else {
                            var res = show.substring(0, n);
                            if (document.getElementById('ReportsToLineManager')) {
                                $('#ReportsToLineManager')[0].selectize.setValue(res);
                            }
                        }
                        return;
                    }

                }
            });
        }

        function setCostCentre(xml) {
            //////////
            //Sets cost centre from predefined_costcentre_department_outs.XML and selected department
            //////////
            var show = ''
            if (document.getElementById('HomeCostCentre')) {
                $('#HomeCostCentre')[0].selectize.setValue('');
            }
            var dep = '';
            if (document.getElementById('NewDepartment')) {
                dep = $("#NewDepartment option:selected").text();
            }
            $(xml).find('dependent').each(function () {

                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department == dep) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {
                            if (document.getElementById('HomeCostCentre')) {
                                $('#HomeCostCentre')[0].selectize.setValue(show);
                            }
                        }
                        else {
                            var res = show.substring(0, n);
                            if (document.getElementById('HomeCostCentre')) {
                                $('#HomeCostCentre')[0].selectize.setValue(res);
                            }
                        }
                        return;
                    }
                }
            });
        }
    }
</script>

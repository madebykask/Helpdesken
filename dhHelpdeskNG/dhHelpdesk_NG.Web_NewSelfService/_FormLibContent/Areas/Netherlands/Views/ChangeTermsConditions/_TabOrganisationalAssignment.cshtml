@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

@{
    
    //Layout = null;
    //Model.Language = "nl";
    var fillOldVal = TempData["oldValues"];
    var newfill = (List<KeyValuePair<string, string>>)fillOldVal;
    const string EmployeeCategory = "Permanent";
}

<div class="tab-pane" id="OrganisationalAssignment">
    <div class="span8">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Organisation")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("OrganisationCountry")</td>
                    <td>@Model.Element("OrganisationCountry")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewCompany")</td>
                    <td>@Model.Element("NewCompany")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_NewCompany" name="OLD_NewCompany" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewCompany").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewCompany">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewCompany").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewBusinessUnit")</td>
                    <td>@Model.Element("NewBusinessUnit")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_NewBusinessUnit" name="OLD_NewBusinessUnit" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewBusinessUnit").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewBusinessUnit">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewBusinessUnit").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewServiceArea")</td>
                    <td>@Model.Element("NewServiceArea")</td>
                    <td>
                         <input type="hidden" class="oldValue"  id="OLD_NewServiceArea" name="OLD_NewServiceArea" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewServiceArea").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewServiceArea">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewServiceArea").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewDepartment")</td>
                    <td>@Model.Element("NewDepartment")</td>
                    <td>
                         <input type="hidden" class="oldValue"  id="OLD_NewDepartment" name="OLD_NewDepartment" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewDepartment").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewDepartment">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewDepartment").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>                
                <tr>
                    <td class="tdstrong">@Model.Label("HomeCostCentre")</td>
                    <td>@Model.Element("HomeCostCentre")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_HomeCostCentre" name="OLD_HomeCostCentre" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_HomeCostCentre").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_HomeCostCentre">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_HomeCostCentre").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CostAllocation")</td>
                    <td>@Model.Element("CostAllocation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CrossChargeCostCentre")</td>
                    <td>@Model.Element("CrossChargeCostCentre")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_CrossChargeCostCentre" name="OLD_CrossChargeCostCentre" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CrossChargeCostCentre").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_CrossChargeCostCentre">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CrossChargeCostCentre").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Job")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("JobTitle")</td>
                    <td>@Model.Element("JobTitle")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_JobTitle" name="OLD_JobTitle" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_JobTitle").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_JobTitle">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_JobTitle").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LocalJobTitle")</td>
                    <td>@Model.Element("LocalJobTitle")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewPosition")</td>
                    <td>@Model.Element("NewPosition")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ReportsToLineManager")</td>
                    <td>@Model.Element("ReportsToLineManager")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_ReportsToLineManager" name="OLD_ReportsToLineManager" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ReportsToLineManager").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_ReportsToLineManager">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ReportsToLineManager").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("EligibleForManagementAllowance")</td>
                    <td>@Model.Element("EligibleForManagementAllowance")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Employment Conditions")</h4>
                    </td>
                    <td class="tdstrong">
                        <h4>@Model.Translate("Current record")</h4>
                    </td> 
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("EmploymentCategory")</td>
                    <td>@Model.Element("EmploymentCategory")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_EmploymentCategory" name="OLD_EmploymentCategory" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_EmploymentCategory").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_EmploymentCategory">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_EmploymentCategory").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractEndDate")</td>
                    <td>@Model.Element("ContractEndDate")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ResidencePermitRestriction")</td>
                    <td>@Model.Element("ResidencePermitRestriction")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractedHours")</td>
                    <td>@Model.Element("ContractedHours")</td>  
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_ContractedHours" name="OLD_ContractedHours" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ContractedHours").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_ContractedHours">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ContractedHours").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>                  
                </tr>
                @*<tr>
                    <td class="tdstrong">@Model.Label("PreviousContractHours")</td>
                    <td>@Model.Element("PreviousContractHours")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_PreviousContractHours" name="OLD_PreviousContractHours" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_PreviousContractHours").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_PreviousContractHours">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_PreviousContractHours").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("ContractType")</td>
                    <td>@Model.Element("ContractType")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ProbationPeriod")</td>
                    <td>@Model.Element("ProbationPeriod")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ProbationEndDate")</td>
                    <td>@Model.Element("ProbationEndDate")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("CDS")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PrimarySite")</td>
                    <td>@Model.Element("PrimarySite")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TECApprover")</td>
                    <td>@Model.Element("TECApprover")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("HelpDesk")</td>
                    <td>@Model.Element("HelpDesk")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Apprentice education")</h4>
                    </td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>                
                <tr>
                    <td class="tdstrong">@Model.Label("NameOfSchool")</td>
                    <td>@Model.Element("NameOfSchool")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NameOfEducation")</td>
                    <td>@Model.Element("NameOfEducation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CityEducationSchool")</td>
                    <td>@Model.Element("CityEducationSchool")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LevelOfEducation")</td>
                    <td>@Model.Element("LevelOfEducation")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("MentorAtIKEA")</td>
                    <td>@Model.Element("MentorAtIKEA")</td>
                </tr>
            </tbody>
        </table>
    </div>

</div>

<script>   

    //$('#JobTitle').change(function () {

    //    var relatedvalue = $('option:selected', this).attr('relatedid');         
    //    $('#LocalJobTitle').val(relatedvalue);
    
    //});

    //$('#LocalJobTitle').change(function () {

    //    var relatedvalue = $('option:selected', this).attr('relatedid');
    //    $('#JobTitle').val(relatedvalue);

    //});
       
    function selectIndexChangeProbationPeriod() {
        
        var probitionEndDate = document.getElementById('ProbationEndDate');
        if (this.options[this.selectedIndex].value == 'No') {

            $('#ProbationEndDate').val('');
            $('#date_ProbationEndDate').datepicker("destroy");
            $('#date_ProbationEndDate').addClass("disabled");
            $('#ProbationEndDate').prop('disabled', true);
        } else {
            $('#date_ProbationEndDate').datepicker();
            $('#ProbationEndDate').prop('disabled', false);
            $("#ProbationEndDate").removeClass("disabled");

            var validFrom = document.getElementById('ChangeValidFrom');
            var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
            var date = APIGlobal.DateTime.parseDate(validFrom.value, format);
            date.setMonth(date.getMonth() + 2);

            probitionEndDate.value = APIGlobal.DateTime.formatDate(date, format);
        }
    }
    document.getElementById('ProbationPeriod').onchange = selectIndexChangeProbationPeriod;

// Disable/Enable Contract end Date 
    function setEmployeeBehavior(value) {
        if (value == '@EmployeeCategory') {
             $('#date_ContractEndDate').datepicker("destroy");
             $('#date_ContractEndDate').addClass("disabled");
             $('#ContractEndDate').prop('disabled', true);
         }
         else {
             $('#date_ContractEndDate').datepicker();
             $('#ContractEndDate').prop('disabled', false);
             $("#ContractEndDate").removeClass("disabled");
         }
     }

     if ($('EmploymentCategory').val() == '@EmployeeCategory') {
        $('#date_ContractEndDate').datepicker("destroy");
        $('#date_ContractEndDate').addClass("disabled");
        $('#ContractEndDate').prop('disabled', true);
    }


    $('#EmploymentCategory').change(function () {
        setEmployeeBehavior($(this).val());
    });
   
   
        function selectIndexChangeLineManagertoTECApprover() {
            document.getElementById('TECApprover').value = document.getElementById('ReportsToLineManager').value;
        }
        document.getElementById('ReportsToLineManager').onchange = selectIndexChangeLineManagertoTECApprover;


        function selectIndexChangeBusinessUnittoPrimarySite() {

            document.getElementById('PrimarySite').value = document.getElementById('NewBusinessUnit').value;

        }
        document.getElementById('NewBusinessUnit').onchange = selectIndexChangeBusinessUnittoPrimarySite;

        var changeType = document.getElementById('ChangeType').value;
        if (changeType == 'ONLY extend temporary contract') {
            $("#EmploymentCategory option").each(function () {
                $(this).prop('disabled', true);
            });
            $('#EmploymentCategory').find("option[value*='Temporary']").prop("disabled", false);
        }

    ////////////////////////////////////////////////////////////

    //    $('#NewDepartment').change(function () {

            
    //        var path = window.location.protocol + '//';
    //        path = path + window.location.host + '/';

    //        var n = path.indexOf("localhost")
    //        if (n == -1) {
    //            path = path + 'ect/FormLibContent/Xmls/Netherlands/Templates/Predifened_CostCentre.xml'
    //        }
    //        else {
    //            path = path + 'FormLibContent/Xmls/Netherlands/Templates/Predifened_CostCentre.xml'
    //        }

    //        $.ajax({
    //            type: "GET",
    //            url: path,
    //            dataType: "xml",
    //            success: setCostCentre,
    //            error: function (jqXHR, textStatus, errorThrown) {
    //                alert(jqXHR.responseText);
    //                alert(textStatus);
    //                alert(errorThrown);
    //            }

    //        });




    //    });

    //    function setReportToLineManager(xml) {

    //        var show = ''
    //        var dep = $("#NewBusinessUnit option:selected").text();




    //        $(xml).find('dependent').each(function () {

    //            var $book = $(this);
    //            show = '';

    //            var department = $book.find('selected').text();

    //            show = $book.find('show').text();

    //            if (department == dep) {


    //                if (show != '') {


    //                    //           $('#ReportsToLineManager')
    //                    //.append($("<option></option>")
    //                    //.attr("value", show)
    //                    //.text(show));


    //                    return;
    //                }
    //            }


    //        });



    //    }

    //    function setCostCentre(xml) {
    //        var show = ''
    //        var dep = $("#NewDepartment option:selected").text();
    //        $(xml).find('dependent').each(function () {

    //            var $book = $(this);
    //            show = '';

    //            var department = $book.find('selected').text();

    //            show = $book.find('show').text();

    //            if (department == dep) {

    //                if (show != '') {
    //                    var n = show.indexOf(",");

    //                    if (n == -1) {

    //                        $('#HomeCostCentre')[0].selectize.setValue(show);
    //                        $('#CrossChargeCostCentre')[0].selectize.setValue(show);

    //                    }
    //                    else {
    //                        var res = show.substring(0, n);

    //                        $('#HomeCostCentre')[0].selectize.setValue(res);
    //                        $('#CrossChargeCostCentre')[0].selectize.setValue(res);
    //                    }
    //                    return;
    //                }
    //            }
    //        });



    //    }



    //    $('#ReportsToLineManager').change(function () {
    //        var value = $(this).val();
    //        if ($('#ReportsToLineManager')[0].selectize) {
    //            var selectedText = $('#ReportsToLineManager')[0].selectize.getItem(value).text();

    //            if ($('#TECApprover')[0].selectize) {
    //                $('#TECApprover')[0].selectize.setValue(selectedText);
    //            }
    //            else {
    //                $('#TECApprover').val(selectedText);
    //            }
    //        }
    //        else {
    //            var selectedText = $('#ReportsToLineManager').find('option:selected').text();
    //            if ($('#TECApprover')[0].selectize) {
    //                $('#TECApprover')[0].selectize.setValue(selectedText);
    //            }
    //            else {
    //                var selectedText = $('#ReportsToLineManager').find('option:selected').text();
    //                $('#TECApprover').val(selectedText);
    //            }
    //        }
    //    });


    //    $('#NewBusinessUnit').change(function () {
    //        var value = $(this).val();
    //        if ($('#NewBusinessUnit')[0].selectize) {
    //            var selectedText = $('#NewBusinessUnit')[0].selectize.getItem(value).text();

    //            if ($('#PrimarySite')[0].selectize) {
    //                $('#PrimarySite')[0].selectize.setValue(selectedText);
    //            }
    //            else {
    //                $('#PrimarySite').val(selectedText);
    //            }
    //        }
    //        else {
    //            var selectedText = $('#NewBusinessUnit').find('option:selected').text();
    //            if ($('#PrimarySite')[0].selectize) {
    //                $('#PrimarySite')[0].selectize.setValue(selectedText);
    //            }
    //            else {
    //                var selectedText = $('#NewBusinessUnit').find('option:selected').text();
    //                $('#PrimarySite').val(selectedText);
    //            }
    //        }
    //    });
</script>

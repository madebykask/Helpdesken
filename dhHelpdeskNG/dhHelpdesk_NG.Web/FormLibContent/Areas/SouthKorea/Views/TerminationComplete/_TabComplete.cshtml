@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
@{
    const string TerminationPaymentTypeDefault = "";
}
<div class="tab-pane" id="Complete">
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Termination Details")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CompleteTerminationType")</td>
                    <td>
                        @Model.Element("CompleteTerminationType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TerminationReason")</td>
                    <td>
                        @Model.Element("TerminationReason")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TerminationPaymentMethod")</td>
                    <td>
                        @Model.Element("TerminationPaymentMethod")</td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Termination Payments")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TerminationPaymentType")</td>
                    <td>
                        @Model.Element("TerminationPaymentType")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TerminationAmountUnits")</td>
                    <td>
                        @Model.Element("TerminationAmountUnits")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NetGross")</td>
                    <td>
                        @Model.Element("NetGross")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TerminationPaymentDate")</td>
                    <td>
                        @Model.Element("TerminationPaymentDate")

                        <div id="notice_TerminationPaymentDate" style="display: none;" class="notice">
                            @Model.Translate("The date you've entered is in the past.")
                            <br />
                            @Model.Translate("Are you sure you want to backdate Payment Date?")
                        </div>
                    </td>
                </tr>
                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="terminationpayments@(i.ToString())" id="terminationpayments@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Termination Payments") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="terminationpayments@(i.ToString())">
                        <td class="tdstrong">@Model.Label("TerminationPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("TerminationPaymentType" + i.ToString())</td>
                    </tr>
                    <tr class="terminationpayments@(i.ToString())">
                        <td class="tdstrong">@Model.Label("TerminationAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("TerminationAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="terminationpayments@(i.ToString())">
                          <td class="tdstrong">@Model.Label("NetGross" + i.ToString())</td>
                          <td>
                              @Model.Element("NetGross" + i.ToString())</td>
                      </tr>@*
                      <tr class="terminationpayments@(i.ToString())">
                          <td class="tdstrong">@Model.Label("OneIKEABonusDue" + i.ToString())</td>
                          <td>
                              @Model.Element("OneIKEABonusDue" + i.ToString())
                              <div id="notice_OneIKEABonusDue@(i.ToString())" style="display:none;" class="notice">
                            @Model.Translate("Check with SO Business Navigator")
                        </div>
                          </td>
                      </tr>*@
                      <tr class="terminationpayments@(i.ToString())">
                          <td class="tdstrong">@Model.Label("TerminationPaymentDate" + i.ToString())</td>
                          <td>
                              @Model.Element("TerminationPaymentDate" + i.ToString())

                              <div id="notice_TerminationPaymentDate@(i.ToString())" style="display:none;" class="notice">
                            @Model.Translate("The date you've entered is in the past.")
                                <br />
                             @Model.Translate("Are you sure you want to backdate Payment Date?")
                        </div>
                          </td>
                      </tr>
                }
                <tr id="addTerminationPaymentsTrr">
                    <td colspan="2">
                        @Model.Element("TerminationPayments")
                        <a id="addTerminationPayment" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another termination payment")</a></td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Deductions from Termination Payment")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionType")</td>
                    <td>
                        @Model.Element("DeductionType")</td>
                </tr>
                @*                            <tr>
                <td class="tdstrong">@Model.Label("OtherDeduction")</td>
                <td>
                    @Model.Element("OtherDeduction")</td>
            </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionAmountUnits")</td>
                    <td>
                        @Model.Element("DeductionAmountUnits")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionNetGross")</td>
                    <td>
                        @Model.Element("DeductionNetGross")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionDate")</td>
                    <td>
                        @Model.Element("DeductionDate")</td>
                </tr>


                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="deduction@(i.ToString())" id="deduction@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Deductions from Termination Payment") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionType" + i.ToString())</td>
                    </tr>@*
                      <tr class="deduction@(i.ToString())">
                          <td class="tdstrong">@Model.Label("OtherDeduction" + i.ToString())</td>
                          <td>
                              @Model.Element("OtherDeduction" + i.ToString())</td>
                      </tr>*@
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionAmountUnits" + i.ToString())</td>
                    </tr>              
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionNetGross" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionNetGross" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionDate" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionDate" + i.ToString())</td>
                    </tr>
                }

                <tr id="addDeductionTrr">
                    <td colspan="2">
                        @Model.Element("Deductions")
                        <a id="addDeduction" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another deduction from Termination Payment")</a></td>
                </tr>
              
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Country Specifics")</h4>
                    </td>
                </tr>

                @*<tr>
                    <td class="tdstrong">@Model.Label("AdjustmentType")</td>
                    <td>
                        @Model.Element("AdjustmentType")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AdjustmentAmountUnits")</td>
                    <td>
                        @Model.Element("AdjustmentAmountUnits")</td>
                </tr>
                 <tr>
                    <td class="tdstrong">@Model.Label("AdjustmentDate")</td>
                    <td>
                        @Model.Element("AdjustmentDate")</td>
                </tr>*@
                 <tr>
                    <td class="tdstrong">@Model.Label("LeavingReason")</td>
                    <td>
                        @Model.Element("LeavingReason")</td>
                </tr>

            </tbody>
        </table>
    </div>
    <input type="hidden" id="MultipleEntrySectionsNr" value="@FormLibConstants.FormField.MultipleEntrySectionsNr" />
</div>

<script>

    $('#addTerminationPayment').click(function (e) {

        //add 1, since the counter in the hidden field (#TerminationPayments) is updated in the click event in etc.js
        var counterTerminationPayments = parseInt($('#TerminationPayments').val()) + 1;
        //set default value
        $('#TerminationPaymentType' + counterTerminationPayments).val('@TerminationPaymentTypeDefault');
    });

    $('#TerminationPaymentDate').change(function () {

        var startDate = $('#TerminationPaymentDate').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dstartDate = APIGlobal.DateTime.parseDate(startDate, format);
        var nowTemp = new Date();
        var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);

        if (dstartDate.valueOf() < now.valueOf()) {
            $('#notice_TerminationPaymentDate').show();
        }
    });

    var TerminationPaymentDate = $('#notice_TerminationPaymentDate');
    var dateDatePicker = $('#date_TerminationPaymentDate');
    if (TerminationPaymentDate.length > 0) {
        var startDate = new Date();
        startDate.setHours(0, 0, 0, 0);

        dateDatePicker.not(".disabled").datepicker()
            .on('changeDate', function (e) {
                if (e.date.valueOf() < startDate.valueOf()) {

                    TerminationPaymentDate.show();
                } else {

                    TerminationPaymentDate.hide();
                }
            });
    }




    function selectIndexChangeTerminationType() {
        if (document.getElementById('CompleteTerminationType')) {
            if (document.getElementById('BasicTerminationType'))
                document.getElementById('CompleteTerminationType').value = document.getElementById('BasicTerminationType').value;
        }
    }

    $("#BasicTerminationType").change(function () {
        selectIndexChangeTerminationType();
    });

    //#52776 added in CR 
    $('#BasicTerminationReason').change(function () {
        $('#TerminationReason').val($(this).val());
    });


    function setDatesToLastDayOfEmplyment() {

        document.getElementById('LockCDSAccountFrom').value = document.getElementById('LastDayOfEmployment').value;
        //document.getElementById('AdjustmentDate').value = document.getElementById('LastDayOfEmployment').value;

        if (document.getElementById('PaymentDate')) {
            document.getElementById('PaymentDate').value = document.getElementById('LastDayOfEmployment').value;

            for (var i = 2; i <= 5; i++) {
                var PaymentDate = "PaymentDate" + [i].toString();


                document.getElementById(PaymentDate).value = document.getElementById('LastDayOfEmployment').value;

            }
        }
        else {
            if (document.getElementById('TerminationPaymentDate')) {
                document.getElementById('TerminationPaymentDate').value = document.getElementById('LastDayOfEmployment').value;

                for (var i = 2; i <= 5; i++) {
                    var PaymentDate = "TerminationPaymentDate" + [i].toString();


                    document.getElementById(PaymentDate).value = document.getElementById('LastDayOfEmployment').value;

                }
            }
        }

        //this rows is specific to Complete Termination Details
        if (document.getElementById('DeductionDate')) {

            document.getElementById('DeductionDate').value = document.getElementById('LastDayOfEmployment').value;

            for (var i = 2; i <= 5; i++) {

                var DeductionDate = "DeductionDate" + [i].toString();


                document.getElementById(DeductionDate).value = document.getElementById('LastDayOfEmployment').value;
            }
        }
    }

    var LastDayOfEmployment = $('#date_LastDayOfEmployment');
    LastDayOfEmployment.not(".disabled").datepicker()
            .on('changeDate', function (e) {

                setDatesToLastDayOfEmplyment();

            });
 
    // To sets the value without choosing from calender
    LastDayOfEmployment.not(".disabled").datepicker()
            .on('change', function (e) {
               
                setDatesToLastDayOfEmplyment();
            });
</script>

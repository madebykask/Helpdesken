@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
@{
    const string ContractType = "Permanent";
    const string PartTime = "Part Time";
    const string FullTime = "Full Time";
    const string DefaultProbationPeriod = "Yes";
}
<div class="tab-pane" id="payment">
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Basic pay")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayrollCategory")</td>
                    <td>
                        @Model.Element("PayrollCategory")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PayScaleGroup")</td>
                    <td>
                        @Model.Element("PayScaleGroup")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BasicPayAmount")</td>
                    <td>
                        @Model.Element("BasicPayAmount")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Allowances")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesType")</td>
                    <td>
                        @Model.Element("AllowancesType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesAmountUnits")</td>
                    <td>
                        @Model.Element("AllowancesAmountUnits")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesPaidPer")</td>
                    <td>
                        @Model.Element("AllowancesPaidPer")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidFrom")</td>
                    <td>
                        @Model.Element("AllowancesValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidTo")</td>
                    <td>
                        @Model.Element("AllowancesValidTo")
                    </td>
                </tr>
                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="allowance@(i.ToString())" id="allowance@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Allowances") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesType" + i.ToString())

                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesPaidPer" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesPaidPer" + i.ToString())</td>
                    </tr>
                   <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addAllowanceTrr">
                    <td colspan="2">
                        @Model.Element("Allowances")
                        <a id="addAllowance" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Allowance")</a></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Deductions")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsType")</td>
                    <td>
                        @Model.Element("DeductionsType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsAmountUnits")</td>
                    <td>
                        @Model.Element("DeductionsAmountUnits")
                    </td>
                </tr>
                                <tr>
                    <td class="tdstrong">@Model.Label("DeductedPer")</td>
                    <td>
                        @Model.Element("DeductedPer")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidFrom")</td>
                    <td>
                        @Model.Element("DeductionsValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidTo")</td>
                    <td>
                        @Model.Element("DeductionsValidTo")
                    </td>
                </tr>
                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="deduction@(i.ToString())" id="deduction@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Deductions") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsType" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductedPer" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductedPer" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addDeductionTrr">
                    <td colspan="2">
                        @Model.Element("Deductions")
                        <a id="addDeduction" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Deduction")</a></td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Bonus Eligibility")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("OneIKEABonusLevel")</td>
                    <td>
                        @Model.Element("OneIKEABonusLevel")
                    </td>
                </tr>
                <tr class="globalmobility-first">
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Global Mobility")</h4>
                    </td>
                </tr>
                <tr class="globalmobility-first">
                    <td class="tdstrong">@Model.Label("TaxAssignment")</td>
                    <td>
                        @Model.Element("TaxAssignment")
                    </td>
                </tr>
                <tr class="globalmobility-first">
                    <td class="tdstrong">@Model.Label("SocialInsuranceAssignment")</td>
                    <td>
                        @Model.Element("SocialInsuranceAssignment")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Country Specifics")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DateOfNextSalaryReview")</td>
                    <td>
                        @Model.Element("DateOfNextSalaryReview")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("BenefitLevel")</td>
                    <td>@Model.Element("BenefitLevel")
                        <div id="notice_BenefitLevel" style="display:inline-block; color:black;" class="notice">
                            @Model.Translate("If no default value, please consult UK & IE Comps & Bens Mgr")
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <input type="hidden" id="MultipleEntrySectionsNr" value="@FormLibConstants.FormField.MultipleEntrySectionsNr" />
</div>

<script>


    var lockedbyUserGroup = document.getElementById('LockedByUserGroup').getAttribute('status');



    if ("@Model.ReadOnlyTab("#payment")" == 'False' && lockedbyUserGroup == 'False') {

        // SCRIPTS FROM ORGANISATIONAL ASSIGNMENT
        function setProbationEndDate(value) {
            var probationEndDate = $('#ProbationEndDate');

            if (value == '@DefaultProbationPeriod') {

                var sStart = $('#ContractStartDate').val();
                var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
                var dStart = APIGlobal.DateTime.parseDate(sStart, format);

                var endDate = new Date(dStart.getFullYear(), dStart.getMonth() + 6, dStart.getDate() - 1, 0, 0, 0, 0);
                var visibleDate = APIGlobal.DateTime.formatDate(endDate, format);
                probationEndDate.val(visibleDate.toString());
            }
            else {
                probationEndDate.val("");
            }
        };

        function setEmployeeBehavior(value) {
            if (value == '@ContractType') {
                $('#date_ContractEndDate').datepicker("destroy");
                $('#date_ContractEndDate').addClass("disabled");
                $('#ContractEndDate').prop('disabled', true);
                $('#ContractEndDate').val("");
            }
            else {
                $('#date_ContractEndDate').datepicker();
                $('#ContractEndDate').prop('disabled', false);
                $("#ContractEndDate").removeClass("disabled");
            }
        }

        if ($('#ContractType').val() == '@ContractType') {
            $('#date_ContractEndDate').datepicker("destroy");
            $('#date_ContractEndDate').addClass("disabled");
            $('#ContractEndDate').prop('disabled', true);
            $('#ContractEndDate').val("");
        }

        $('#ContractType').change(function () {
            setEmployeeBehavior($(this).val());
        });

        $('#ContractedHours').change(function () {
            var value = $(this).val();

            // if Contracted Hours less than 38 – Employment Category default value "Part time"; 
            //if Contracted Hours equals 39 – Employment Category default value "Full time"; 
            //if Contract Type "Zero hours" – Contracted Hours default value “0”, available for all companies except for Distribution
            if (value <= 38) {
                $('#EmploymentCategory option[value="' + '@PartTime' + '"]').prop('selected', true);
            }
            else if (value == 39) {
                $('#EmploymentCategory option[value="' + '@FullTime' + '"]').prop('selected', true);
            }
            else {
                $('#EmploymentCategory option:not([value])').prop('selected', true);
            }
        });

        $('#ServiceArea').change(function () {
            setTimeout(function () { GetXML('predefined_function_department_linemanager_outs.xml', setLineManagerAndCostCentre); }, 1);
        });

        $('#ProbationPeriod').change(function () {
            setProbationEndDate($(this).val());
        });

        $('#ContractStartDate').change(function () {
            setProbationEndDate($('#ProbationPeriod').val());
        });

        $('#AllowancesType5').change(function () {
            GetXML('predefined_allowancetype_units_payment_IE_outs.xml', setAllowanceTypeXML5);
        });

        $('#AllowancesType4').change(function () {
            GetXML('predefined_allowancetype_units_payment_IE_outs.xml', setAllowanceTypeXML4);
        });

        $('#AllowancesType3').change(function () {
            GetXML('predefined_allowancetype_units_payment_IE_outs.xml', setAllowanceTypeXML3);
        });

        $('#AllowancesType2').change(function () {
            GetXML('predefined_allowancetype_units_payment_IE_outs.xml', setAllowanceTypeXML2);
        });

        $('#AllowancesType').change(function () {
            GetXML('predefined_allowancetype_units_payment_IE_outs.xml', setAllowanceTypeXML);
        });

        $('#PayScaleGroup').change(function () {
            setBasicPayAmount();
        });

        $('#ReportsToLineManager').change(function () {
            setTimeout(function () { GetXML('predefined_linemanager_department_outs.xml', setLineManagerJob); }, 3);
        });

        $('#PayrollCategory').change(function () {
            addPayScaleOnPayroll();
            setPayrollCategory();
            addDeductionTypes();
            setBasicPayAmount();
        });

        $('#Department').change(function () {
            GetXML('predefined_function_department_linemanager_outs.xml', setLineManagerAndCostCentre);
            setTimeout(function () { GetXML('predefined_linemanager_department_outs.xml', setLineManagerJob); }, 30);
        });

        $('#BusinessUnit').change(function () {
            ect.copyValueFrom($('#BusinessUnit'), $('#PrimarySite'));
            GetXML('predefined_department_tecapprover_outs.xml', setTecApprover);
        });

        $('#date_ContractStartDate').not(".disabled").datepicker().on('changeDate', function (ev) {
            setProbationEndDate($('#ProbationPeriod').val());
        });

        $('#ContractStartDate').change(function () {
            setProbationEndDate($('#ProbationPeriod').val());
        });

        function addPayScaleOnPayroll() {
            GetXML('predefined_payroll_payscale_outs.xml', addPayScaleOnPayrollXML);
        }

        function setDefaultPayroll(xml) {
            GetXML('predefined_payroll_category_IE_outs.xml', setDefaultPayrollXML);
        }

        function addDeductionTypes() {
            GetXML('Predefined_PayrollCategory_DeductionType.xml', addDeductionTypesFunction);
        }

        function GetXML(xmlFile, url) {
            var path = window.location.protocol + '//';
            path = path + window.location.host + '/';

            path = site.baseUrl + '/FormLibContent/Xmls/Ireland/Templates/' + xmlFile

            $.ajax({
                type: "GET",
                url: path,
                dataType: "xml",
                success: url,
                error: function (jqXHR, textStatus, errorThrown) {
                    alert(jqXHR.responseText);
                    alert(textStatus);
                    alert(errorThrown);
                }
            });
        }

        function setLineManagerAndCostCentre(xml) {
            var show1 = '' //Cost Centre
            var show2 = '' //Line manager

            if (document.getElementById('ReportsToLineManager')) {
                $('#ReportsToLineManager')[0].selectize.setValue('');
            }
            if (document.getElementById('HomeCostCentre')) {
                $('#HomeCostCentre')[0].selectize.setValue('');
            }

            if (document.getElementById('ManagerJobTitle')) {
                $('#ManagerJobTitle')[0].selectize.setValue('');
            }
            var func = '';
            if (document.getElementById('ServiceArea')) {
                func = $("#ServiceArea option:selected").text();
            }
            var dep = '';
            if (document.getElementById('Department')) {
                dep = $("#Department option:selected").text();
            }
            var resvar = '';
            resvar = func + '_' + dep;


            $(xml).find('dependent').each(function () {

                var $sel = $(this);
                show1 = '';
                show2 = '';

                var department = $sel.find('selected').text();

                show1 = $sel.find('show1').text();
                show2 = $sel.find('show2').text();

                //alert(res);


                if (department == resvar) {



                    if (show1 != '') {
                        var n = show1.indexOf(",");


                        if (n == -1) {
                            //document.getElementById('HomeCostCentre').value = show1;
                            $('#HomeCostCentre')[0].selectize.setValue(show1);
                        }
                        else {
                            var res = show1.substring(0, n);
                            //document.getElementById('HomeCostCentre').value = res;
                            //alert(res);

                            $('#HomeCostCentre')[0].selectize.setValue(res);
                        }
                        if (show1.indexOf("3560") > -1) {
                            $('#HomeCostCentre')[0].selectize.setValue(show1);
                        }
                    }

                    if (show2 != '') {
                        var n = show2.indexOf(",");

                        if (n == -1) {
                            //document.getElementById('HomeCostCentre').value = show1;
                            $('#ReportsToLineManager')[0].selectize.setValue(show2);
                        }
                        else {
                            var res = show2.substring(0, n);
                            //document.getElementById('HomeCostCentre').value = res;
                            //alert(res);

                            $('#ReportsToLineManager')[0].selectize.setValue(res);
                        }
                    }
                }
            });
        }

        function setLineManagerDefault(xml) {
            $('#JobTitle').off('change');
            var show = ''

            var dep = '';

            var jobtitle_value;
            jobtitle_value = $('#JobTitle').val();


            if (document.getElementById('ServiceArea')) {
                dep = $("#ServiceArea option:selected").text();
            }

            var selectize_tags = $("#JobTitle")[0].selectize
            selectize_tags.clearOptions();


            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();


                if (department == dep) {

                    if (show != '') {

                        var optionsarray = show.split(',');
                        optionsarray.unshift('');

                        $.each(optionsarray, function (i) {
                            selectize_tags.addOption({
                                text: optionsarray[i],
                                value: optionsarray[i]
                            });
                            selectize_tags.addItem(optionsarray[i])
                        });

                        if (jobtitle_value != '')
                            selectize_tags.setValue(jobtitle_value);
                        else
                            selectize_tags.setValue('');


                        return;

                    }
                }
            });

            $('#JobTitle').on('change', function () {

                setDefaultPayroll();
                addPayScaleOnPayroll();
                setPayrollCategory();
                setBasicPayAmount();
            });
        }

        function setAllowanceTypeXML5(xml) {
            var show = ''
            var show2 = ''

            if (document.getElementById('AllowancesAmountUnits5')) {
                document.getElementById('AllowancesAmountUnits5').value = '';
            }
            if (document.getElementById('AllowancesNetGross5')) {
                document.getElementById('AllowancesNetGross5').value = '';
            }

            var res = '0';

            var dep = '';
            if (document.getElementById('AllowancesType5')) {
                dep = document.getElementById('AllowancesType5').value;
            }

            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';
                show2 = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();
                show2 = $sel.find('show2').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {
                        if (document.getElementById('AllowancesAmountUnits5')) {
                            document.getElementById('AllowancesAmountUnits5').value = show;
                        }

                        res = '1';
                    }

                    if (show2 != '') {
                        var n = show2.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('AllowancesNetGross5')) {
                                document.getElementById('AllowancesNetGross5').value = show2;
                            }
                        }
                        else {
                            var res = show2.substring(0, n);
                            if (document.getElementById('AllowancesNetGross5')) {
                                document.getElementById('AllowancesNetGross5').value = res;
                            }
                        }
                        res = '1';
                    }


                    if (res == 1) {
                        return;
                    }
                }
            });
        }

        function setAllowanceTypeXML4(xml) {
            var show = ''
            var show2 = ''

            if (document.getElementById('AllowancesAmountUnits4')) {
                document.getElementById('AllowancesAmountUnits4').value = '';
            }
            if (document.getElementById('AllowancesNetGross4')) {
                document.getElementById('AllowancesNetGross4').value = '';
            }

            var res = '0';

            var dep = '';
            if (document.getElementById('AllowancesType4')) {
                dep = document.getElementById('AllowancesType4').value;
            }

            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';
                show2 = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();
                show2 = $sel.find('show2').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {
                        if (document.getElementById('AllowancesAmountUnits4')) {
                            document.getElementById('AllowancesAmountUnits4').value = show;
                        }

                        res = '1';
                    }

                    if (show2 != '') {
                        var n = show2.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('AllowancesNetGross4')) {
                                document.getElementById('AllowancesNetGross4').value = show2;
                            }
                        }
                        else {
                            var res = show2.substring(0, n);
                            if (document.getElementById('AllowancesNetGross4')) {
                                document.getElementById('AllowancesNetGross4').value = res;
                            }
                        }
                        res = '1';
                    }


                    if (res == 1) {
                        return;
                    }
                }
            });
        }

        function setAllowanceTypeXML3(xml) {
            var show = ''
            var show2 = ''

            if (document.getElementById('AllowancesAmountUnits3')) {
                document.getElementById('AllowancesAmountUnits3').value = '';
            }
            if (document.getElementById('AllowancesNetGross3')) {
                document.getElementById('AllowancesNetGross3').value = '';
            }

            var res = '0';

            var dep = '';
            if (document.getElementById('AllowancesType3')) {
                dep = document.getElementById('AllowancesType3').value;
            }

            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';
                show2 = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();
                show2 = $sel.find('show2').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {
                        if (document.getElementById('AllowancesAmountUnits3')) {
                            document.getElementById('AllowancesAmountUnits3').value = show;
                        }

                        res = '1';
                    }

                    if (show2 != '') {
                        var n = show2.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('AllowancesNetGross3')) {
                                document.getElementById('AllowancesNetGross3').value = show2;
                            }
                        }
                        else {
                            var res = show2.substring(0, n);
                            if (document.getElementById('AllowancesNetGross3')) {
                                document.getElementById('AllowancesNetGross3').value = res;
                            }
                        }
                        res = '1';
                    }


                    if (res == 1) {
                        return;
                    }
                }
            });
        }

        function setAllowanceTypeXML2(xml) {
            var show = ''
            var show2 = ''
            if (document.getElementById('AllowancesAmountUnits2')) {
                document.getElementById('AllowancesAmountUnits2').value = '';
            }
            if (document.getElementById('AllowancesNetGross2')) {
                document.getElementById('AllowancesNetGross2').value = '';
            }

            var res = '0';

            var dep = '';
            if (document.getElementById('AllowancesType2')) {
                dep = document.getElementById('AllowancesType2').value;
            }

            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';
                show2 = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();
                show2 = $sel.find('show2').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {
                        if (document.getElementById('AllowancesAmountUnits2')) {
                            document.getElementById('AllowancesAmountUnits2').value = show;
                        }
                        res = '1';
                    }

                    if (show2 != '') {
                        var n = show2.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('AllowancesNetGross2')) {
                                document.getElementById('AllowancesNetGross2').value = show2;
                            }
                        }
                        else {
                            var res = show2.substring(0, n);
                            if (document.getElementById('AllowancesNetGross2')) {
                                document.getElementById('AllowancesNetGross2').value = res;
                            }
                        }
                        res = '1';
                    }


                    if (res == 1) {
                        return;
                    }
                }
            });
        }

        function setAllowanceTypeXML(xml) {
            var show = ''
            var show2 = ''
            if (document.getElementById('AllowancesAmountUnits')) {
                document.getElementById('AllowancesAmountUnits').value = '';
            }

            if (document.getElementById('AllowancesNetGross')) {
                document.getElementById('AllowancesNetGross').value = '';
            }

            var res = '0';

            var dep = '';
            if (document.getElementById('AllowancesType')) {
                dep = document.getElementById('AllowancesType').value;
            }

            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';
                show2 = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();
                show2 = $sel.find('show2').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {
                        if (document.getElementById('AllowancesAmountUnits')) {
                            document.getElementById('AllowancesAmountUnits').value = show;
                        }
                        res = '1';
                    }

                    if (show2 != '') {
                        var n = show2.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('AllowancesNetGross')) {
                                document.getElementById('AllowancesNetGross').value = show2;
                            }
                        }
                        else {
                            var res = show2.substring(0, n);
                            if (document.getElementById('AllowancesNetGross')) {
                                document.getElementById('AllowancesNetGross').value = res;
                            }
                        }
                        res = '1';
                    }


                    if (res == 1) {
                        return;
                    }
                }
            });
        }



        function setDefaultPayrollXML(xml) {
            var show = ''
            var res = '0';

            var dep = '';
            if (document.getElementById('JobTitle')) {
                dep = document.getElementById('JobTitle').value;
            }

            var bus = '';
            if (document.getElementById('BusinessUnit')) {
                bus = $("#BusinessUnit option:selected").text();
            }

            $(xml).find('dependent').each(function () {
                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show4').text();

                //alert(department);
                if (department.toString().trim() == dep.toString().trim()) {



                    res = '1';
                    if (show != '') {
                        var n = show.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('PayrollCategory')) {
                                document.getElementById('PayrollCategory').value = show;

                            }
                        }
                        else {
                            var res = show.substring(0, n);
                            if (document.getElementById('PayrollCategory')) {
                                document.getElementById('PayrollCategory').value = res;
                            }
                        }
                    }
                    else {
                        if (document.getElementById('PayrollCategory')) {
                            document.getElementById('PayrollCategory').value = '';
                        }
                    }

                    //  setBasicPayAmount();

                }
            });
            addPayScaleOnPayroll();

            setPayrollCategory();

            setBasicPayAmount();
        }

        function addPayScaleOnPayrollXML(xml) {
            ///DONE IN CHANGE
            var show = ''
            var dep = '';

            if (document.getElementById('PayrollCategory')) {
                dep = $("#PayrollCategory option:selected").text();
            }

            var temp = '';

            $(xml).find('dependent').each(function () {

                var $sel = $(this);

                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {

                        var optionsarray = show.split(',');
                        var seloption = "";

                        $('#PayScaleGroup')
                            .find('option')
                            .remove();



                        optionsarray.push('');

                        $.each(optionsarray, function (key, value) {

                            var s = value.replace(/\n/g, '');

                            $('#PayScaleGroup')
                                .append($("<option></option>")
                                .attr("value", s)
                                .text(s));
                        });



                        return;
                    }


                }
            });

        }


        function addDeductionTypesFunction(xml) {


            var show = ''

            var dep = '';
            if (document.getElementById('PayrollCategory')) {
                dep = document.getElementById('PayrollCategory').value;
            }
            var temp = '';

            $(xml).find('dependent').each(function () {


                var $sel = $(this);

                show = '';


                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {

                        var optionsarray = show.split(',');
                        var seloption = "";

                        $('#DeductionsType')
                            .find('option')
                            .remove();

                        $('#DeductionsType2')
                           .find('option')
                           .remove();

                        $('#DeductionsType3')
                          .find('option')
                          .remove();

                        $('#DeductionsType4')
                          .find('option')
                          .remove();

                        $('#DeductionsType5')
                          .find('option')
                          .remove();

                        seloption = '<option value="' + temp + '">' + temp + '</option>';

                        $.each(optionsarray, function (i) {
                            seloption += '<option value="' + optionsarray[i] + '">' + optionsarray[i] + '</option>';
                        });
                        $('#DeductionsType').append(seloption);
                        $('#DeductionsType2').append(seloption);
                        $('#DeductionsType3').append(seloption);
                        $('#DeductionsType4').append(seloption);
                        $('#DeductionsType5').append(seloption);

                        return;
                    }


                }
            });

        }



        function setBasicPayAmount() {
            //////////
            //Sets Basic pay amount based on payroll category and pay scale group
            //////////


            if (document.getElementById('BasicPayAmount')) {
                document.getElementById('BasicPayAmount').value = ''
            }

            var bus = '';
            if (document.getElementById('BusinessUnit')) {
                bus = $("#BusinessUnit option:selected").text();
            }
            var grp = '';
            if (document.getElementById('PayScaleGroup')) {
                //grp = document.getElementById('PayScaleGroup').value;
                grp = $("#PayScaleGroup option:selected").text();
            }

            var pay = '';
            if (document.getElementById('PayrollCategory')) {
                pay = document.getElementById('PayrollCategory').value;

            }



            if (pay.toString().trim() == 'Hourly') {
                var show;
                //  alert();
                show = 'STARTIE';
                //document.getElementById('PayScaleGroup').value = show;
                //grp = show;

                if (grp == '') {
                    grp = 'STARTIE';
                    document.getElementById('PayScaleGroup').value = grp;
                    document.getElementById('PayScaleGroup').selectedIndex = 1;
                }


                if (grp.toString().trim() == 'STARTIE') {

                    if (bus.toString().trim() == 'IKEA Dublin') {
                        if (document.getElementById('BasicPayAmount')) {
                            document.getElementById('BasicPayAmount').value = '11.50'
                        }
                    }
                    else
                    if (document.getElementById('BasicPayAmount')) {
                        document.getElementById('BasicPayAmount').value = '11.50'
                    }
                }
            }
        }

        function setPayrollCategory() {
            //////////
            //Sets PayScaleGroup, OneIKEABonusLevel, BenefitLevel from predefined_payroll_category_outs.XML and selected Job title and payroll category
            //////////
            var sal = '';
            if (document.getElementById('PayrollCategory')) {
                sal = document.getElementById('PayrollCategory').value;
                if (sal == '') {
                    sal = $("#PayrollCategory option:selected").text();
                }
            }

            var bus = '';
            if (document.getElementById('BusinessUnit')) {
                bus = $("#BusinessUnit option:selected").text();
            }

            if (sal.toString().trim() == 'Salaried' | sal.toString().trim() == 'Salaried Management' | sal.toString().trim() == 'Salaried Senior Management' | sal.toString().trim() == 'Dual Payroll (ZY)') {


                GetXML('predefined_payroll_category_IE_outs.xml', setPayrollCategoryXML);


            }
            else if (sal == 'Hourly') {

                if (document.getElementById('PayScaleGroup')) {
                    document.getElementById('PayScaleGroup').value = '';
                }
                if (document.getElementById('BenefitLevel')) {
                    document.getElementById('BenefitLevel').value = '';
                }


                if (document.getElementById('PayScaleGroup')) {
                    document.getElementById('PayScaleGroup').value = 'STARTIE';
                }


                GetXML('predefined_payroll_category_IE_outs.xml', setPayrollCategoryHourlyXML);



            }
        }

        function setPayrollCategoryHourlyXML(xml) {
            //////////
            //Sets PayScaleGroup, OneIKEABonusLevel, BenefitLevel from predefined_payroll_category_outs.XML and selected Job title and payroll category
            //////////


            var show2 = ''
            var show3 = ''
            var res = '0';

            var dep = '';
            if (document.getElementById('JobTitle')) {
                dep = document.getElementById('JobTitle').value;
            }
            var bus = '';
            if (document.getElementById('NewBusinessUnit')) {
                bus = $("#NewBusinessUnit option:selected").text();
            }


            $(xml).find('dependent').each(function () {


                var $sel = $(this);

                show2 = '';
                show3 = '';

                var department = $sel.find('selected').text();


                show2 = $sel.find('show2').text();
                show3 = $sel.find('show3').text();


                if (department.toString().trim() == dep.toString().trim()) {




                    if (show2 != '') {
                        var n = show2.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('OneIKEABonusLevel')) {


                                document.getElementById('OneIKEABonusLevel').value = show2.toString().trim();

                            }
                        }
                        else {
                            var res = show2.substring(0, n);
                            if (document.getElementById('OneIKEABonusLevel')) {
                                document.getElementById('OneIKEABonusLevel').value = res.toString().trim();

                            }
                        }
                        res = '1';
                    }
                    else {
                        if (document.getElementById('OneIKEABonusLevel')) {
                            document.getElementById('OneIKEABonusLevel').value = '';
                        }
                    }

                    if (show3 != '') {
                        var n = show3.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('BenefitLevel')) {
                                document.getElementById('BenefitLevel').value = show3.toString().trim();

                            }
                        }
                        else {
                            var res = show3.substring(0, n);
                            if (document.getElementById('BenefitLevel')) {
                                document.getElementById('BenefitLevel').value = res.toString().trim();

                            }
                        }
                        res = '1';
                    }
                    else {
                        if (document.getElementById('BenefitLevel')) {
                            document.getElementById('BenefitLevel').value = '';
                        }
                    }
                    if (res == 1) {
                        return;
                    }
                }
            });
        }
        function setPayrollCategoryXML(xml) {
            //////////
            //Sets PayScaleGroup, OneIKEABonusLevel, BenefitLevel from predefined_payroll_category_outs.XML and selected Job title and payroll category
            //////////

            var show = ''
            var show2 = ''
            var show3 = ''
            var res = '0';

            var dep = '';
            if (document.getElementById('JobTitle')) {
                dep = document.getElementById('JobTitle').value;
            }
            var bus = '';
            if (document.getElementById('BusinessUnit')) {
                bus = $("#BusinessUnit option:selected").text();
            }

            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';
                show2 = '';
                show3 = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show1').text();
                show2 = $sel.find('show2').text();
                show3 = $sel.find('show3').text();


                if (department.toString().trim() == dep.toString().trim()) {
                    //alert(show);
                    //alert(show2);
                    //alert(show3);

                    if (show != '') {
                        var n = show.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('PayScaleGroup')) {
                                document.getElementById('PayScaleGroup').value = show;
                                //$('#PayScaleGroup option[value="' + show + '"]').prop('selected', true);
                            }
                        }
                        else {
                            var res = show.substring(0, n);
                            if (document.getElementById('PayScaleGroup')) {
                                //$('#PayScaleGroup option[value="' + res + '"]').prop('selected', true);
                                document.getElementById('PayScaleGroup').value = res;
                            }
                        }
                        res = '1';
                    }
                    else {
                        if (document.getElementById('PayScaleGroup')) {
                            document.getElementById('PayScaleGroup').value = '';
                        }
                    }

                    if (show2 != '') {
                        var n = show2.indexOf(",");

                        if (n == -1) {
                            if (document.getElementById('OneIKEABonusLevel')) {
                                document.getElementById('OneIKEABonusLevel').value = show2.toString().trim();
                            }
                        }
                        else {
                            var res = show2.substring(0, n);
                            if (document.getElementById('OneIKEABonusLevel')) {
                                document.getElementById('OneIKEABonusLevel').value = res.toString().trim();
                            }
                        }
                        res = '1';
                    }
                    else {
                        if (document.getElementById('OneIKEABonusLevel')) {
                            document.getElementById('OneIKEABonusLevel').value = '';
                        }
                    }

                    if (show3 != '') {
                        var n = show3.indexOf(",");
                        if (n == -1) {
                            if (document.getElementById('BenefitLevel')) {
                                document.getElementById('BenefitLevel').value = show3.toString().trim();
                            }
                        }
                        else {
                            var res = show3.substring(0, n);
                            if (document.getElementById('BenefitLevel')) {
                                document.getElementById('BenefitLevel').value = res.toString().trim();
                            }
                        }
                        res = '1';
                    }
                    else {
                        if (document.getElementById('OneIKEABonusLevel')) {
                            document.getElementById('BenefitLevel').value = '';
                        }
                    }

                    if (res == 1) {
                        return;
                    }
                }
            });
        }



        function setLineManagerJob(xml) {
            //////////
            //addTecProvidersXML:
            //Adds tec providers on selected businessunit
            //////////

            var show = ''

            var dep = '';
            if (document.getElementById('ReportsToLineManager')) {
                dep = $("#ReportsToLineManager").val();

            }
            $('#ManagersJobTitle')[0].selectize.setValue('');

            $(xml).find('dependent').each(function () {

                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department == dep) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {

                            $('#ManagersJobTitle')[0].selectize.setValue(show);
                        }
                        else {
                            var res = show.substring(0, n);

                            $('#ManagersJobTitle')[0].selectize.setValue(res);
                        }
                        return;
                    }

                }
            });

        }


        function setTecApprover(xml) {
            var show = ''
            var dep = '';
            if (document.getElementById('BusinessUnit')) {
                dep = $("#BusinessUnit option:selected").text();
            }

            if (document.getElementById('TECApprover')) {
                var tecapp = document.getElementById('TECApprover').value;
            }

            if (tecapp == '') {
                $(xml).find('dependent').each(function () {

                    var $sel = $(this);
                    show = '';

                    var department = $sel.find('selected').text();
                    show = $sel.find('show').text();

                    if (department == dep) {

                        if (show != '') {
                            var n = show.indexOf(",");

                            if (n == -1) {
                                if (document.getElementById('TECApprover')) {
                                    $('#TECApprover')[0].selectize.setValue(show);
                                }
                            }
                            else {
                                var res = show.substring(0, n);
                                if (document.getElementById('TECApprover')) {
                                    $('#TECApprover')[0].selectize.setValue(res);
                                }
                            }
                            return;
                        }
                        else {
                            if (document.getElementById('ReportsToLineManager')) {
                                if (document.getElementById('ReportsToLineManager').value != '');
                                {
                                    var test = document.getElementById('ReportsToLineManager').value;
                                    $('#TECApprover')[0].selectize.setValue(test);
                                }
                            }
                        }
                    }
                });
            }
        }


        function setLineManagerJobTitle(xml) {
            //////////
            //Sets Line manager job title from predefined_linemanager_jobtitle_outs.XML and selected line manager
            //////////

            var show = ''
            //var dep = $("#ReportsToLineManager option:selected").text();
            if (document.getElementById('ManagersJobTitle')) {
                $('#ManagersJobTitle')[0].selectize.setValue('');
            }
            var dep = '';

            if (document.getElementById('Department')) {
                dep = $("#Department option:selected").text();
            }


            $(xml).find('dependent').each(function () {


                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department == dep) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {
                            if (document.getElementById('ManagersJobTitle')) {
                                $('#ManagersJobTitle')[0].selectize.setValue(show);
                            }
                        }
                        else {
                            var res = show.substring(0, n);
                            if (document.getElementById('ManagersJobTitle')) {
                                $('#ManagersJobTitle')[0].selectize.setValue(res);
                            }
                        }
                        return;
                    }
                }
            });
        }

        function setLineManager(xml) {
            //////////
            //Sets Line manager from predefined_linemanager_department_outs.XML and selected department
            //////////

            var show = ''
            if (document.getElementById('ReportsToLineManager')) {
                $('#ReportsToLineManager')[0].selectize.setValue('');
            }
            var dep = '';
            if (document.getElementById('Department')) {
                dep = $("#Department option:selected").text();
            }

            $(xml).find('dependent').each(function () {

                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department.toString().trim() == dep.toString().trim()) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {
                            if (document.getElementById('ReportsToLineManager')) {

                                $('#ReportsToLineManager')[0].selectize.setValue(show);
                            }
                        }
                        else {
                            var res = show.substring(0, n);
                            if (document.getElementById('ReportsToLineManager')) {
                                $('#ReportsToLineManager')[0].selectize.setValue(res);
                            }
                        }
                        return;
                    }
                }
            });
        }

        function setCostCentre(xml) {
            //////////
            //Sets cost centre from predefined_costcentre_department_outs.XML and selected department
            //////////
            var show = ''
            if (document.getElementById('HomeCostCentre')) {
                $('#HomeCostCentre')[0].selectize.setValue('');
            }

            var dep = '';
            if (document.getElementById('Department')) {
                dep = $("#Department option:selected").text();
            }
            $(xml).find('dependent').each(function () {

                var $sel = $(this);
                show = '';

                var department = $sel.find('selected').text();

                show = $sel.find('show').text();

                if (department == dep) {

                    if (show != '') {
                        var n = show.indexOf(",");

                        if (n == -1) {
                            if (document.getElementById('HomeCostCentre')) {
                                $('#HomeCostCentre')[0].selectize.setValue(show);
                            }
                        }
                        else {
                            var res = show.substring(0, n);
                            if (document.getElementById('HomeCostCentre')) {
                                $('#HomeCostCentre')[0].selectize.setValue(res);
                            }
                        }
                        return;
                    }
                }
            });
        }

        // PAYMENT INFORMATION SCRIPTS
        $(function () {
            // allowance and deduction datepickers
            var employmentCategory = document.getElementById('EmploymentCategory').value;
            var sEnd = document.getElementById('ContractEndDate');

            function setPaymentDatePickersBehavior() {
                var startDate = $('#ContractStartDate').val();
                var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
                var dStart = APIGlobal.DateTime.parseDate(startDate, format);
                var forcePicker = new Date(dStart.getFullYear(), dStart.getMonth(), dStart.getDate(), 0, 0, 0, 0);
                $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5,' +
                    '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker(
                {
                    onRender: function (ev) {
                        return ev.valueOf() < forcePicker.valueOf() ? 'disabled' : '';
                    },
                });
            }

            setPaymentDatePickersBehavior();

            $('#date_ContractStartDate').on('changeDate', function (ev) {

                $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5,' +
                '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker('destroy');
                if (!$('AllowancesValidFrom').val()) {
                    var startdate = $('#ContractStartDate').val();
                    document.getElementById('AllowancesValidFrom').value = startdate;
                    document.getElementById('AllowancesValidFrom2').value = startdate;
                    document.getElementById('AllowancesValidFrom3').value = startdate;
                    document.getElementById('AllowancesValidFrom4').value = startdate;
                    document.getElementById('AllowancesValidFrom5').value = startdate;

                    document.getElementById('DeductionsValidFrom').value = startdate;
                    document.getElementById('DeductionsValidFrom2').value = startdate;
                    document.getElementById('DeductionsValidFrom3').value = startdate;
                    document.getElementById('DeductionsValidFrom4').value = startdate;
                    document.getElementById('DeductionsValidFrom5').value = startdate;
                }

                setPaymentDatePickersBehavior();
            }).data('datepicker');

            function setDefaultDate(id) {
                var input = $('#' + id);

                if (employmentCategory == 'Temporary') {
                    input.val(sEnd.value);
                }
                else
                    if (input.val() == '') {
                        input.val('31.12.9999');
                    }
            }

            function disableDatePicker(id) {
                var input = $('#' + id);
                var datePicker = $('#date_' + id);

                datePicker.datepicker("destroy");
                datePicker.addClass("disabled");
                input.val("");
                document.getElementById(id).disabled = true;
            }

            function enableDatePicker(id) {
                var input = $('#' + id);
                var datePicker = $('#date_' + id);

                datePicker.removeClass("disabled");
                document.getElementById(id).disabled = false;
                setDefaultDate(id);
                datePicker.datepicker();
            }

            function setDatePickerBehavior(id) {
                var input = $('#' + id);
                enableDatePicker(id);
            }

            function setDefaultDatePickerBehavior(id) {
                var input = $('#' + id);
                setDefaultDate(id);             
            }

            $('#ContractStartDate').change(function () {
                setDefaultDatePickerBehavior('AllowancesValidTo');
                setDefaultDatePickerBehavior('AllowancesValidTo2');
                setDefaultDatePickerBehavior('AllowancesValidTo3');
                setDefaultDatePickerBehavior('AllowancesValidTo4');
                setDefaultDatePickerBehavior('AllowancesValidTo5');

                if (!$('AllowancesValidFrom').val()) {
                    var startdate = $('#ContractStartDate').val();
                    document.getElementById('AllowancesValidFrom').value = startdate;
                    document.getElementById('AllowancesValidFrom2').value = startdate;
                    document.getElementById('AllowancesValidFrom3').value = startdate;
                    document.getElementById('AllowancesValidFrom4').value = startdate;
                    document.getElementById('AllowancesValidFrom5').value = startdate;
                }
            });

            setDefaultDatePickerBehavior('AllowancesValidTo');
            setDefaultDatePickerBehavior('AllowancesValidTo2');
            setDefaultDatePickerBehavior('AllowancesValidTo3');
            setDefaultDatePickerBehavior('AllowancesValidTo4');
            setDefaultDatePickerBehavior('AllowancesValidTo5');

            $('#ContractStartDate').change(function () {
                setDefaultDatePickerBehavior('DeductionsValidTo');
                setDefaultDatePickerBehavior('DeductionsValidTo2');
                setDefaultDatePickerBehavior('DeductionsValidTo3');
                setDefaultDatePickerBehavior('DeductionsValidTo4');
                setDefaultDatePickerBehavior('DeductionsValidTo5');

                if (!$('DeductionsValidFrom').val()) {
                    var startdate = $('#ContractStartDate').val();
                    document.getElementById('DeductionsValidFrom').value = startdate;
                    document.getElementById('DeductionsValidFrom2').value = startdate;
                    document.getElementById('DeductionsValidFrom3').value = startdate;
                    document.getElementById('DeductionsValidFrom4').value = startdate;
                    document.getElementById('DeductionsValidFrom5').value = startdate;
                }
            });

            setDefaultDatePickerBehavior('DeductionsValidTo');
            setDefaultDatePickerBehavior('DeductionsValidTo2');
            setDefaultDatePickerBehavior('DeductionsValidTo3');
            setDefaultDatePickerBehavior('DeductionsValidTo4');
            setDefaultDatePickerBehavior('DeductionsValidTo5');
        });
    }

    if ($('#ContractType').val() == '@ContractType') {
        $('#date_ContractEndDate').datepicker("destroy");
        $('#date_ContractEndDate').addClass("disabled");
        $('#ContractEndDate').prop('disabled', true);
        $('#ContractEndDate').val("");
    }
</script>
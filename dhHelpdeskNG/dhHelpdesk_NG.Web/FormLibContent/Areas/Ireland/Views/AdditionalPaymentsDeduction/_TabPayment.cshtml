@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
<div class="tab-pane" id="Payment">
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Allowances")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesChangeType")</td>
                    <td>
                        @Model.Element("AllowancesChangeType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesType")</td>
                    <td>
                        @Model.Element("AllowancesType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesAmountUnits")</td>
                    <td>
                        @Model.Element("AllowancesAmountUnits")
                    </td>
                </tr>
                 <tr>
                    <td class="tdstrong">@Model.Label("AllowancesPaidPer")</td>
                    <td>
                        @Model.Element("AllowancesPaidPer")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidFrom")</td>
                    <td>
                        @Model.Element("AllowancesValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AllowancesValidTo")</td>
                    <td>
                        @Model.Element("AllowancesValidTo")
                    </td>
                </tr>
                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="allowance@(i.ToString())" id="allowance@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Allowances") @(i.ToString())</h4>
                        </td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesChangeType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesChangeType" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesType" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesType" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesPaidPer" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesPaidPer" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="allowance@(i.ToString())">
                        <td class="tdstrong">@Model.Label("AllowancesValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("AllowancesValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addAllowanceTrr">
                    <td colspan="2">
                        @Model.Element("Allowances")
                        <a id="addAllowance" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Allowance")</a></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Deductions")</h4>
                    </td>
                </tr>
                 <tr>
                    <td class="tdstrong">@Model.Label("DeductionsChangeType")</td>
                    <td>
                        @Model.Element("DeductionsChangeType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsType")</td>
                    <td>
                        @Model.Element("DeductionsType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsAmountUnits")</td>
                    <td>
                        @Model.Element("DeductionsAmountUnits")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductedPer")</td>
                    <td>
                        @Model.Element("DeductedPer")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidFrom")</td>
                    <td>
                        @Model.Element("DeductionsValidFrom")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionsValidTo")</td>
                    <td>
                        @Model.Element("DeductionsValidTo")
                    </td>
                </tr>
                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="deduction@(i.ToString())" id="deduction@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Deductions") @(i.ToString())</h4>
                        </td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsChangeType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsChangeType" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsType" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsAmountUnits" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductedPer" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductedPer" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidFrom" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidFrom" + i.ToString())</td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionsValidTo" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionsValidTo" + i.ToString())</td>
                    </tr>
                }
                <tr id="addDeductionTrr">
                    <td colspan="2">
                        @Model.Element("Deductions")
                        <a id="addDeduction" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Deduction")</a></td>
                </tr>
            </tbody>
        </table>
    </div>
    <input type="hidden" id="MultipleEntrySectionsNr" value="@FormLibConstants.FormField.MultipleEntrySectionsNr" />
</div>

<script>
    function setPaymentDatePickersBehavior() {

        $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5,' +
        '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker('destroy');

        var startDate = $('#ChangeValidFrom').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dStart = APIGlobal.DateTime.parseDate(startDate, format);
        var forcePicker = new Date(dStart.getFullYear(), dStart.getMonth(), dStart.getDate(), 0, 0, 0, 0);
        $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5,' +
            '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker(
        {
            onRender: function (ev) {
                return ev.valueOf() < forcePicker.valueOf() ? 'disabled' : '';
            },
        });

        ////set value to the datepicker
        $('#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker("setValue", forcePicker);
        $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5').not(".disabled").datepicker("setValue", forcePicker);
        $('#date_ChangeValidFrom').datepicker("setValue", startDate);

        $('#AllowancesValidFrom,#AllowancesValidFrom2,#AllowancesValidFrom3,#AllowancesValidFrom4,#AllowancesValidFrom5,' +
  '#DeductionsValidFrom,#DeductionsValidFrom2,#DeductionsValidFrom3,#DeductionsValidFrom4,#DeductionsValidFrom5').val(startDate);
    }

    // setPaymentDatePickersBehavior();

    $('#date_ChangeValidFrom').on('changeDate', function (ev) {
        setPaymentDatePickersBehavior();
    }).data('datepicker');

    $('#ChangeValidFrom').change(function () {
        setPaymentDatePickersBehavior();
    });

    $('#DeductionsValidFrom,#DeductionsValidFrom2,#DeductionsValidFrom3,#DeductionsValidFrom4,#DeductionsValidFrom5').change(function () {

        $('#date_' + $(this).attr("id")).datepicker("setValue", $(this).val());
    });

    $('#AllowancesValidFrom,#AllowancesValidFrom2,#AllowancesValidFrom3,#AllowancesValidFrom4,#AllowancesValidFrom5').change(function () {

        $('#date_' + $(this).attr("id")).datepicker("setValue", $(this).val());
    });

    $('#AllowancesType').change(function () {
        setAllowanceType();
    });

    $('#AllowancesType2').change(function () {
        setAllowanceType2();
    });

    $('#AllowancesType3').change(function () {
        setAllowanceType3();
    });

    $('#AllowancesType4').change(function () {
        setAllowanceType4();
    });

    $('#AllowancesType5').change(function () {
        setAllowanceType5();
    });

    function setAllowanceTypeXML4(xml) {
        //////////
        //Sets allowance type units from predefined_allowancetype_units_outs.XML based on Allowance type
        //////////

        var show = ''
        var show2 = ''

        if (document.getElementById('AllowancesAmountUnits4')) {
            document.getElementById('AllowancesAmountUnits4').value = '';
        }
        if (document.getElementById('AllowancesNetGross4')) {
            document.getElementById('AllowancesNetGross4').value = '';
        }

        var res = '0';

        var dep = '';
        if (document.getElementById('AllowancesType4')) {
            dep = document.getElementById('AllowancesType4').value;
        }
        //var bus = $("#BusinessUnit option:selected").text();

        var d = dep;


        $(xml).find('dependent').each(function () {


            var $sel = $(this);
            show = '';


            var department = $sel.find('selected').text();

            show = $sel.find('show').text();



            if (department.toString().trim() == d.toString().trim()) {

                if (show != '') {
                    if (document.getElementById('AllowancesAmountUnits4')) {
                        document.getElementById('AllowancesAmountUnits4').value = show;
                    }
                    res = '1';
                }



                if (res == 1) {
                    return;
                }
            }

        });
    }

    function setAllowanceTypeXML5(xml) {
        //////////
        //Sets allowance type units from predefined_allowancetype_units_outs.XML based on Allowance type
        //////////

        var show = ''
        var show2 = ''

        if (document.getElementById('AllowancesAmountUnits5')) {
            document.getElementById('AllowancesAmountUnits5').value = '';
        }
        if (document.getElementById('AllowancesNetGross5')) {
            document.getElementById('AllowancesNetGross5').value = '';
        }

        var res = '0';

        var dep = '';
        if (document.getElementById('AllowancesType5')) {
            dep = document.getElementById('AllowancesType5').value;
        }
        //var bus = $("#BusinessUnit option:selected").text();

        var d = dep;

        $(xml).find('dependent').each(function () {

            var $sel = $(this);
            show = '';

            var department = $sel.find('selected').text();

            show = $sel.find('show').text();

            if (department.toString().trim() == d.toString().trim()) {

                if (show != '') {
                    if (document.getElementById('AllowancesAmountUnits5')) {
                        document.getElementById('AllowancesAmountUnits5').value = show;
                    }
                    res = '1';
                }

                if (res == 1) {
                    return;
                }
            }

        });
    }


    function setAllowanceTypeXML3(xml) {
        //////////
        //Sets allowance type units from predefined_allowancetype_units_outs.XML based on Allowance type
        //////////

        var show = ''
        var show2 = ''

        if (document.getElementById('AllowancesAmountUnits3')) {
            document.getElementById('AllowancesAmountUnits3').value = '';
        }
        if (document.getElementById('AllowancesNetGross3')) {
            document.getElementById('AllowancesNetGross3').value = '';
        }

        var res = '0';

        var dep = '';
        if (document.getElementById('AllowancesType3')) {
            dep = document.getElementById('AllowancesType3').value;
        }
        //var bus = $("#BusinessUnit option:selected").text();

        var d = dep;


        $(xml).find('dependent').each(function () {


            var $sel = $(this);
            show = '';


            var department = $sel.find('selected').text();

            show = $sel.find('show').text();



            if (department.toString().trim() == d.toString().trim()) {

                if (show != '') {
                    if (document.getElementById('AllowancesAmountUnits3')) {
                        document.getElementById('AllowancesAmountUnits3').value = show;
                    }
                    res = '1';
                }



                if (res == 1) {
                    return;
                }
            }

        });
    }

    function setAllowanceTypeXML2(xml) {
        //////////
        //Sets allowance type units from predefined_allowancetype_units_outs.XML based on Allowance type
        //////////

        var show = ''
        var show2 = ''

        if (document.getElementById('AllowancesAmountUnits2')) {
            document.getElementById('AllowancesAmountUnits2').value = '';
        }
        if (document.getElementById('AllowancesNetGross2')) {
            document.getElementById('AllowancesNetGross2').value = '';
        }

        var res = '0';

        var dep = '';
        if (document.getElementById('AllowancesType2')) {
            dep = document.getElementById('AllowancesType2').value;
        }
        //var bus = $("#BusinessUnit option:selected").text();

        var d = dep;


        $(xml).find('dependent').each(function () {


            var $sel = $(this);
            show = '';


            var department = $sel.find('selected').text();

            show = $sel.find('show').text();



            if (department.toString().trim() == d.toString().trim()) {

                if (show != '') {
                    if (document.getElementById('AllowancesAmountUnits2')) {
                        document.getElementById('AllowancesAmountUnits2').value = show;
                    }
                    res = '1';
                }



                if (res == 1) {
                    return;
                }
            }

        });
    }

    function setAllowanceTypeXML(xml)
    {
        //////////
        //Sets allowance type units from predefined_allowancetype_units_outs.XML based on Allowance type
        //////////

        var show = ''
        var show2 = ''

        if (document.getElementById('AllowancesAmountUnits')) {
            document.getElementById('AllowancesAmountUnits').value = '';
        }
        if (document.getElementById('AllowancesNetGross')) {
            document.getElementById('AllowancesNetGross').value = '';
        }

        var res = '0';

        var dep =    '';
        if (document.getElementById('AllowancesType')) {
            dep = document.getElementById('AllowancesType').value;
        }
        //var bus = $("#BusinessUnit option:selected").text();

        var d = dep;

        
        $(xml).find('dependent').each(function () {


            var $sel = $(this);
            show = '';
            

            var department = $sel.find('selected').text();

            show = $sel.find('show').text();
            

            
            if (department.toString().trim() == d.toString().trim()) {
                
                if (show != '') {
                    if (document.getElementById('AllowancesAmountUnits')) {
                        document.getElementById('AllowancesAmountUnits').value = show;
                    }
                    res = '1';
                }

                

                if (res == 1) {
                    return;
                }
            }

        });
    }

    function setAllowanceType3() {
        //////////
        var path = window.location.protocol + '//';
        path = path + window.location.host + '/';

        path = site.baseUrl + '/FormLibContent/Xmls/Ireland/Templates/predefined_allowancetype_units_payment_IE_outs.xml'

        $.ajax({
            type: "GET",
            url: path,
            dataType: "xml",
            success: setAllowanceTypeXML3,
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
                alert(textStatus);
                alert(errorThrown);
            }

        });
    }

    function setAllowanceType2() {
        //////////
        var path = window.location.protocol + '//';
        path = path + window.location.host + '/';

        path = site.baseUrl + '/FormLibContent/Xmls/Ireland/Templates/predefined_allowancetype_units_payment_IE_outs.xml'

        $.ajax({
            type: "GET",
            url: path,
            dataType: "xml",
            success: setAllowanceTypeXML2,
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
                alert(textStatus);
                alert(errorThrown);
            }

        });
    }

    function setAllowanceType() {
        //////////
        var path = window.location.protocol + '//';
        path = path + window.location.host + '/';

        path = site.baseUrl + '/FormLibContent/Xmls/Ireland/Templates/predefined_allowancetype_units_payment_IE_outs.xml'

        $.ajax({
            type: "GET",
            url: path,
            dataType: "xml",
            success: setAllowanceTypeXML,
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
                alert(textStatus);
                alert(errorThrown);
            }

        });
    }

    function setAllowanceType4() {
        //////////
        var path = window.location.protocol + '//';
        path = path + window.location.host + '/';

        path = site.baseUrl + '/FormLibContent/Xmls/Ireland/Templates/predefined_allowancetype_units_payment_IE_outs.xml'

        $.ajax({
            type: "GET",
            url: path,
            dataType: "xml",
            success: setAllowanceTypeXML4,
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
                alert(textStatus);
                alert(errorThrown);
            }

        });
    }

    function setAllowanceType5() {
        //////////
        var path = window.location.protocol + '//';
        path = path + window.location.host + '/';

        path = site.baseUrl + '/FormLibContent/Xmls/Ireland/Templates/predefined_allowancetype_units_payment_IE_outs.xml'

        $.ajax({
            type: "GET",
            url: path,
            dataType: "xml",
            success: setAllowanceTypeXML5,
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
                alert(textStatus);
                alert(errorThrown);
            }

        });
    }
</script>
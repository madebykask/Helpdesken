@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;


@{
    var fillOldVal = TempData["oldValues"];
    var newfill = (List<KeyValuePair<string, string>>)fillOldVal;
}

<div class="tab-pane" id="OrganisationalAssignment">
    <div class="span8">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2"><h4>@Model.Translate("Organisation")</h4></td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("Country")</td>
                    <td>@Model.Element("Country")</td>
                    <td> 
                        <input type="hidden" class="oldValue"  id="OLD_Country" name="OLD_Country" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_Country").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_Country">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_Country").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
               <tr>
                    <td class="tdstrong">@Model.Label("NewCompany")</td>
                    <td>@Model.Element("NewCompany")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_NewCompany" name="OLD_NewCompany" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewCompany").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewCompany">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewCompany").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewBusinessUnit")</td>
                    <td>@Model.Element("NewBusinessUnit")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_NewBusinessUnit" name="OLD_NewBusinessUnit" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewBusinessUnit").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewBusinessUnit">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewBusinessUnit").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewServiceArea")</td>
                    <td>@Model.Element("NewServiceArea")</td>
                    <td>
                         <input type="hidden" class="oldValue"  id="OLD_NewServiceArea" name="OLD_NewServiceArea" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewServiceArea").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewServiceArea">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewServiceArea").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewDepartment")</td>
                    <td>@Model.Element("NewDepartment")</td>
                    <td>
                         <input type="hidden" class="oldValue"  id="OLD_NewDepartment" name="OLD_NewDepartment" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewDepartment").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_NewDepartment">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_NewDepartment").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>             
                <tr>
                    <td class="tdstrong">@Model.Label("HomeCostCenter")</td>
                    <td>@Model.Element("HomeCostCenter")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_HomeCostCenter" name="OLD_HomeCostCenter" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_HomeCostCenter").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_HomeCostCenter">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_HomeCostCenter").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CostAllocation")</td>
                    <td>@Model.Element("CostAllocation")</td>
                    <td>
                        @*<input type="hidden" class="oldValue"  id="OLD_CostAllocation" name="OLD_CostAllocation" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CostAllocation").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_CostAllocation">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CostAllocation").Select(x => x.Value).FirstOrDefault() : "")</em>*@
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CrossChargeCostCentre")</td>
                    <td>@Model.Element("CrossChargeCostCentre")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_CrossChargeCostCentre" name="OLD_CrossChargeCostCentre" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CrossChargeCostCentre").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_CrossChargeCostCentre">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_CrossChargeCostCentre").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>    
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("AdditionalCostAllocation")</td>
                    <td>@Model.Element("AdditionalCostAllocation")</td>
                    <td>
                         @*<input type="hidden" class="oldValue"  id="OLD_AdditionalCostAllocation" name="OLD_CrossChargeCostCentre" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_AdditionalCostAllocation").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_AdditionalCostAllocation">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_AdditionalCostAllocation").Select(x => x.Value).FirstOrDefault() : "")</em>*@
                    </td>
                </tr>


                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                  {
                    <tr class="costcentres@(i.ToString())">
                    <td class="tdstrong" colspan="2"><h5>@Model.Translate("Additional Cost Centre " + i.ToString())</h5></td>
                         </tr>     
                                  
                    <tr class="costcentres@(i.ToString())">
                              <td class="tdstrong">@Model.Label("CrossChargeCostCentre" + i.ToString())</td>
                              <td>
                                  @Model.Element("CrossChargeCostCentre" + i.ToString())</td>
                          </tr>
                    <tr class="costcentres@(i.ToString())">
                              <td class="tdstrong">@Model.Label("AdditionalCostAllocation" + i.ToString())</td>
                              <td>
                                  @Model.Element("AdditionalCostAllocation" + i.ToString())</td>
                          </tr>
                      
                    
                }
                <tr id="addCostcentresTrr">
                    <td colspan="2">
                        @Model.Element("MultiCostcentres")
                        <a id="addCostCentre" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another Cost Centre")</a></td>
                </tr>

                <tr>
                    <td class="tdstrong" colspan="2"><h4>@Model.Translate("Job")</h4></td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("JobTitle")</td>
                    <td>@Model.Element("JobTitle")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_JobTitle" name="OLD_JobTitle" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_JobTitle").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_JobTitle">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_JobTitle").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("LocalJobTitle")</td>
                    <td>@Model.Element("LocalJobTitle")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_LocalJobTitle" name="OLD_LocalJobTitle" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_LocalJobTitle").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_LocalJobTitle">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_LocalJobTitle").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("NewPosition")</td>
                    <td>@Model.Element("NewPosition")</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ReportsToLineManager")</td>
                    <td>@Model.Element("ReportsToLineManager")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_ReportsToLineManager" name="OLD_ReportsToLineManager" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ReportsToLineManager").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_ReportsToLineManager">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ReportsToLineManager").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
@*            </tbody>
        </table>
    </div>
     <div class="span6">
        <table class="table">
            <tbody>*@
                <tr>
                    <td class="tdstrong" colspan="2"><h4>@Model.Translate("Employment Conditions")</h4></td>
                    <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("EmploymentCategory")</td>
                    <td>@Model.Element("EmploymentCategory")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_EmploymentCategory" name="OLD_EmploymentCategory" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_EmploymentCategory").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_EmploymentCategory">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_EmploymentCategory").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractedHours")</td>
                    <td>@Model.Element("ContractedHours")</td>
                    <td>
                        <input type="hidden" class="oldValue"  id="OLD_ContractedHours" name="OLD_ContractedHours" value="@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ContractedHours").Select(x => x.Value).FirstOrDefault() : "")"/>
                        <em class="muted" id="emOLD_ContractedHours">@((newfill != null) ? newfill.Where(x => x.Key == "OLD_ContractedHours").Select(x => x.Value).FirstOrDefault() : "")</em>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractType")</td>
                    <td>@Model.Element("ContractType")</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ContractEndDate")</td>
                    <td>@Model.Element("ContractEndDate")</td>
                    <td></td>
                </tr>                
                <tr>
                    <td class="tdstrong">@Model.Label("ProbationPeriod")</td>
                    <td>@Model.Element("ProbationPeriod")</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("ProbationEndDate")</td>
                    <td>@Model.Element("ProbationEndDate")</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2"><h4>@Model.Translate("CDS")</h4></td>
                     <td class="tdstrong" ><h4>@Model.Translate("Current record")</h4></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PrimarySite")</td>
                    <td>@Model.Element("PrimarySite")</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TECApprover")</td>
                    <td>@Model.Element("TECApprover")</td>
                    <td></td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("HelpDesk")</td>
                    <td>@Model.Element("HelpDesk")</td>
                    <td></td>
                </tr>
            </tbody>
        </table>
    </div>
    <input type="hidden" id="MultipleEntrySectionsNr" value="@FormLibConstants.FormField.MultipleEntrySectionsNr" />       
</div>

<script>
    var lockedbyUserGroup = document.getElementById('LockedByUserGroup').getAttribute('status');
    if ("@Model.ReadOnlyTab("#OrganisationalAssignment")" == 'False' && lockedbyUserGroup == 'False') {
        $(function () {

            function setEndDateBehavior(value) {
                if (value == 'Permanent') {
                    $('#date_ContractEndDate').datepicker("destroy");
                    $('#date_ContractEndDate').addClass("disabled");
                    $('#ContractEndDate').prop('disabled', true);
                    $('#ContractEndDate').val("");
                }
                else {
                    $('#date_ContractEndDate').datepicker();
                    $('#ContractEndDate').prop('disabled', false);
                    $("#ContractEndDate").removeClass("disabled");
                }
            }

            if ($('#ContractType').val() == 'Permanent') {
                $('#date_ContractEndDate').datepicker("destroy");
                $('#date_ContractEndDate').addClass("disabled");
                $('#ContractEndDate').prop('disabled', true);
                $('#ContractEndDate').val("");
            }


            $('#ContractType').change(function () {
                setEndDateBehavior($(this).val());
            });                        
        });
    }

    $('#NewBusinessUnit').change(function () {

        SetHelpDeskDefault();

        var value = $(this).val();
        $('#ReportsToLineManager').val('');
        if ($('#NewBusinessUnit')[0].selectize) {
            var selectedText = $('#NewBusinessUnit')[0].selectize.getItem(value).text();

            if ($('#PrimarySite')[0].selectize) {
                $('#PrimarySite')[0].selectize.setValue(selectedText);
            }
            else {
                $('#PrimarySite').val(selectedText);
            }
        }
        else {
            var selectedText = $('#NewBusinessUnit').find('option:selected').text();
            if ($('#PrimarySite')[0].selectize) {
                $('#PrimarySite')[0].selectize.setValue(selectedText);
            }
            else {
                var selectedText = $('#NewBusinessUnit').find('option:selected').text();
                $('#PrimarySite').val(selectedText);
            }
        }

        //GetXML('predefined_businessunit_linemanager_Change_outs.xml', setLineManager);
    });

    function SetHelpDeskDefault() {

        switch ($("#NewBusinessUnit option:selected").text()) {
            case "DC North":
                $('#HelpDesk').val('GL Dist. Helpdesk');
                break;
            case "DC South":
                $('#HelpDesk').val('GL Dist. Helpdesk');
                break;
            case "DC East":
                $('#HelpDesk').val('GL Dist. Helpdesk');
                break;
            case "DC West":
                $('#HelpDesk').val('GL Dist. Helpdesk');
                break;
            case "Service Office":
                $('#HelpDesk').val('GL Retail Helpdesk');
                break;
            case "Big Store North":
                $('#HelpDesk').val('GL Retail Helpdesk');
                break;
            case "Big Store South":
                $('#HelpDesk').val('GL Retail Helpdesk');
                break;
            case "Big Store East":
                $('#HelpDesk').val('GL Retail Helpdesk');
                break;
            case "Big Store West":
                $('#HelpDesk').val('GL Retail Helpdesk');
                break;
        }

    };

    $('#ReportsToLineManager').change(function () {
        var value = $(this).val();
        if ($('#ReportsToLineManager')[0].selectize) {
            var selectedText = $('#ReportsToLineManager')[0].selectize.getItem(value).text();

            if ($('#TECApprover')[0].selectize) {
                $('#TECApprover')[0].selectize.setValue(selectedText);
            }
            else {
                $('#TECApprover').val(selectedText);
            }
        }
        else {
            var selectedText = $('#ReportsToLineManager').find('option:selected').text();
            if ($('#TECApprover')[0].selectize) {
                $('#TECApprover')[0].selectize.setValue(selectedText);
            }
            else {
                var selectedText = $('#ReportsToLineManager').find('option:selected').text();
                $('#TECApprover').val(selectedText);
            }
        }
    });


    $('#NewDepartment').change(function () {

        if ($(this).val() !== " ") {

            GetXML('Predefined_Department_HomeCostCentre.xml', setCostCentre);
        }

        else {
            $('#HomeCostCenter')[0].selectize.setValue("");
            $('#CrossChargeCostCentre')[0].selectize.setValue("");
        }        
    });


    function GetXML(xmlFile, url) {
        //////////
        //Gets XML File
        //////////

        var path = window.location.protocol + '//';
        path = path + window.location.host + '/';

        path = site.baseUrl + '/FormLibContent/Xmls/Global/Templates/' + xmlFile

        $.ajax({
            type: "GET",
            url: path,
            dataType: "xml",
            success: url,
            error: function (jqXHR, textStatus, errorThrown) {
                alert(jqXHR.responseText);
                alert(textStatus);
                alert(errorThrown);
            }

        });


    }

    function setCostCentre(xml) {
        var show = ''
        var dep = $("#NewDepartment option:selected").text();
        $(xml).find('dependent').each(function () {

            var $book = $(this);
            show = '';

            var department = $book.find('selected').text();

            show = $book.find('show').text();

            if (department == dep) {

                if (show != '') {
                    var n = show.indexOf(",");

                    if (n == -1) {

                        $('#HomeCostCenter')[0].selectize.setValue(show);
                        $('#CrossChargeCostCentre')[0].selectize.setValue(show);

                    }
                    else {
                        var res = show.substring(0, n);

                        $('#HomeCostCenter')[0].selectize.setValue(res);
                        $('#CrossChargeCostCentre')[0].selectize.setValue(res);
                    }
                    return;
                }
            }
        });
    }

    function setJobTitle(xml) {
        //////////
        //setLineManagerJobTitle:
        //Adds Jobtitles on selected Function
        //////////
        var show = ''
        var dep = '';

        if (document.getElementById('NewBusinessUnit')) {
            dep = $("#NewBusinessUnit option:selected").text();
        }
        var selectize_tags;

        selectize_tags = $('#JobTitle')[0].selectize;

        var jobtitle_value;
        jobtitle_value = $('#JobTitle').val();

        selectize_tags.clearOptions();



        $(xml).find('dependent').each(function () {
            var $sel = $(this);
            show = '';

            var department = $sel.find('selected').text();

            show = $sel.find('show').text();

            if (department == dep) {

                if (show != '') {

                    show = ' ,' + show;

                    var optionsarray = show.split(',');
                    optionsarray.unshift('');

                    var items = optionsarray.map(function (x) { return { text: x, value: x }; });
                    selectize_tags.addOption(items);

                    if (jobtitle_value != '')
                        selectize_tags.setValue(jobtitle_value);
                    else
                    selectize_tags.setValue('');

                    return;
                }
            }
        });
    }

    $('#JobTitle').change(function () {

        GetXML('Predefined_LocalJobTitle_JobTitle.xml', setLocalJobTitle);

    });

    function setLocalJobTitle(xml) {
        var show = ''
        //var dep = $("#JobTitle option:selected").text();
        var dep = document.getElementById('JobTitle').value;

        $(xml).find('dependent').each(function () {

            var $book = $(this);
            show = '';

            var department = $book.find('selected').text();

            show = $book.find('show').text();


            if (department == dep) {
                if (show != '') {
                    var n = show.indexOf(",");
                    if (n == -1) {
                        $('#LocalJobTitle')[0].selectize.setValue(show);
                    }
                    else {
                        var res = show.substring(0, n);
                        $('#LocalJobTitle')[0].selectize.setValue(res);
                    }
                    return;
                }
            }
        });
    }

    //function selectIndexChangeProbationPeriod() {

    //    var probitionEndDate = document.getElementById('ProbationEndDate');
    //    var probitionEndDatePicker = document.getElementById('date_ProbationEndDate');
    //    if ((this.options[this.selectedIndex].value == 'No') || this.options[this.selectedIndex].value == 'Not Applicable') {
    //        probitionEndDatePicker.disabled = true;
    //        probitionEndDatePicker.className = probitionEndDatePicker.className + " disabled";
    //        probitionEndDate.disabled = true;
    //        probitionEndDate.className = probitionEndDate.className + " disabled";

    //    } else {
    //        probitionEndDate.disabled = false;
    //        $(probitionEndDate).removeClass("disabled");
    //        probitionEndDatePicker.disabled = false;
    //        $(probitionEndDatePicker).removeClass("disabled");
    //    }
    //}
    //document.getElementById('ProbationPeriod').onchange = selectIndexChangeProbationPeriod;


    //var iconFlag = '<i class="icon-flag"></i>';
    //var elemOld = $('input[name^="OLD_"]');
    //var elem = new Array();

    //elemOld.each(function (e) {
    //    var $this = $(this);
    //    var $that = $('#' + $this.attr('id').replace('OLD_', ''));
    //    $this.parent().find('.icon-flag').remove();
    //    if ($that.val() !== $this.val() && $this.parent().find('.icon-flag').length == 0)
    //        $this.parent().prepend($(iconFlag));

    //    $that.keyup(function (e) {
    //        var old = $('#OLD_' + $(this).attr('id'));
    //        old.parent().find('.icon-flag').remove();

    //        if ($(this).val() !== old.val() && old.parent().find('.icon-flag').length == 0)
    //            old.parent().prepend($(iconFlag));

    //    });
    //});

</script>
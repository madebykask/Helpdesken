@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
<script>
    var isTabReadOnly = "@Model.ReadOnlyTab("#OrganisationalAssignment")";

    var nowTemp = new Date();
    var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);

    // S:G To avoid date pickers being empty.
    $('#date_AllowancesValidFrom').datepicker("destroy");
    $('#date_DeductionsValidFrom').datepicker("destroy");

    var noticeOldDate = $('#notice_OldDate');
    $('#date_ChangeValidFrom').not(".disabled").datepicker({
        onRender: function (date) {
            return '';
        }
    }).on('changeDate', function (ev) {

        noticeOldDate.hide();

        if (ev.date.valueOf() < now.valueOf())
            noticeOldDate.show();
    }).data('datepicker');

    $('#ChangeValidFrom').change(function () {
        var validFrom = $('#ChangeValidFrom').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dvalidFrom = APIGlobal.DateTime.parseDate(validFrom, format);
        noticeOldDate.hide();
        if (dvalidFrom.valueOf() < now.valueOf())
            noticeOldDate.show();
    });

    //// OrganisationalAssignment
    var lockedbyUserGroup = document.getElementById('LockedByUserGroup').getAttribute('status');
    var Changed = false;
    if ("@Model.ReadOnlyTab("#OrganisationalAssignment")" == 'False' && lockedbyUserGroup == 'False') {
        $(function () {

            setEndDateBehavior($('#ContractType').val());
            //setPaymentDatePickersBehavior();

            if (Changed)
                lockMidlertidigKarakter();

            LockNoticePeriod();
            setIfCasual();
            lockPersonReplacedAndProjectName($(this).val());

            //Locked IF OA18 (Probation period?) = No
            $('#ProbationPeriod').change(function () {
                LockPerobationLength();
            });
            LockPerobationLength();
            lockParticipatingInJour();
            lockIFNotINDIVID();

            if ($('#ContractType').val() == "Temporary" || $('#ContractType').val() == "Replacement") {
                $('#MidlertidigKarakter').attr("disabled", false);
            }
            else {
                $('#MidlertidigKarakter').val("");
                $('#MidlertidigKarakter').attr("disabled", true);
            }

        }); // END Function



        /// Organisational Assignment Tab

        $("#ContractType").change(function () {
            setIfCasual();
            lockMidlertidigKarakter();
            setEndDateBehavior($(this).val());
            lockPersonReplacedAndProjectName($(this).val());
        });

        // if OA15 = "Casual", Employment Percentage default value is 0 --- Notice period  Locked if OA15 Contract type = Casual 
        var setIfCasual = function () {
            var val = $("#ContractType").val().toUpperCase();
            if (val != "".toUpperCase() && val == "Casual".toUpperCase()) {
                $('#EmploymentPercentage').val("0");
                $('#PayrollCategory').val("Hourly");
                $('#NoticePeriod').val("");
                $('#NoticePeriod').attr("disabled", true);
            }
            else {
                $('#NoticePeriod').attr("disabled", false);

                //If OA15 Contract Type = Casual or Seasonal co-worker the value is Hourly; for other types it is monthly
                if (val != "".toUpperCase()) {
                    if (val == "Seasonal co-worker".toUpperCase()) {
                        $('#PayrollCategory').val("Hourly");
                        $('#PaidPer').val("hour");
                    }
                    else {
                        $('#PayrollCategory').val("Monthly");
                        $('#PaidPer').val("");
                    }
                }//End If Not null
            }//End Else
        };
        
        $("#MidlertidigKarakter").change(function () {
            Changed = true;
        });

        //locked if OA15 Contract type other than Temporary
        var lockMidlertidigKarakter = function () {
            var val = $("#ContractType").val().toUpperCase();
            if (val != "".toUpperCase()) {
                if (val == "Temporary".toUpperCase() || val == "Replacement".toUpperCase()) {
                    $('#MidlertidigKarakter').attr("disabled", false);

                    if (val == "Replacement".toUpperCase()) {                      
                        $('#MidlertidigKarakter').val("b");
                    }
                }
                else {
                       $('#MidlertidigKarakter').val("");
                       $('#MidlertidigKarakter').attr("disabled", true);
                }
            }
        };

        // Person replaced and Project Name locked for Contract type: Seasonal co-worker  / Additional in weekly #60314
        function lockPersonReplacedAndProjectName(value) {
            if ($('#ContractType').val() == 'Seasonal co-worker') {
                $('#PersonReplaced').prop('disabled', true);
                $('#PersonReplaced').val("");
                $('#ProjectName').prop('disabled', true);
                $('#ProjectName').val("");
            }
            else {
                $('#PersonReplaced').prop('disabled', false);
                $("#ProjectName").prop("disabled", false);
            }
        };

        // Contract End date locked for Permanent
        function setEndDateBehavior(value) {
            if (value == 'Permanent') {
                $('#date_ContractEndDate').datepicker("destroy");
                $('#date_ContractEndDate').addClass("disabled");
                $('#ContractEndDate').prop('disabled', true);
                $('#ContractEndDate').val("");
            }
            else {
                $('#date_ContractEndDate').datepicker();
                $('#ContractEndDate').prop('disabled', false);
                $("#ContractEndDate").removeClass("disabled");
            }
        };

        var LockNoticePeriod = function () {
            var $BaseSelector = $('#ContractType');
            var $LockSelector = $('#NoticePeriod');
            GetXMLandCallback("norway", "Locks/Change_NoticePeriod.xml", SetLock, $BaseSelector, $LockSelector, lockedbyUserGroup, isTabReadOnly);
        };

        //Locked IF OA18 (Probation period?) = No
        var LockPerobationLength = function () {
            var $BaseSelector = $('#ProbationPeriod');
            var $LockSelector = $('#ProbationLength');
            GetXMLandCallback("norway", "Locks/Change_Probationlength.xml", SetLock, $BaseSelector, $LockSelector, lockedbyUserGroup, isTabReadOnly);
        };

        //Special here: As long as new business unit is read only this will not work. I used call back to make the narrowing and default instead
        function changeBusinessUnitCallback() {
            narrowingWithXML('/Narrowing/ND_BusinessUnit_ReportsToLineManager.xml', '/Data/Data_Global_ReportsToLineManager.xml', $('#NewBusinessUnit'), $('#ReportsToLineManager'));
            narrowingWithXML('/Narrowing/ND_BusinessUnit_LineManagersJobTitle.xml', '/Data/Data_Global_LineManagersJobTitle.xml', $('#NewBusinessUnit'), $('#LineManagersJobTitle'));
            defaultWithXML('/Defaults/Default_BusinessUnit_PrimarySite.xml', $('#NewBusinessUnit'), $('#PrimarySite'));
        }

        $('#NewServiceArea').change(function () {
            narrowingWithXML2Base('/Narrowing/ND_Function_PositionTitle.xml', '/Data/Data_Global_PositionTitle.xml', $('#NewBusinessUnit'), $('#NewServiceArea'), $('#PositionTitle'));
            narrowingWithXML2Base('/Narrowing/ND_Function_JobTitle.xml', '/Data/Data_Global_JobTitle.xml', $('#NewBusinessUnit'), $('#NewServiceArea'), $('#JobTitle'));
            narrowingWithXML('/Narrowing/ND_Function_PsGroup.xml', '/Data/Data_Common_PSGroup.xml', $('#NewServiceArea'), $('#PSGroup'));
        });

        function changeFunctionsCallback() {
            narrowingWithXML2Base('/Narrowing/ND_Function_PositionTitle.xml', '/Data/Data_Global_PositionTitle.xml', $('#NewBusinessUnit'), $('#NewServiceArea'), $('#PositionTitle'));
            narrowingWithXML2Base('/Narrowing/ND_Function_JobTitle.xml', '/Data/Data_Global_JobTitle.xml', $('#NewBusinessUnit'), $('#NewServiceArea'), $('#JobTitle'));
            narrowingWithXML('/Narrowing/ND_Function_PsGroup.xml', '/Data/Data_Common_PSGroup.xml', $('#NewServiceArea'), $('#PSGroup'));
            //$('#NewDepartment').trigger("change");
        }

        $('#NewDepartment').change(function () {
            defaultWithXML('/Defaults/Default_Department_CostCentre.xml', $(this), $('#CostCentre'));
            defaultWithXML('/Defaults/Default_Department_ReportsToLineManager.xml', $(this), $('#ReportsToLineManager'));
        });

        $('#PositionTitle').change(function () {

            @*
            //1. Börjar här att vi kallar på den här i changeFunctionsCallback och och att selectize_tags.clearOptions(); 
            // triggar #positionTitle.change eventet så att "Default" kallas på igen

            //eftersom vi vet att det här sker 1 gång kan vi göra så här
            *@
            @*//Hidden kommer endast ha värde om caset är sparat *@
            if ($('#hidden_JobTitle').val() == '')
                SetDefCount = 0;
            else {
                SetDefCount += 1;
            }

           @*//I det här fallet är det 1 ggr den kallas på, det här kan skifta *@
            if (SetDefCount > 1) {
                $('#hidden_JobTitle').val('');
            }

            if (SetDefCount == 0) {
                defaultWithXML('/Defaults/Default_PositionTitle_JobTitle.xml', $(this), $('#JobTitle'));
            }

            @*//Employee Search - set JobTitle value from Current Record *@
            var $targetSelector = $('#JobTitle');
            var employeeSearchValue = "";

            try {
                employeeSearchValue = $('#employeeSearch_JobTitle').val();
            } catch (e) {
            }

            if (employeeSearchValue != '') {
                setTimeout(function () {
                    if ($targetSelector[0].selectize) {
                        $targetSelector[0].selectize.setValue(employeeSearchValue);
                    }
                    else {
                        $targetSelector.val(employeeSearchValue);
                    }
                }, 600);

                $('#employeeSearch_JobTitle').val('');
            }

        });

        $('#ReportsToLineManager').change(function () {

              @*
            //1. Börjar här att vi kallar på den här i changeFunctionsCallback och och att selectize_tags.clearOptions(); 
            // triggar #ReportsToLineManager.change eventet så att "Default" kallas på igen

            //eftersom vi vet att det här sker 1 ggr kan vi göra så här
            *@
            @*//Hidden kommer endast ha värde om caset är sparat *@
              if ($('#hidden_LineManagersJobTitle').val() == '')
                  SetDefCountReportsToLineManager = 0;
              else {
                  SetDefCountReportsToLineManager += 1;
              }

           @*//I det här fallet är det 1 ggr den kallas på, det här kan skifta *@
              if (SetDefCountReportsToLineManager > 1) {
                  $('#hidden_LineManagersJobTitle').val('');
              }

              if (SetDefCountReportsToLineManager == 0) {
                  defaultWithXML('/Defaults/Default_ReportsToLineManager_LineManagersJobTitle.xml', $(this), $('#LineManagersJobTitle'));
              }


        



          });

        $('#PSGroup').change(function () {
            narrowingWithXML('/Narrowing/ND_PsGroup_Level.xml', '/Data/Data_Common_Level.xml', $('#PSGroup'), $('#Level'));
            lockIFNotINDIVID();
        });

        /*** END Narrowing down related scripts***/

          @*//I know... vi borde göra en loop här /TAN*@
        $('#AllowancesType').change(function () {
            defaultWithXML('/Defaults/Default_Change_AllowanceType_AllowancePaidPer.xml', $(this), $('#AllowancesPaidPer'));
        });

        $('#AllowancesType2').change(function () {
            defaultWithXML('/Defaults/Default_Change_AllowanceType_AllowancePaidPer.xml', $(this), $('#AllowancesPaidPer2'));
        });

        $('#AllowancesType3').change(function () {
            defaultWithXML('/Defaults/Default_Change_AllowanceType_AllowancePaidPer.xml', $(this), $('#AllowancesPaidPer3'));
        });

        $('#AllowancesType4').change(function () {
            defaultWithXML('/Defaults/Default_Change_AllowanceType_AllowancePaidPer.xml', $(this), $('#AllowancesPaidPer4'));
        });

        $('#AllowancesType5').change(function () {
            defaultWithXML('/Defaults/Default_Change_AllowanceType_AllowancePaidPer.xml', $(this), $('#AllowancesPaidPer5'));
        });


    }// END IF READ ONLY Organisation assignemnt


    /// Payment Tab


    if ("@Model.ReadOnlyTab("#Payment")" == "False" && lockedbyUserGroup == 'False') {

        $(function () {

        });// End Function


        //Locked if PM.CS.1.1 PS Group is different than INDIVID
        var lockIFNotINDIVID = function () {
            var val = $("#PSGroup").val();
            if (val == "INDIVID") {
                $('#Overtime').attr("disabled", false);
                $('#Autopunch').attr("disabled", false);

                // SG : Case 54681 -  Locked if PM.CS.1.1 PS Group is different than INDIVID and if PM.CS.3.1 Overtime included in the salary = No
                //if ($('#Overtime').val() == "" || $('#Overtime').val() == "Yes")
                    $('#ParticipatingInJour').attr("disabled", false);

                if (!$("#NextTariff_Year").is(":disabled")) {
                    $('#NextTariff_Day_Month').html('01.09');
                }
            }
            else {

                if (!$("#NextTariff_Year").is(":disabled")) {
                    $('#NextTariff_Day_Month').html('01.04');
                }

                if (val != "") {
                    $('#Overtime').val("");
                    $('#Autopunch').val("");
                    $('#ParticipatingInJour').val("");
                    $('#Overtime').attr("disabled", true);
                    $('#Autopunch').attr("disabled", true);
                    $('#ParticipatingInJour').attr("disabled", true);
                }
            }

            if (!$("#NextTariff_Year").is(":disabled")) {
                var NextTariff_Day_Month = $('#NextTariff_Day_Month').html();
                var NextTariff_Year = $('#NextTariff_Year').val();
                $("#NextTariff").val($.trim(NextTariff_Day_Month) + "." + $.trim(NextTariff_Year));
            }
        };

        $("#date_NextTariff_Year").not(".disabled").datepicker({
            format: " yyyy", // Notice the Extra space at the beginning
            viewMode: "years",
            minViewMode: "years"
        });

        $("#date_NextTariff_Year").not(".disabled").keyup(function () {
            var NextTariff_Day_Month = $('#NextTariff_Day_Month').html();
            var NextTariff_Year = $('#NextTariff_Year').val();
            $("#NextTariff").val($.trim(NextTariff_Day_Month) + "." + $.trim(NextTariff_Year));
        });

        $('#date_NextTariff_Year').not(".disabled").datepicker().on('changeDate', function (ev) {
            var NextTariff_Day_Month = $('#NextTariff_Day_Month').html();
            var NextTariff_Year = ev.date.getFullYear();
            $("#NextTariff").val($.trim(NextTariff_Day_Month) + "." + $.trim(NextTariff_Year));
            $(this).datepicker('hide');
        });

       
        // Locked IF PM.CS.3.1 Overtime included in the salary = No
        var psGroup = $('#PSGroup');

        $('#Overtime').change(function () {
           // lockParticipatingInJour();
        });

        var lockParticipatingInJour = function () {
            //var val = $("#Overtime").val().toUpperCase();
            if (psGroup.val().toUpperCase() == 'INDIVID'.toUpperCase()) {
                //if (val != "".toUpperCase() && val == "No".toUpperCase()) {
                //    $('#ParticipatingInJour').val("");
                //    $('#ParticipatingInJour').attr("disabled", true);
                //}
                //else {
                    $('#ParticipatingInJour').attr("disabled", false);
                //}
            }
            else {
                $('#ParticipatingInJour').attr("disabled", true);
            }
        };

        ////******** S.G Work order CR20- HD case : #54369 Do not default validatefrom dates
        //function setPaymentDatePickersBehavior() {

        //    $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5,' +
        //    '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker('destroy');

        //    var startDate = $('#ChangeValidFrom').val();
        //    var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        //    if (startDate) {
        //        var dStart = APIGlobal.DateTime.parseDate(startDate, format);
        //        var forcePicker = new Date(dStart.getFullYear(), dStart.getMonth(), dStart.getDate(), 0, 0, 0, 0);
        //        $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5,' +
        //            '#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker(
        //        {
        //            onRender: function (ev) {
        //                return ev.valueOf() < forcePicker.valueOf() ? 'disabled' : '';
        //            },
        //        });

        //        ////set value to the datepicker
        //        $('#date_DeductionsValidFrom,#date_DeductionsValidFrom2,#date_DeductionsValidFrom3,#date_DeductionsValidFrom4,#date_DeductionsValidFrom5').not(".disabled").datepicker("setValue", forcePicker);
        //        $('#date_AllowancesValidFrom,#date_AllowancesValidFrom2,#date_AllowancesValidFrom3,#date_AllowancesValidFrom4,#date_AllowancesValidFrom5').not(".disabled").datepicker("setValue", forcePicker);

        //        $('#AllowancesValidFrom,#AllowancesValidFrom2,#AllowancesValidFrom3,#AllowancesValidFrom4,#AllowancesValidFrom5,' +
        //          '#DeductionsValidFrom,#DeductionsValidFrom2,#DeductionsValidFrom3,#DeductionsValidFrom4,#DeductionsValidFrom5').val(startDate);
        //    }
        //}

        //$('#date_ChangeValidFrom').on('changeDate', function (ev) {
        //    setPaymentDatePickersBehavior();
        //}).data('datepicker');

        //$('#ChangeValidFrom').change(function () {
        //    setPaymentDatePickersBehavior();
        //});

    } // End IF READ ONLY TAB Payment

    else {        

        //Set Next tarif day and month while the tab is read only.       
            var val = $("#PSGroup").val();
            if (val == "INDIVID") {

                    $('#NextTariff_Day_Month').html('01.09');
            }
            else {
                    $('#NextTariff_Day_Month').html('01.04');
            }

    }// END Else TAb payment is read ONLY
</script>


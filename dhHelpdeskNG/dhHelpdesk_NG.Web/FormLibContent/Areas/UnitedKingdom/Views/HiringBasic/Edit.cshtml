@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;

@{
    ViewBag.Title = Model.Translate("United Kingdom") + " - " + Model.Translate("Hiring");
}

@section Validation {

    @Html.Partial("_Validate", Model)

}

@section Script {

    <script type="text/javascript">

        var ect = new Ect();

        $(document).on('click', '#btnMailingAddress, #btnEmergencyAddress', function (e) {
            e.preventDefault();

            var prefix = $(this).attr('data-prefix');
            ect.copyValueFrom($('#PermanentAddressLine1'), $('#' + prefix + 'AddressLine1'));
            ect.copyValueFrom($('#PermanentAddressLine2'), $('#' + prefix + 'AddressLine2'));
            ect.copyValueFrom($('#PermanentPostalCode'), $('#' + prefix + 'PostalCode'));
            ect.copyValueFrom($('#PermanentCity'), $('#' + prefix + 'City'));
            ect.copyValueFrom($('#PermanentCountry'), $('#' + prefix + 'Country'));
        });

        if ($('#LengthOfInductionInDays').val() == "") {
            $('.Induction').hide();
        }
        else {
            showHideInductionDays($('#LengthOfInductionInDays').val().substring(0, 1));
        }

        function showHideInductionDays(val) {

            $('.Induction').hide();
            if (val != "") {
                var intVal = parseInt(val);
                var allElements = document.querySelectorAll('.Induction');

                for (var i = 0; i <= allElements.length ; i++) {
                    var grpVal = $(allElements[i]).attr('Group');
                    if (parseInt(grpVal) <= intVal) {
                        $(allElements[i]).show();
                    }
                }
            }

        };


        validate.run($('#actionState').val());

        $(document).on('change', '#actionState', function (e) {
            var val = $(this).val();
            validate.run(val);
        });
    </script>

}

@Html.Partial("_Edit", Model)
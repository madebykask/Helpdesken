@model ECT.FormLib.Models.FormModel
@using ECT.FormLib;
@using ECT.FormLib.Models;
@{
    const string TerminationPaymentTypeDefault = "";
}
<div class="tab-pane" id="Complete">
    <div class="span6">
        <table class="table">
            <tbody>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Termination Details")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("CompleteTerminationType")</td>
                    <td>
                        @Model.Element("CompleteTerminationType")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TerminationReason")</td>
                    <td>
                        @Model.Element("TerminationReason")
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("HomeCountry")</td>
                    <td>
                        @Model.Element("HomeCountry")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TerminationPaymentMethod")</td>
                    <td>
                        @Model.Element("TerminationPaymentMethod")</td>
                </tr>


                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Termination Payments")</h4>
                    </td>
                </tr>

                <tr>
                    <td class="tdstrong">@Model.Label("TerminationPaymentType")</td>
                    <td>
                        @Model.Element("TerminationPaymentType")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("TerminationAmountUnits")</td>
                    <td>
                        @Model.Element("TerminationAmountUnits")</td>
                </tr>
                @*             <tr>
                <td class="tdstrong">@Model.Label("TerminationNetGross")</td>
                <td>
                    @Model.Element("TerminationNetGross")</td>
            </tr>*@
@*                <tr>
                    <td class="tdstrong">@Model.Label("OneIKEABonusDue")</td>
                    <td>
                        @Model.Element("OneIKEABonusDue")
                        <div id="notice_OneIKEABonusDue" style="display: none;" class="notice">
                            @Model.Translate("Check with SO Business Navigator")
                        </div>
                    </td>
                </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("TerminationPaymentDate")</td>
                    <td>
                        @Model.Element("TerminationPaymentDate")

                        <div id="notice_TerminationPaymentDate" style="display: none;" class="notice">
                            @Model.Translate("The date you've entered is in the past.")
                            <br />
                            @Model.Translate("Are you sure you want to backdate Payment Date?")
                        </div>
                    </td>
                </tr>

                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="terminationpayments@(i.ToString())" id="terminationpayments@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Termination Payments") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="terminationpayments@(i.ToString())">
                        <td class="tdstrong">@Model.Label("TerminationPaymentType" + i.ToString())</td>
                        <td>
                            @Model.Element("TerminationPaymentType" + i.ToString())</td>
                    </tr>
                    <tr class="terminationpayments@(i.ToString())">
                        <td class="tdstrong">@Model.Label("TerminationAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("TerminationAmountUnits" + i.ToString())</td>
                    </tr>
@*<tr class="terminationpayments@(i.ToString())">
                          <td class="tdstrong">@Model.Label("TerminationNetGross" + i.ToString())</td>
                          <td>
                              @Model.Element("TerminationNetGross" + i.ToString())</td>
                      </tr>*@@*
                      <tr class="terminationpayments@(i.ToString())">
                          <td class="tdstrong">@Model.Label("OneIKEABonusDue" + i.ToString())</td>
                          <td>
                              @Model.Element("OneIKEABonusDue" + i.ToString())
                              <div id="notice_OneIKEABonusDue@(i.ToString())" style="display:none;" class="notice">
                            @Model.Translate("Check with SO Business Navigator")
                        </div>
                          </td>
                      </tr>
                      <tr class="terminationpayments@(i.ToString())">
                          <td class="tdstrong">@Model.Label("TerminationPaymentDate" + i.ToString())</td>
                          <td>
                              @Model.Element("TerminationPaymentDate" + i.ToString())

                              <div id="notice_TerminationPaymentDate@(i.ToString())" style="display:none;" class="notice">
                            @Model.Translate("The date you've entered is in the past.")
                                <br />
                             @Model.Translate("Are you sure you want to backdate Payment Date?")
                        </div>
                          </td>
                      </tr>*@
                }

                <tr id="addTerminationPaymentsTrr">
                    <td colspan="2">
                        @Model.Element("TerminationPayments")
                        <a id="addTerminationPayment" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another termination payment")</a></td>
                </tr>
                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Deductions from Termination Payment")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionType")</td>
                    <td>
                        @Model.Element("DeductionType")</td>
                </tr>
                @*                            <tr>
                <td class="tdstrong">@Model.Label("OtherDeduction")</td>
                <td>
                    @Model.Element("OtherDeduction")</td>
            </tr>*@
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionAmountUnits")</td>
                    <td>
                        @Model.Element("DeductionAmountUnits")</td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("DeductionDate")</td>
                    <td>
                        @Model.Element("DeductionDate")</td>
                </tr>


                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="deduction@(i.ToString())" id="deduction@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Deductions from Termination Payment") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionType" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionType" + i.ToString())</td>
                    </tr>@*
                      <tr class="deduction@(i.ToString())">
                          <td class="tdstrong">@Model.Label("OtherDeduction" + i.ToString())</td>
                          <td>
                              @Model.Element("OtherDeduction" + i.ToString())</td>
                      </tr>*@
                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionAmountUnits" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionAmountUnits" + i.ToString())</td>
                    </tr>

                    <tr class="deduction@(i.ToString())">
                        <td class="tdstrong">@Model.Label("DeductionDate" + i.ToString())</td>
                        <td>
                            @Model.Element("DeductionDate" + i.ToString())</td>
                    </tr>
                }

                <tr id="addDeductionTrr">
                    <td colspan="2">
                        @Model.Element("Deductions")
                        <a id="addDeduction" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another deduction from Termination Payment")</a></td>
                </tr>

                <tr>
                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Returned IKEA property")</h4>
                    </td>
                </tr>
                <tr>
                    <td class="tdstrong">@Model.Label("UnreturnedItems")</td>
                    <td>
                        @Model.Element("UnreturnedItems")</td>
                </tr>
                @for (int i = 2; i <= FormLibConstants.FormField.MultipleEntrySectionsNr; i++)
                {
                    <tr class="UnreturnedItem@(i.ToString())" id="UnreturnedItem@(i.ToString())">
                        <td class="tdstrong" colspan="2">
                            <h4>@Model.Translate("Returned IKEA property") @i.ToString()</h4>
                        </td>
                    </tr>
                    <tr class="UnreturnedItem@(i.ToString())">
                        <td class="tdstrong">@Model.Label("UnreturnedItems" + i.ToString())</td>
                        <td>
                            @Model.Element("UnreturnedItems" + i.ToString())</td>
                    </tr>
                }
                <tr id="addUnreturnedItemTrr">
                    <td colspan="2">
                        @Model.Element("UnreturnedItemsMulti")
                        <a id="addUnreturnedItem" class="btn btn-link btn-mini pull-right">@Model.Translate("Add another unreturned item")</a></td>
                </tr>


                <tr>

                    <td class="tdstrong" colspan="2">
                        <h4>@Model.Translate("Country Specifics")</h4>
                    </td>
                </tr>
                <tr>
                <tr>
                    <td class="tdstrong">@Model.Label("PositionRemovedOMStructure")</td>
                    <td>
                        @Model.Element("PositionRemovedOMStructure")</td>
                </tr>

                @*                                            <tr>
                <td class="tdstrong">@Model.Label("PensionMember")</td>
                <td>
                    @Model.Element("PensionMember")</td>
            </tr>*@

            </tbody>
        </table>
    </div>
    <input type="hidden" id="MultipleEntrySectionsNr" value="@FormLibConstants.FormField.MultipleEntrySectionsNr" />
</div>

<script>

    $('#addTerminationPayment').click(function (e) {

        //add 1, since the counter in the hidden field (#TerminationPayments) is updated in the click event in etc.js
        var counterTerminationPayments = parseInt($('#TerminationPayments').val()) + 1;
        //set default value
        $('#TerminationPaymentType' + counterTerminationPayments).val('@TerminationPaymentTypeDefault');
    });

    $('#TerminationPaymentDate').change(function () {

        var startDate = $('#TerminationPaymentDate').val();
        var format = APIGlobal.DateTime.parseFormat('dd.mm.yyyy');
        var dstartDate = APIGlobal.DateTime.parseDate(startDate, format);
        var nowTemp = new Date();
        var now = new Date(nowTemp.getFullYear(), nowTemp.getMonth(), nowTemp.getDate(), 0, 0, 0, 0);

        if (dstartDate.valueOf() < now.valueOf()) {
            $('#notice_TerminationPaymentDate').show();
        }
    });

    var TerminationPaymentDate = $('#notice_TerminationPaymentDate');
    var dateDatePicker = $('#date_TerminationPaymentDate');
    if (TerminationPaymentDate.length > 0) {
        var startDate = new Date();
        startDate.setHours(0, 0, 0, 0);

        dateDatePicker.not(".disabled").datepicker()
            .on('changeDate', function (e) {
                if (e.date.valueOf() < startDate.valueOf()) {

                    TerminationPaymentDate.show();
                } else {

                    TerminationPaymentDate.hide();
                }
            });
    }

    $('#OneIKEABonusDue').on('change', function () {

        $('#notice_OneIKEABonusDue').show();
    });

    $('#TerminationReason').on('change', function () {
        disableOneIKEABonus();
    });
  
    
    $(function () {
        disableOneIKEABonus();       
    });

    function disableOneIKEABonus() {

        //Disables the value if called upon. Called by onload an termination reason change.

        /// The payment type “One IKEA Bonus Due” shall be selectable for Termination Types:  Retirement, Redundancy, Other


        value = 'One IKEA Bonus Due';

        if ($('#TerminationReason').val().toLowerCase() == 'International transfer begins'.toLowerCase() || $('#CompleteTerminationType').val().toLowerCase() != 'Dismissal'.toLowerCase()) {

            $('#TerminationPaymentType option:contains("' + value + '")').removeAttr('disabled');
            $('#TerminationPaymentType2 option:contains("' + value + '")').removeAttr('disabled');
            $('#TerminationPaymentType3 option:contains("' + value + '")').removeAttr('disabled');
            $('#TerminationPaymentType4 option:contains("' + value + '")').removeAttr('disabled');
            $('#TerminationPaymentType5 option:contains("' + value + '")').removeAttr('disabled');
        }
        else {
            $('#TerminationPaymentType option:contains("' + value + '")').attr("disabled", "1");
            $('#TerminationPaymentType2 option:contains("' + value + '")').attr("disabled", "1");
            $('#TerminationPaymentType3 option:contains("' + value + '")').attr("disabled", "1");
            $('#TerminationPaymentType4 option:contains("' + value + '")').attr("disabled", "1");
            $('#TerminationPaymentType5 option:contains("' + value + '")').attr("disabled", "1");
            if (document.getElementById('TerminationPaymentType').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType').value = '';
            }
            if (document.getElementById('TerminationPaymentType2').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType2').value = '';
            }
            if (document.getElementById('TerminationPaymentType3').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType3').value = '';
            }
            if (document.getElementById('TerminationPaymentType4').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType4').value = '';
            }
            if (document.getElementById('TerminationPaymentType5').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType5').value = '';
            }
        }
      

        value = 'Redundancy Payment';
        if ($('#TerminationReason').val().toLowerCase() == 'Redundancy'.toLowerCase()) {

            $('#TerminationPaymentType option:contains("' + value + '")').removeAttr('disabled');
            $('#TerminationPaymentType2 option:contains("' + value + '")').removeAttr('disabled');
            $('#TerminationPaymentType3 option:contains("' + value + '")').removeAttr('disabled');
            $('#TerminationPaymentType4 option:contains("' + value + '")').removeAttr('disabled');
            $('#TerminationPaymentType5 option:contains("' + value + '")').removeAttr('disabled');
        }
        else {
            $('#TerminationPaymentType option:contains("' + value + '")').attr("disabled", "1");
            $('#TerminationPaymentType2 option:contains("' + value + '")').attr("disabled", "1");
            $('#TerminationPaymentType3 option:contains("' + value + '")').attr("disabled", "1");
            $('#TerminationPaymentType4 option:contains("' + value + '")').attr("disabled", "1");
            $('#TerminationPaymentType5 option:contains("' + value + '")').attr("disabled", "1");
            if (document.getElementById('TerminationPaymentType').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType').value = '';
            }
            if (document.getElementById('TerminationPaymentType2').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType2').value = '';
            }
            if (document.getElementById('TerminationPaymentType3').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType3').value = '';
            }
            if (document.getElementById('TerminationPaymentType4').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType4').value = '';
            }
            if (document.getElementById('TerminationPaymentType5').value.toLowerCase() == value.toLowerCase()) {
                document.getElementById('TerminationPaymentType5').value = '';
            }
        }

    }


</script>

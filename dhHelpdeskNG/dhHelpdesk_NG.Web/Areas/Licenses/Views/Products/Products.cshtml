@using DH.Helpdesk.Web.Infrastructure
@using System.Linq;
@model DH.Helpdesk.Web.Areas.Licenses.Models.Products.ProductsContentModel

<table class="table table-striped table-bordered table-hover table-pointer">
    <thead>
        <tr>
            <th>@Translation.Get("Produkt")</th>
            <th>@Translation.Get("Område")</th>
            <th>@Translation.Get("Avdelning")</th>
            <th>@Translation.Get("Antal licenser")</th>
            <th>@Translation.Get("Använda licenser")</th>
            <th>@Translation.Get("Differens")</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in Model.Products)
        {
            var hasGrouped = (product.Regions.Any() || product.DepartmentLicenses.Where(d => d.DepartmentId > 0).Any());            
            <tr>
                <td onclick="window.location.href='@Url.Action("Product", new RouteValueDictionary { { "productId", product.ProductId } })'">
                    @product.ProductName
                </td>
                <td onclick="window.location.href='@Url.Action("Product", new RouteValueDictionary { { "productId", product.ProductId } })'">                                       
                    @if (hasGrouped)
                    {
                        <br/>
                    }
                    @for (var i = 0; i < product.Regions.Length; i++)
                    {
                        if (i > 0)
                        {
                            <br/>
                        }                        
                        @product.Regions[i];
                    }
                </td>                

                @*Department Column*@
                <td onclick="window.location.href='@Url.Action("Product", new RouteValueDictionary { { "productId", product.ProductId } })'">                    
                    @if (hasGrouped)
                    {
                        <br/>
                    }
                    @foreach (var department in product.DepartmentLicenses.Where(x => !string.IsNullOrEmpty(x.DepartmentName)).OrderBy(x => x.DepartmentName).ToList())
                    {                        
                        @department.DepartmentName;                        
                        <br/>
                    }

                    @foreach (var department in product.DepartmentLicenses.Where(x => string.IsNullOrEmpty(x.DepartmentName)).OrderBy(x => x.DepartmentName).ToList())
                    {                        
                        @department.DepartmentName;                        
                        <br/>
                    }

                </td> 
                
                @*Licenses Column*@               
                <td onclick="window.location.href='@Url.Action("Product", new RouteValueDictionary { { "productId", product.ProductId } })'">
                    @if (hasGrouped)
                    {                        
                        @product.DepartmentLicenses.Select(x=> x.NumberOfLicenses).Sum()
                        <br/>
                    }

                    @foreach (var license in product.DepartmentLicenses.Where(x => !string.IsNullOrEmpty(x.DepartmentName)).OrderBy(x => x.DepartmentName).ToList())
                    {                        
                        @license.NumberOfLicenses;                        
                        <br/>
                    }

                    @foreach (var license in product.DepartmentLicenses.Where(x => string.IsNullOrEmpty(x.DepartmentName)).OrderBy(x => x.DepartmentName).ToList())
                    {                        
                        @license.NumberOfLicenses;                        
                        <br/>
                    }
                </td>

                @*Used Licenses Column*@ 
                @if (product.DepartmentLicenses.Where(l=> l.NumberOfUsedLicenses > 0).Any())
                {
                    var usedNum = product.DepartmentLicenses.Select(x => x.NumberOfUsedLicenses).Sum();
                    <td>                                               
                        @if (usedNum > 0)
                        {
                            @usedNum  
                            <img src="@Url.Content("~/Content/icons/case.png")" data-productId="@product.ProductId" onclick=" showComputers(this, parameters.computersUrl); return false; " />   
                        }
                        
                        @if (hasGrouped)
                        {
                            <br/>
                            foreach (var license in product.DepartmentLicenses.Where(x => !string.IsNullOrEmpty(x.DepartmentName)).OrderBy(x => x.DepartmentName).ToList())
                            {
                                if (license.NumberOfUsedLicenses > 0)
                                {
                                  @license.NumberOfUsedLicenses;                                                      
                                }
                                <br/>
                            }

                            foreach (var license in product.DepartmentLicenses.Where(x => string.IsNullOrEmpty(x.DepartmentName)).OrderBy(x => x.DepartmentName).ToList())
                            {                        
                                if (license.NumberOfUsedLicenses > 0)
                                {
                                  @license.NumberOfUsedLicenses;                                                      
                                }
                                <br/>
                            }
                        }
                                                                       
                    </td>
                }
                else
                {
                    <td onclick="window.location.href='@Url.Action("Product", new RouteValueDictionary { { "productId", product.ProductId } })'">
                         
                    </td>                        
                }

                @*Licenses Difference Column*@ 
                <td onclick="window.location.href='@Url.Action("Product", new RouteValueDictionary { { "productId", product.ProductId } })'">    
                       @{
                            var sumDiff = @product.DepartmentLicenses.Select(x => x.LicensesDifference).Sum();
                        }                                    
                        <span class='@(sumDiff < 0?"textred":"")'>
                             @sumDiff
                        </span>  
                        
                        
                        @if (hasGrouped)
                        {
                            <br/>
                            foreach (var license in product.DepartmentLicenses.Where(x => !string.IsNullOrEmpty(x.DepartmentName)).OrderBy(x => x.DepartmentName).ToList())
                            {
                                if (license.LicensesDifference != 0)
                                {                             
                                  <span class='@(license.LicensesDifference<0?"textred":"")'>
                                    @license.LicensesDifference
                                  </span>         
                                }
                                <br/>
                            }

                            foreach (var license in product.DepartmentLicenses.Where(x => string.IsNullOrEmpty(x.DepartmentName)).OrderBy(x => x.DepartmentName).ToList())
                            {                        
                                if (license.LicensesDifference != 0)
                                {
                                  <span class='@(license.LicensesDifference < 0?"textred":"")'>
                                    @license.LicensesDifference
                                  </span>                                                        
                                }
                                <br/>
                            }
                        }
                                                                       
                </td>                
            </tr>
        }        
    </tbody>
</table>

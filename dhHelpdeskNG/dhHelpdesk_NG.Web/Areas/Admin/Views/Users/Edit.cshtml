@model DH.Helpdesk.Web.Areas.Admin.Models.UserInputViewModel
@{
    ViewBag.Title = "Edit";
    var isCopyRequest = Request.QueryString["copy"] == "1";
    var requestParams =
        isCopyRequest ? (object) new { id = Model.User.Id, copy = 1 } : new { id = Model.User.Id };
}

@using (Html.BeginForm("edit", "users", requestParams, FormMethod.Post, new { id = "target" }))
{
    <div class="secnavs fixed">
        <div class="pull-left">
            <ul class="secnav">
                <li>
                    @Html.ActionLink(Translation.GetCoreTextTranslation("Spara"), "edit", new { id = Model.User.Id },
                        new { id = "btnSave", @class = "btn" })
                </li>

                <li>
                    @Html.ActionLink(Translation.GetCoreTextTranslation("Ta bort"), "delete", new { id = Model.User.Id },
                            new { @class = "btn deleteDialog", deleteDialogText = Translation.GetCoreTextTranslation("Är du säker på att du vill ta bort aktuell post") })
                </li>

                @if (!isCopyRequest)
                {
                    <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Kopiera"), "edit", new { id = Model.User.Id, copy = 1 }, new { @class = "btn" })</li>
                }
                <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Avbryt"), "index", null, new { @class = "btn" })</li>
            </ul>
        </div>
    </div>
    @Html.Partial("_Input", Model)
}

@section Dialogs
{ 
    @if (Model.ChangePasswordModel != null)
    {
        @Html.Partial("~/Views/Shared/_ChangePassword.cshtml", Model.ChangePasswordModel)
    }
}

@section Scripts {
    @Scripts.Render("~/bundles/admin/users")

    <script type="text/javascript">
        var isUserCopy = @Html.Raw(Json.Encode(isCopyRequest));
        var submitted = false;
        $(function() {

            $('#btnSave').click(function(e) {
                e.preventDefault();
                $('#target').submit();
                return false;
            });

            var validator = $("#target").validate({
                ignore: '',
                rules: {
                    "User.UserID": {
                        required: true
                    },
                    "User.FirstName": {
                        required: true
                    },
                    "User.SurName": {
                        required: true
                    },
                    "User.Email": {
                        required: true,
                        email: true
                    },
                    "User.Customer_Id": {
                        required: true
                    },

                    "NewPassword": {
                        required: function() {
                            return isUserCopy;
                        }
                    },

                    "ConfirmPassword": {
                        equalTo: {
                            param: '#NewPassword',
                            depends: function(el) {
                               return isUserCopy;
                            }
                        }
                    }
                },
                messages: {
                    "User.UserID": {
                        required: "@Translation.GetForJS("Du måste ange ett Användar ID")"
                    },
                    "User.FirstName": {
                        required: "@Translation.GetForJS("Du måste ange ett namn")"
                    },
                    "User.SurName": {
                        required: "@Translation.GetForJS("Du måste ange ett namn")"
                    },
                    "User.Email": {
                        required: "@Translation.GetForJS("Du måste ange en e-post adress")",
                        email: "@Translation.GetForJS("E-postadress är inte giltig.")"
                    }
                    ,
                    "User.Customer_Id": {
                        required: "@Translation.GetForJS("Du måste ange en standardkund")"
                    },

                    "NewPassword": {
                        required: "@Translation.GetForJS("Du måste ange ett lösenord")"
                    },

                    "ConfirmPassword": {
                        equalTo: "@Translation.GetForJS("Kontrollera att lösenord och bekräftat lösenord stämmer överens")"
                    }
                },
                showErrors: function(errorMap, errorList) {
                    if (submitted) {
                        var liSet = '';
                        $('li[tab]').removeClass('error');
                        $.each(errorList, function () {
                            const tabId = $(this.element).parents('.tab-pane')[0].id;
                            $('li[tab="' + tabId + '"]').addClass('error');
                            liSet += '<li>' + this.message + '</li>';
                        });
                        $('.validation-summary-valid ul').html(liSet);
                        submitted = false;
                    }
                    this.defaultShowErrors();
                },          
                invalidHandler: function(form, validator) {
                    submitted = true;
                },
                submitHandler: function(form) {
                    submitForm();
                    form.submit();
                }
            });

            const message = '@TempData["AlertMessage"]';
            if (message) {
                dhHelpdesk.admin.users.utils.showWarning(message);
            }
        });


    </script>
}
    
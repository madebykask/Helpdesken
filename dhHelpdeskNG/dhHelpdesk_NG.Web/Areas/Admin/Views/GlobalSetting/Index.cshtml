@using System.Linq;
@using DH.Helpdesk.Web.Infrastructure
@model DH.Helpdesk.Web.Areas.Admin.Models.GlobalSettingIndexViewModel
@{
    ViewBag.Title = "Global Settings";
 
}

<div class="secnavs fixed">
    <div class="pull-left">
        <ul class="secnav" id="myButton">
            <li id="menu1" style="display: block">
                @Html.ActionLink(Translation.GetCoreTextTranslation("Ändra") + " " + Translation.GetCoreTextTranslation("inställningar"), "change", null, new { @class = "btn" })
            </li>
            <li id="menu2" style="display: none">
                @Html.ActionLink(Translation.GetCoreTextTranslation("Lägg till") + " " + Translation.GetCoreTextTranslation("Kalender helgdagar"), "newholiday", new { newholiday = 1 }, new { @class = "btn" })
            </li>
            <li id="menu3" style="display: none">
                @Html.ActionLink(Translation.GetCoreTextTranslation("Lägg till") + " " + Translation.GetCoreTextTranslation("Kalender bevakningsdatum"), "newwatchdate", new { newwdc = 1 }, new { @class = "btn" })
            </li>
            <li id="menu4" style="display: none">
                @Html.ActionLink(Translation.GetCoreTextTranslation("Lägg till") + " " + Translation.GetCoreTextTranslation("Översättningar"), "newtranslation", new { newtext = 1, texttypeid = Model.TextType.Id }, new { @class = "btn" })
            </li>
            <li id="menu5" style="display: none"></li>
            <li id="menu6" style="display: none">
                @Html.ActionLink(Translation.GetCoreTextTranslation("Kör"), null, null, new {id = "privacyRunBtn", @class = "btn"})
                <i id="inProcessLoader" class="gif-loader" style="display:none">&nbsp;</i>
            </li>
        </ul>
    </div>
</div>
<div class="content">
    <div class="container">
        <ul class="nav nav-tabs" id="myTab">
            <li class="active" id="tab1" onclick="toggleMenuItems(1)"><a href="#fragment-1">@Translation.GetCoreTextTranslation("Allmänt")</a></li>
            <li id="tab2" onclick="toggleMenuItems(2)"><a href="#fragment-2">@Translation.GetCoreTextTranslation("Kalender helgdagar")</a></li>
            <li id="tab3" onclick="toggleMenuItems(3)"><a href="#fragment-3">@Translation.GetCoreTextTranslation("Kalender bevakningsdatum")</a></li>
            <li id="tab4" onclick="toggleMenuItems(4)"><a href="#fragment-4">@Translation.GetCoreTextTranslation("Översättningar")</a></li>
            <li id="tab5" onclick="toggleMenuItems(5)"><a href="#fragment-5">@Translation.GetCoreTextTranslation("Självservice")</a></li>
            @if (Model.DataPrivacy.IsAvailable)
            {
                <li id="tab6" onclick="toggleMenuItems(6)"><a href="#fragment-6">@Translation.GetCoreTextTranslation("Dataintegritet")</a></li>
            }
        </ul>
        <div class="tab-content">
            <div class="tab-pane tab-pane-border active" id="fragment-1">
                <table class="table table-striped table-bordered table-hover" id="tblChange">
                    <thead>
                        <tr>
                            <th>
                                @Translation.GetCoreTextTranslation("Applikationsnamn")
                            </th>
                            <th>
                                @Translation.GetCoreTextTranslation("Standard") @Translation.GetCoreTextTranslation("Språk")
                            </th>
                            <th>
                                @Translation.GetCoreTextTranslation("Version")
                            </th>
                            <th>
                                @Translation.GetCoreTextTranslation("Tid")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.GlobalSettings)
                        { 
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.ApplicationName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.DefaultLanguage.Name)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.HelpdeskDBVersion)
                                </td>
                                <td>
                                    @DateTime.Now.ToLongTimeString()
                                </td>
                            </tr> 
                        }
                    </tbody>
                </table>
            </div>
            <div class="tab-pane tab-pane-border" id="fragment-2">
                <table class="table table-striped table-bordered table-hover" id="tblHoliday">
                    <thead>
                        <tr>
                            <th>
                                @Translation.GetCoreTextTranslation("Kalender")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.HolidayHeaders)
                        { 
                            <tr>
                                <td>
                                    <a href="@Url.Action("editholiday", "globalsetting", new { id = item.Value })">@item.Text</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                @*<div class="container">
                    <div class="row">
                        <div class="span8">
                            <table class="tableform" id="tblHoliday">
                                <tr>
                                    <td>
                                        @Translation.GetCoreTextTranslation("Kalender", Enums.TranslationSource.TextTranslation)
                                    </td>
                                    <td>
                                        @Html.DropDownListFor(model => model.HolidayHeader.Id, Model.HolidayHeaders, new { style = "width: auto;", id = "HolidayHeaderId", onchange = "changeHoliday(this.options[this.selectedIndex].value);" })
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
               <div class="container" id="holidays">
                   
                        @Html.Partial("_Holidays", Model)
                
                </div>*@
                
            </div>
            <div class="tab-pane tab-pane-border" id="fragment-3">
                <table class="table table-striped table-bordered table-hover" id="tblWatchDateCalendarValue">
                    <thead>
                        <tr>
                            <th>
                                @Translation.GetCoreTextTranslation("Kalender bevakningsdatum")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.WatchDateCalendars)
                        { 
                            <tr>
                                <td>
                                    <a href="@Url.Action("editwatchdate", "globalsetting", new { id = item.Value})">@item.Text</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            
            <div class="tab-pane tab-pane-border" id="fragment-4">

                <div class="container">
                    <div class="row">
                            <div>
                                <table class="tableform" id="tblText">
                                    <tr>
                                        <td style="width:50px">
                                            &nbsp;&nbsp;@Translation.GetCoreTextTranslation("Typ")
                                        </td>
                                        <td style="width:200px">
                                            @Html.DropDownListFor(model => model.TextType.Id, Model.TextTypes, new { style = "width: auto;", id = "TextTypeId", onchange = "changeTextType(this.options[this.selectedIndex].value);" })                                            
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(model => model.SearchTextTr, new { maxlength = "50"})
                                            @Html.DropDownListFor(model => model.SearchConditions, Model.SearchConditions, new { style = "width: auto;", id = "SearchId", onchange = "" })
                                            <input type="button" id="searchQueryBtn" onclick ="DoSearch();" value="@Translation.GetCoreTextTranslation("Sök")" class="btn" onclick="submit();" />
                                        </td>
                                    </tr>
                                </table>
                            </div>
                    </div>
                    <div id="translationList">
                        @Html.Partial("_TranslationsList", Model.GridModel) 
                    </div>
                </div>
            </div>

            <div class="tab-pane tab-pane-border" id="fragment-5">
                <div id="selfServiceError" class="alert alert-error alert-dismissable" style="display: none"></div>
                <table class="tableform">
                    <tbody>
                    <tr>
                        <td class="span4">@Translation.GetCoreTextTranslation("Visa alla kunder på Ärendeöversikten")</td>
                        <td>@Html.CheckBox("multiCustomersSearch", Model.GlobalSettings.FirstOrDefault().MultiCustomersSearch == 1, new {@class = "switchcheckbox"})</td>
                    </tr>
                    </tbody>
                </table>
            </div>
            
            @if (Model.DataPrivacy.IsAvailable)
            {
                <div class="tab-pane tab-pane-border" id="fragment-6">
                    <div class="tab-content">
                        <div class="container">
                            <div class="row">
                                <div class="span12">
                                    @using (Html.BeginForm(null, null, null, FormMethod.Post, new {id = "privacyForm", @action = "", texttypeid = 0, compareMethod = 1 }))
                                    {
                                        <table class="tableform" id="privacyForm">
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Select Favorite")
                                                </td>
                                                <td class="span9">
                                                    @Html.DropDownListFor(m => m.DataPrivacy.SelectedFavoriteId, Model.DataPrivacy.Favorites, new { id = "favoritesSelect" })
                                                    <i id="favoritesLoader" class="gif-loader" style="display:none">&nbsp;</i>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Kund")<span class="mandatorystar"> * </span>
                                                </td>
                                                <td class="span9">
                                                    @Html.DropDownListFor(m => m.DataPrivacy.SelectedCustomerId, Model.DataPrivacy.Customers, string.Empty, new {id = "customerSelect"})
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Retention period")
                                                </td>
                                                <td class="span9">
                                                    @Html.TextBoxFor(m => m.DataPrivacy.RetentionPeriod, new { id = "retentionPeriod", width = "100px" })
                                                    @Translation.GetCoreTextTranslation("days")
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                </td>
                                                <td class="span9">
                                                    @Html.CheckBoxFor(m => m.DataPrivacy.CalculateRegistrationDate) @Translation.GetCoreTextTranslation("Calculate Registration date (To)")
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Registreringsdatum")<span class="mandatorystar"> * </span>
                                                </td>
                                                <td class="span9">
                                                    @Html.EditorFor(m => m.DataPrivacy.RegisterDateFrom, "DatePicker", new {id = "regCaseFrom"})
                                                    @Html.EditorFor(m => m.DataPrivacy.RegisterDateTo, "DatePicker", new {id = "regCaseTo"})
                                                    <div id="datesErrorLabel"></div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Status")
                                                </td>
                                                <td class="span9">
                                                    @Html.CheckBoxFor(m => m.DataPrivacy.ClosedOnly) @Translation.GetCoreTextTranslation("Endast avslutade ärenden")
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Fält")<span class="mandatorystar"> * </span>
                                                </td>
                                                <td class="span9">
                                                    @Html.DropDownListFor(m => m.DataPrivacy.FieldsNames, Model.DataPrivacy.Fields,
                                                        new
                                                        {
                                                            id = "lstFilterFields",
                                                            multiple = "multiple",
                                                            @class = "chosen-select",
                                                            placeholder = Translation.GetCoreTextTranslation("Välj en eller flera"),
                                                            style = "width: 300px"
                                                        })
                                                    <i id="fieldsLoader" class="gif-loader" style="display:none">&nbsp;</i>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Ersätt data med")
                                                </td>
                                                <td class="span9">
                                                    @Html.EditorFor(m => m.DataPrivacy.ReplaceDataWith)
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Ersätt datum med")
                                                </td>
                                                <td class="span9">
                                                    @Html.EditorFor(m => m.DataPrivacy.ReplaceDatesWith, "DatePicker", new {id = "replacedDate"})
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Bifogade filer")
                                                </td>
                                                <td class="span9">
                                                    @Html.CheckBoxFor(m => m.DataPrivacy.RemoveCaseAttachments) @Translation.GetCoreTextTranslation("Ta bort bifogade filer i ärenden")
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="span3">
                                                </td>
                                                <td class="span9">
                                                    @Html.CheckBoxFor(m => m.DataPrivacy.RemoveLogAttachments) @Translation.GetCoreTextTranslation("Ta bort bifogade filer i ärendeloggen")
                                                </td>
                                            </tr>
                                            <!-- TO BE REMOVED (seperate tab) -->
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("Ärendehistorik")
                                                </td>
                                                <td class="span9">
                                                    @Html.CheckBoxFor(m => m.DataPrivacy.RemoveCaseHistory) @Translation.GetCoreTextTranslation("Ta bort") @Translation.GetCoreTextTranslation("Ärendehistorik")
                                                </td>
                                            </tr>
                                            <!-- /TO BE REMOVED -->
                                            <tr>
                                                <td class="span3">
                                                    @Translation.GetCoreTextTranslation("New/Edit Favorite")
                                                </td>
                                                <td class="span9">
                                                    <button class="btn btn-small" id="btnFavorite" type="button">
                                                        <i class="icon-star"></i> @Translation.GetCoreTextTranslation("Favorite")
                                                    </button>
                                                    <i id="saveFavoritesLoader" class="gif-loader" style="display:none">&nbsp;</i>
                                                </td>
                                            </tr>
                                        </table>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div> 
            }

            <input type="hidden" name="activeTab" id="activeTab" value="@SessionFacade.ActiveTab" />
        </div>

    </div>
</div>

<div id="favoritesSaveModal" role="dialog" class="modal hide fade" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        <strong><span id="fm_header">Save </span></strong>
    </div>
    <div class="modal-body">
        <p id="fm_body"></p>
        <div>
            <input type="text" id="fm_name" />
        </div>
    </div>
    <div class="modal-footer">
        <button id="btnSaveFav" class="btn" data-dismiss="modal" aria-hidden="true">@Translation.GetCoreTextTranslation("Save")</button>
        <button id="btnDeleteFav" class="btn" data-dismiss="modal" aria-hidden="true">@Translation.GetCoreTextTranslation("Delete")</button>
        <button class="btn" data-dismiss="modal" aria-hidden="true">@Translation.GetCoreTextTranslation("Avbryt")</button>
    </div>
</div>

@section Scripts {
<script type="text/javascript">

    var confirmationDialog = {
        showConfirmation: function(text, onOk, onCancel) {
            var d = $('<div class="modal fade">' +
                '<div class="modal-dialog">' +
                '<form method="post" id="deleteDialogForm" class="modal-content">' +
                '<div class="modal-body">' +
                '<button type="button" class="close" data-dismiss="modal">&times;</button>' +
                '<p class="alert alert-info infop">' +
                text +
                '</p>' +
                '</div>' +
                '<div class="modal-footer">' +
                '<button type="button" class="btn btn-ok">' +
                '@Translation.GetCoreTextTranslation("Ja")' +
                '</button>' +
                '<button type="button" class="btn btn-cancel">' +
                '@Translation.GetCoreTextTranslation("Nej")' +
                '</button>' +
                '</div>' +
                '</form>' +
                '</div>' +
                '</div>');

            d.on("show",
                function() {
                    d.find(".btn-cancel").on("click",
                        function(e) {
                            onCancel();
                            d.modal('hide');
                        });

                    d.find(".btn-ok").on("click",
                        function(e) {
                            onOk();
                            d.modal('hide');
                        });
                });

            d.on("hide",
                function() {
                    d.find(".btn-ok").off("click");
                    d.find(".btn-cancel").off("click");
                });

            d.on("hidden",
                function() {
                    d.remove();
                });

            d.modal({
                "backdrop": "static",
                "keyboard": true,
                "show": true
            });
        }
    };

    $(function() {

        var dataPrivacyForm =
        (function() {
            var _self = this;

            // constants and Ids
            this.loaders = {
                fieldsLoader: $('#fieldsLoader'),
                favoritesLoader: $('#favoritesLoader'),
                inProcessLoader: $('#inProcessLoader'),
                saveFavoritesLoader: $('#saveFavoritesLoader')
            };

            this.emptyFavSelectText = "Create New"; //todo: translate

            //form and fields
            this.form$ = $("#privacyForm");
            this.validator$ = {}
            this.customerSelect$ = $("#customerSelect");
            this.favoritesSelect$ = $("#favoritesSelect");
            this.registerDateFrom$ = $("#DataPrivacy_RegisterDateFrom");
            this.registerDateTo$ = $("#DataPrivacy_RegisterDateTo");
            this.filterFields$ = $("#lstFilterFields");
            this.inProcessLoader$ = $("#inProcessLoader");

            //buttons
            this.btnFavorite$ = $("#btnFavorite");
            this.privacyRunBtn$ = $("#privacyRunBtn");

            //private functions:

            this.formFieldsState = {
                btnFavorite: true,
                privacyRunBtn: true,
                favoritesSelect: true,
                customerSelect: true,
                lstFilterFields: true
            };
            
            this.blockUI = function (block, loaderEl) {
                var self = this;

                if (loaderEl) {
                    self.showControl(loaderEl, block);
                }

                this.setFormFieldsState(!block);

                if (!block) {
                    //hide all loaders
                    for(var loader in this.loaders) {
                        if (this.loaders.hasOwnProperty(loader))
                            this.loaders[loader].hide();
                     }
                }
            };

            this.saveControlsState = function () {
                for (var controlId in this.formFieldsState) {
                    if (this.formFieldsState.hasOwnProperty(controlId)) {
                        var ctrl$ = $('#' + controlId);
                        if (ctrl$.length) {
                            this.formFieldsState[controlId] = this.isEnabled(ctrl$);
                        }
                    }
                }
            }

            this.restoreControlsState = function () {
                for (var controlId in this.formFieldsState) {
                    if (this.formFieldsState.hasOwnProperty(controlId)) {
                        var ctrl$ = $('#' + controlId);
                        if (ctrl$.length) {
                            var prevState = this.formFieldsState[controlId];
                            this.enableControl(ctrl$, prevState);
                        }
                    }
                }
            }

            this.setFormFieldsState = function (enable) {
                if (enable) {
                    this.restoreControlsState();
                } else {

                    // save cur state
                    this.saveControlsState();

                    //disable controls
                    for (var controlId in this.formFieldsState) {
                        if (this.formFieldsState.hasOwnProperty(controlId)) {
                            var ctrl$ = $('#' + controlId);
                            if (ctrl$.length) {
                                this.enableControl(ctrl$, false);
                            }
                        }
                    }
                }
            }

            this.getFilterData = function() {
                var fields = [];
                this.filterFields$.find("option:selected").each(function() {
                    fields.push($(this).val());
                });
                return {
                    fields: fields,
                    selectedCustomerId: this.customerSelect$.val(),
                    retentionPeriod: $("#retentionPeriod").val() || "0", //todo: check
                    registerDateFrom: this.registerDateFrom$.val(),
                    calculateRegistrationDate: $("#DataPrivacy_CalculateRegistrationDate").prop("checked"),
                    registerDateTo: this.registerDateTo$.val(),
                    closedOnly: $("#DataPrivacy_ClosedOnly").prop("checked"),
                    replaceDataWith: $("#DataPrivacy_ReplaceDataWith").val(),
                    replaceDatesWith: $("#DataPrivacy_ReplaceDatesWith").val(),
                    removeCaseAttachments: $("#DataPrivacy_RemoveCaseAttachments").prop("checked"),
                    removeLogAttachments: $("#DataPrivacy_RemoveLogAttachments").prop("checked"),
                    removeCaseHistory: $("#DataPrivacy_RemoveCaseHistory").prop("checked")
                };
            };

            this.setupValidation = function() {
                var self = this;
                var caseFieldsDropDown = "lstFilterFields";

                this.validator$ = this.form$.validate({
                    ignore: '*:not([name])',
                    //debug: true,
                    rules: self.getRules(),
                    errorPlacement: function(error, element) {
                        if (element.is("#DataPrivacy_RegisterDateFrom") ||
                            element.is("#DataPrivacy_RegisterDateTo")) {
                            $("#datesErrorLabel").html(error);
                        } else {
                            if (element.is("select.chosen-select")) {
                                error.insertAfter($("#fieldsLoader"));
                                error.css("width", "315px");
                                $("#" + element.attr("id") + "_chosen").addClass("error");
                            } else {
                                error.insertAfter(element);
                            }
                        }
                    },
                    highlight: function(element) {
                        if (element.id === caseFieldsDropDown) {
                            $("#" + element.id + "_chosen").removeClass('error success').addClass('error');
                        } else {
                            $(element).removeClass('error success').addClass('error');
                        }
                    },
                    success: function(label) {
                        if (label.attr("for") === caseFieldsDropDown) {
                            $("#" + label.attr("for") + "_chosen").removeClass("error");
                        }
                    },

                    messages: {
                        "DataPrivacy.SelectedCustomerId": {
                            required: "@Translation.GetForJS("Kund") @Translation.GetForJS("måste anges")"
                        },
                        "DataPrivacy.FieldsNames": {
                            required: "@Translation.GetForJS("Fält") @Translation.GetForJS("måste anges")"
                        },
                        "DataPrivacy.RegisterDateFrom": {
                            required:
                                "@Translation.GetForJS("Registreringsdatum") @Translation.GetForJS("måste anges")"
                        },
                        "DataPrivacy.RegisterDateTo": {
                            required:
                                "@Translation.GetForJS("Registreringsdatum") @Translation.GetForJS("måste anges")"
                        }
                    }
                });

                //workaround to trigger validation for date time and choose controls
                [this.registerDateFrom$, this.registerDateTo$].forEach(function(e) {
                    e.on('change', function() {
                        $(this).valid();
                        self.onValidationChanged();
                    });
                });

                this.form$.find(".chosen-select").chosen().change(function() {
                    $(this).valid();
                    self.onValidationChanged();
                });
            };


            this.getRules = function () {
                return {
                    "DataPrivacy.SelectedCustomerId": {
                        required: true
                    },
                    "DataPrivacy.FieldsNames": {
                        required: true
                    },
                    "DataPrivacy.RegisterDateFrom": {
                        required: true
                    },
                    "DataPrivacy.RegisterDateTo": {
                        required: true
                    }
                };
            };

            this.onValidationChanged = function () {
                if (this.validator$) {
                    var numberOfInvalids = this.validator$.numberOfInvalids();

                    var selectedFavId = this.getSelectedFavoriteId();
                    if (selectedFavId > 0) {
                        this.enableControl(this.btnFavorite$, numberOfInvalids === 0);    
                    }
                }
            }

            this.loadCustomerFields = function(id) {
                var self = this;
                this.blockUI(true, this.loaders.fieldsLoader);
                this.filterFields$.trigger("chosen:updated");

                $.ajax({
                        url: '@Url.Action("GetCustomerCaseFields")',
                        type: "POST",
                        data: { customerId: id },
                        dataType: "json"
                    })
                    .done(function(result) {
                        if (result.success) {
                            self.filterFields$.empty();
                            $.each(result.data,
                                function(idx, obj) {
                                    self.filterFields$.append(
                                        '<option value="' + obj.Value + '">' + obj.Text + '</option>');
                                });
                            self.filterFields$.trigger("chosen:updated");
                        }
                    })
                    .done(function () {
                        self.blockUI(false);
                        self.filterFields$.trigger("chosen:updated");
                    });
            }

            this.runDataPrivacy = function() {
                    var self = this;
                    var isValid = this.form$.valid();
                    if (isValid) {
                        confirmationDialog.showConfirmation(
                            '@Translation.GetForJS("Är du säker på att du vill ersätta informationen i utvalda ärenden?")',
                            function() {
                                self.execDataPrivacyRequest();
                            },
                            function() {
                            });
                    }
            },

            this.execDataPrivacyRequest = function() {

                this.blockUI(true, this.loaders.inProcessLoader);

                var filter = this.getFilterData();

                var inputData = {
                    SelectedCustomerId: filter.selectedCustomerId,
                    CalculateRegistrationDate: filter.calculateRegistrationDate,
                    RegisterDateFrom: filter.registerDateFrom,
                    RegisterDateTo: filter.registerDateTo,
                    ClosedOnly: filter.closedOnly,
                    FieldsNames: filter.fields,
                    ReplaceDataWith: filter.replaceDataWith,
                    ReplaceDatesWith: filter.replaceDatesWith,
                    RemoveCaseAttachments: filter.removeCaseAttachments,
                    RemoveLogAttachments: filter.removeLogAttachments,
                    RemoveCaseHistory: filter.removeCaseHistory
                };

                $.ajax({
                    url: '@Url.Action("DataPrivacy")',
                    type: "POST",
                    data: $.param(inputData), //todo: check
                    dataType: "json"
                }).done(function(result) {
                    if (result.success) {
                        window.ShowToastMessage('@Translation.GetForJS("Klar")', "success");
                    }//todo: handle erorr?
                }).always(function() {
                    self.blockUI(false);
                });
            };

            this.onFavoritesChanged = function() {
                var favoriteId = this.getSelectedFavoriteId();
                if (favoriteId > 0) {
                    this.form$.valid();
                    this.onValidationChanged();
                    this.loadFavoriteFields(favoriteId);
                } else {
                    //todo: reset validation errors if New is selected?
                    this.enableControl(this.btnFavorite$, true);
                }
            }

            this.loadFavoriteFields = function(favId) {
                //block UI
                //TODO: 1. Implement loading favorites data into form!!!


                //TODO: 2. set locks (icons) on controls
            };
            
            this.addUpdateFavorites = function(name) {
                var self = this;

                if (this.form$.valid()) {

                    var favoriteId = this.getSelectedFavoriteId();
                    var filter = this.getFilterData();

                    var inputData = {
                        Id: favoriteId,
                        Name: name || '',
                        CustomerId: filter.selectedCustomerId,
                        RetentionPeriod: filter.retentionPeriod,
                        CalculateRegistrationDate: filter.calculateRegistrationDate,
                        RegisterDateFrom: filter.registerDateFrom,
                        RegisterDateTo: filter.registerDateTo,
                        ClosedOnly: filter.closedOnly,
                        FieldsNames: filter.fields,
                        ReplaceDataWith: filter.replaceDataWith,
                        ReplaceDatesWith: filter.replaceDatesWith,
                        RemoveCaseAttachments: filter.removeCaseAttachments,
                        RemoveLogAttachments: filter.removeLogAttachments,
                        RemoveCaseHistory: filter.removeCaseHistory
                    };

                    this.blockUI(true, this.loaders.favoritesLoader);

                    var isNew = (+inputData.Id) > 0;
                    $.ajax({
                        url: '@Url.Action("SaveFavorites")',
                        type: "POST",
                        data: JSON.stringify(inputData),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    }).done(function(res) {
                        if (res.Success) {
                            window.ShowToastMessage('@Translation.GetForJS("Klar")', "success"); //todo: check message
                            self.populateFavorites(res.FavoriteId, res.Favorites, isNew);
                        } else {
                            var err = res.Error || 'Unknown error';
                            window.ShowToastMessage(err, "error");
                        }
                    }).always(function() {
                        self.blockUI(false);
                    });
                }
            };

            this.populateFavorites = function(selectedId, items, triggerChange) {
                var self = this;

                //build options
                var options = items.map(function(item) {
                    return '<option value="' + item.value + '">' + item.text + '</option>';
                });
                options = '<option value="0">' + self.emptyFavSelectText + '</option>' + options;

                self.favoritesSelect$.html(options);
                self.favoritesSelect$.val(selectedId);
                if (triggerChange)
                    self.favoritesSelect$.change();
            };

            this.getSelectedFavoriteId = function() {
                var val = this.favoritesSelect$.val();
                var favoriteId = val ? parseInt(val, 10) : 0;
                if (!isNaN(favoriteId) && favoriteId > 0)
                    return favoriteId;
                else
                    return 0;
            }

            //todo: move to other class 
            this.showSaveFavoritesDlg = function(saveNew) {
                var headerTitle$ = $("#fm_header");
                var bodyDesc$ = $("#fm_body");
                var nameField$ = $("#fm_name");

                //todo: Translate and star icon in the title!
                if (saveNew) {
                    headerTitle$.html('New Favorite');
                    bodyDesc$.html('Enter a name for your new favorite.');
                    nameField$.val('');
                    $("#btnSaveFav").prop('disabled', true);
                } else {
                    //todo: set required buttons and labels for update
                    var selectedFav = _self.favoritesSelect$.find(":selected").text() || '';
                    headerTitle$.html('Update favorite - ' + selectedFav);
                    bodyDesc$.html('Update your favorite or change the name to save it as a new favorite.');
                    nameField$.val(selectedFav);
                    $("#btnSaveFav").prop('disabled', selectedFav.length == 0);
                }

                $("#favoritesSaveModal").modal('show');
            };

            this.enableControl = function (el, enable) {
                if (enable) {
                    el.prop('disabled', false);
                } else {
                    el.prop('disabled', true);
                }
            }

            this.showControl = function (el, show) {
                if (show) {
                    el.show();
                } else {
                    el.hide();
                }
            }

            this.isEnabled = function (el) {
                return !el.prop('disabled');
            };

            //public methods
            return {
                Init: function() {
                    
                    _self.setupValidation();

                    _self.favoritesSelect$.on('change',function() {
                         _self.onFavoritesChanged();
                    });

                    _self.customerSelect$.on('change', function() {
                        var customerId = $(this).val();
                        _self.loadCustomerFields(customerId);
                    });

                    _self.btnFavorite$.on("click", function(e) {
                        var favId = _self.getSelectedFavoriteId();
                        var isNew = favId === 0;
                        _self.showSaveFavoritesDlg(isNew);
                    });

                    //////////////////////////////////////////
                    //save dlg
                    $('#btnSaveFav').on("click",
                        function() {
                            var name = $("#fm_name").val();
                            _self.addUpdateFavorites(name);
                        });

                    $('#btnDeleteFav').on("click",
                        function() {
                            //todo: implement. show confirm?
                            //_self.deleteFavorites();
                        });

                    $("#fm_name").on("change paste keyup",
                        function() {
                            var val = $(this).val() || '';
                            $('#btnSaveFav').prop('disabled', val == '');
                        });
                    //////////////////////////////////////////

                    _self.privacyRunBtn$.on("click",
                        function(e) {
                            e.stopImmediatePropagation();
                            e.preventDefault();

                            _self.runDataPrivacy();
                        });
                }
            }
        })();

        dataPrivacyForm.Init();

        $('#SearchId').val(@ViewBag.SelectedSearchCondition);

        $("#multiCustomersSearch").on('switchChange.bootstrapSwitch',
            function() {

                $("#selfServiceError").text('').hide();

                var res = $(this).is(':checked');
                var data = {
                    val: res ? 'true' : 'false'
                };

                $.post('@Url.Action("UpdateMultiCustomersSearch", "GlobalSetting", new {Area = "Admin"})',
                    data,
                    function(response) {
                        if (!response.Success && response.ErrorMessage) {
                            $("#selfServiceError").text(response.ErrorMessage).show();
                        }
                    });
            });
        }); //end of jquery load

        var texttypeId = $("#TextTypeId").val();

        var activeTab = $('#activeTab').val();
        if (activeTab)
            $('#myTab a[href="' + activeTab + '"]').click(); //.tab('show')


        function changeTextType(id) {
            var list = $('#translationList');
            list.html('');
            if (id != '') {
                $.get('/GlobalSetting/ChangeTextType/' + id,
                    function(result) {
                        list.html($(result).html());
                    });
            }
        }

        function changeHoliday(id) {
            var list = $('#holidays');
            list.html('');
            if (id != '') {
                $.get('/GlobalSetting/ChangeHoliday/' + id,
                    function(result) {
                        list.html(result);
                    });
            }
        }

        function getCurTextType() {
            return $("#TextTypeId").val();
        }

        function toggleMenuItems(number) {
            $('ul.secnav > li').hide();
            var menuId = '#menu' + number;
            $(menuId).show();
        }

    </script>
}
@using DH.Helpdesk.Common.Enums
@model DH.Helpdesk.Web.Areas.Admin.Models.CustomerInputViewModel
@{
    var showCustomerUsers = SessionFacade.CurrentUser.UserGroupId == UserGroups.SystemAdministrator;
}
<h4>@Translation.Get("Allmänt")</h4>
<div class="formContainer">
    <table class="tableform" border="0">
        @if (Model.Customer.Id > 0)
        {
            <tr>
                <td class="span3">
                    @Translation.Get("Id")
                </td>
                <td>
                    @Html.DisplayTextFor(model => model.Customer.Id)
                </td>
            </tr>
        }
        <tr>
            <td class="span3">
                @Translation.Get("Kundnummer") <span>&nbsp;*</span>
            </td>
            @if (Model.Customer.Id > 0)
            {
                <td>
                    @Html.DisplayTextFor(model => model.Customer.CustomerID)
                </td>
            }
            else
            {
                <td>
                    @Html.TextBoxFor(model => model.Customer.CustomerID, new { maxlength = "20" })
                </td>
            }
        </tr>
        <tr>
            <td>
                @Translation.Get("Namn")<span>&nbsp;*</span>
            </td>
            <td>
                @Html.TextBoxFor(model => model.Customer.Name, new { maxlength = "50" })
            </td>
        </tr>
        <tr>
            <td>
                @Translation.Get("Adress")
            </td>
            <td>
                @Html.TextBoxFor(model => model.Customer.Address, new { maxlength = "50" })
            </td>
        </tr>
        <tr>
            <td>
                @Translation.Get("Postadress")
            </td>
            <td>
                @Html.TextBoxFor(model => model.Customer.PostalCode, new { maxlength = "8", style = "width: 60px;" })
                @Html.TextBoxFor(model => model.Customer.PostalAddress, new { maxlength = "30", style = "width: 222px;" })
            </td>
        </tr>
        <tr>
            <td>
                @Translation.Get("Telefon")
            </td>
            <td>
                @Html.TextBoxFor(model => model.Customer.Phone, new { maxlength = "20" })
            </td>
        </tr>
        <tr>
            <td>
                @Translation.Get("Språk")
            </td>
            <td>
                @Html.DropDownListFor(model => model.Customer.Language_Id, Model.Languages, "", new { })
            </td>
        </tr>
        <tr>
            <td>
                @Translation.Get("Aktiv")
            </td>
            <td>
                @Html.CheckBoxFor(model => model.Active)
            </td>
        </tr>
    </table>
</div>

<h4>@Translation.Get("Användare")</h4>

<div class="formContainer">
    <table id="customerUser" class="tableform" border="0">
        <tbody>
        @if (showCustomerUsers)
        {
        <tr>
            <td class="span1">
                @Translation.Get("Användare")
            </td>
            <td class="span5">
                @Translation.Get("Tillgängliga")
            </td>
            <td>
                @Translation.Get("Följande användare har rättighet till kunden")
            </td>
        </tr>
            <tr>
            <td></td>
            <td colspan="2">
                <table>
                    <tr>
                        <td>
                            <select id="UsAvailable" multiple="multiple" name="UsAvailable" style="width: 314px; height: 350px">
                                @foreach (var us in Model.AvUsMultiSelect.Items)
                                {
                                    var classType = us.IsActive ? "" : "style=color:lightgray;";
                                    <option @classType value="@us.Id"> @us.Value </option>
                                }
                            </select>
                            @* @Html.ListBox("UsAvailable", Model.UsAvailable, new { style = "width: 314px; height: 350px" })*@
                        </td>
                        <td>
                            <input type="button" value="&gt;" class="btn" id="addUs"/><br/>
                            <input type="button" value="&lt;" class="btn" id="removeUs"/>
                        </td>
                        <td>
                            <select id="UsSelected" multiple="multiple" name="UsSelected" style="width: 314px; height: 350px">
                                @foreach (var us in Model.UsMultiSelect.Items)
                                {
                                    var classType = us.IsActive ? "" : "style=color:lightgray;";
                                    <option @classType value="@us.Id"> @us.Value </option>
                                }
                            </select>
                            @*@Html.ListBox("UsSelected", Model.UsSelected, new { style = "width: 314px; height: 350px" })*@
                        </td>
                    </tr>
                </table>

            </td>
        </tr>
        }
        <tr>
            <td style="width: 220px">
                @Translation.Get("Användaren är förvald som handläggare på nya externa ärenden")<br/>
            </td>
            <td colspan="2">
                <select data-val="true" data-val-number="The field DefaultAdministratorExternal must be a number." id="Setting_DefaultAdministratorExternal" name="Setting.DefaultAdministratorExternal">
                    <option value=""> </option>
                    @foreach (var us in Model.UsMultiSelect.Items)
                    {
                        var classType = us.IsActive ? "" : "style=color:lightgray;";
                        <option @classType value="@us.Id" @us.Id.ValueIsSelected(Model.Setting.DefaultAdministratorExternal.ToString())> @us.Value </option>
                    }
                </select>
                @*@Html.DropDownListFor(model => model.Setting.DefaultAdministratorExternal, Model.UsSelected, "", new { })*@
            </td>
        </tr>
        <tr>
            <td style="width: 220px">
                @Translation.Get("Användaren är förvald som handläggare på nya ärenden")
            </td>
            <td colspan="2">
                <select data-val="true" data-val-number="The field DefaultAdministrator must be a number." id="Setting_DefaultAdministrator" name="Setting.DefaultAdministrator">
                    <option value=""> </option>
                    @foreach (var us in Model.UsMultiSelect.Items)
                    {
                        var classType = us.IsActive ? "" : "style=color:lightgray;";
                        <option @classType value="@us.Id" @us.Id.ValueIsSelected(Model.Setting.DefaultAdministrator.ToString())> @us.Value </option>
                    }
                </select>
                @*@Html.DropDownListFor(model => model.Setting.DefaultAdministrator, Model.UsSelected, "", new { })*@
            </td>
        </tr>
        <tr>
            <td style="width: 220px">
                @Translation.Get("Lista användaren")
            </td>
            <td colspan="2">
                @Html.DropDownListFor(m => m.UserFirstLastNameRepresentationId, Model.UserFirstLastNameRepresentationList)
            </td>
        </tr>
        </tbody>
    </table>

</div>
<h4>@Translation.Get("Beställning")</h4>
<div class="formContainer">
    <table class="tableform">
        <tr>
            <td class="span3">
                @Translation.Get("Skapa ärende")
            </td>
            <td>
                <input type="checkbox" name="setting.CreateCaseFromOrder" @(Model.Setting.CreateCaseFromOrder == 1 ? "checked=checked" : "") value="1" />
                <input type="hidden" name="setting.CreateCaseFromOrder" value="0" />
                &nbsp; @Translation.Get("skapa alltid ärende när beställning görs")
            </td>
        </tr>
        <tr>
            <td>
                @Translation.Get("Beställare")
            </td>
            <td>
                <input type="radio" name="OrderPermission" @(Model.OrderPermission == 0 ? "checked='checked'" : "") id="Customer_OrderPermission1" value="0" />
                @Translation.Get("Inga restriktioner på vem som får anges som beställare")
                <br />
                <input type="radio" name="OrderPermission" @(Model.OrderPermission == 1 ? "checked='checked'" : "") id="Customer_OrderPermission2" value="1" />
                @Translation.Get("Tillåt endast godkända beställare")
            </td>
        </tr>
    </table>
</div>
<h4>@Translation.Get("E-post") @Translation.Get("Inställningar")</h4>
<div class="formContainer">
    <table class="tableform">
        <tr>
            <td>
                @Translation.Get("Batch e-post")
            </td>
            <td>
                @Html.CheckBoxFor(model => model.Setting.BatchEmail)
            </td>
        </tr>
        <tr>
            <td>
                @Translation.Get("Informera anmälaren som standard")?
            </td>
            <td>
                @Html.DropDownListFor(model => model.Customer.CommunicateWithNotifier, Model.CWNSelect)
            </td>
        </tr>
        <tr>
            <td>
                @Translation.Get("Informera HandläggareX som standard")?
            </td>
            <td>
                @Html.DropDownListFor(model => model.Customer.CommunicateWithPerformer, Model.CWPSelect)
            </td>
        </tr>
        <tr>
            <td class="span3">
                @Translation.Get("Helpdesk e-post")
            </td>
            <td>
                @Html.TextBoxFor(model => model.Customer.HelpdeskEmail, new { maxlength = "100", style = "width: 600px;" })
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top">
                @Translation.Get("Statistik")
            </td>
            <td>
                @Translation.Get("Skicka ärendestatistik till följande e-post adresser")<br />
                @Translation.Get("Separera adresser med semikolon") (;)<br />
                @Html.TextAreaFor(model => model.Customer.CaseStatisticsEmailList, new { style = "width: 600px; height: 65px;", maxlength = "500" })
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top">
                @Translation.Get("Dagrapport e-post")
            </td>
            <td>
                @Translation.Get("Skicka dagrapport till följande e-post adresser")<br />
                @Translation.Get("Separera adresser med semikolon") (;)<br />
                @Html.TextAreaFor(model => model.Customer.DailyReportEmail, new { style = "width: 600px; height: 65px;", maxlength = "500" })
            </td>
            <td></td>
        </tr>
        <tr>
            <td style="vertical-align: top">
                @Translation.Get("Nytt ärende")
            </td>
            <td>
                @Translation.Get("Skicka e-post till följande e-post adresser när nytt ärende registreras")<br />
                @Translation.Get("Separera adresser med semikolon") (;)<br />
                @Html.TextAreaFor(model => model.Customer.NewCaseEmailList, new { style = "width: 600px; height: 65px;", maxlength = "500" })
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top">
                @Translation.Get("Avslutat ärende")
            </td>
            <td>
                @Translation.Get("Skicka e-post till följande e-post adresser när ett ärende avslutas")<br />
                @Translation.Get("Separera adresser med semikolon") (;)<br />
                @Html.TextAreaFor(model => model.Customer.CloseCaseEmailList, new { style = "width: 600px; height: 65px;", maxlength = "500" })
            </td>
        </tr>
        <tr>
            <td style="vertical-align: top">
                @Translation.Get("Ansvarig")
            </td>
            <td>
                @Translation.Get("Skicka e-post till följande e-postadresser om ärenden inte åtgärdas eller prioriteras inom")
                &nbsp; @Html.TextBoxFor(model => model.Customer.ResponsibleReminderControlTime, new { style = "width: 30px;" })
                &nbsp; @Translation.Get("timmar")<br />
                @Html.TextAreaFor(model => model.Customer.ResponsibleReminderEmailList, new { style = "width: 600px; height: 65px;", maxlength = "400" })
            </td>
        </tr>
    </table>

</div>

<h4>@Translation.Get("Tidsinställningar")</h4>
<div class="formContainer">
    <table class="tableform">
        <tr>
            <td class="span3">
                @Translation.Get("Arbetstid")
            </td>
            <td>
                @Html.TextBoxFor(model => model.Customer.WorkingDayStart, new { style = "width: 40px;" }) @Translation.Get("-") @Html.TextBoxFor(model => model.Customer.WorkingDayEnd, new { style = "width: 40px;" })
            </td>
        </tr>
        <tr>
            <td class="span3">
                @Translation.Get("Tidszon")
            </td>
            <td>
                @Html.DropDownListFor(model => model.Customer.TimeZoneId, Model.TimeZones, new { style = "width: 600px;" })
            </td>
        </tr>
        <tr>
            <td class="span3" style="vertical-align: middle">
                @Translation.Get("Löst i tid med Bevakningsdatum")
            </td>
            <td>
                <input type="radio" name="Setting.CalcSolvedInTimeByLatestSLADate" @(Model.Setting.CalcSolvedInTimeByLatestSLADate == 0 ? "checked='checked'" : "") id="Customer_Setting_CalcSolvedInTimeByLatestSLADate1" value="0" />
                @Translation.Get("Avslutsdatum")
                <br />
                <input type="radio" name="Setting.CalcSolvedInTimeByLatestSLADate" @(Model.Setting.CalcSolvedInTimeByLatestSLADate == 1 ? "checked='checked'" : "") id="Customer_Setting_CalcSolvedInTimeByLatestSLADate2" value="1" />
                @Translation.Get("Senaste understatus med Räkna tid")
            </td>
        </tr>
    </table>
</div>
@Html.HiddenFor(model => model.Setting.MinRegWorkingTime)
@Html.HiddenFor(model => model.Setting.CreateComputerFromOrder)
<script type="text/javascript">

    var validator = $("#target").validate({
        ignore: "",
        rules: {
            "Customer.CustomerID": {
                required: true
            },
            "Customer.Name": {
                required: true
            },
            "Customer.WorkingDayStart": {
                range: [0, 24]
            },
            "Customer.WorkingDayEnd": {
                range: [0, 24]
            }
        },
        messages: {
            "Customer.CustomerID": {
                required: "@Translation.GetForJS("Kundnummer")" + " " + "@Translation.GetForJS("måste anges")"
            },
            "Customer.Name": {
                required: "@Translation.GetForJS("Namn")" + " " + "@Translation.GetForJS("måste anges")"
            },
            "Customer.WorkingDayStart": {
                range: "@Translation.GetForJS("Var vänlig ange tid i siffror mellan 0-24 (i.e 8-17)")"
            },
            "Customer.WorkingDayEnd": {
                range: "@Translation.GetForJS("Var vänlig ange tid i siffror mellan 0-24 (i.e 8-17)")"
            }
        },
        submitHandler: function (form) {
            form.submit();
        }
    });
@if(showCustomerUsers) {
    <text>
    $("#addUs").click(function () {
        $("#UsAvailable option:selected").remove().appendTo("#UsSelected");
        $("#UsAvailable").get(0).selectedIndex = -1;
        $("#UsSelected").get(0).selectedIndex = -1;
        return false;
    });

    $("#removeUs").click(function () {
        $("#UsSelected option:selected").remove().appendTo("#UsAvailable");
        $("#UsAvailable").get(0).selectedIndex = -1;
        $("#UsSelected").get(0).selectedIndex = -1;
        return false;
    });
    </text>
}

</script>

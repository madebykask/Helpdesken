@using DH.Helpdesk.Web
@model DH.Helpdesk.BusinessData.Models.ExtendedCase.ExtendedFormViewModels
@{
    var currentLang = Model.ActiveLanguages.FirstOrDefault(c => c.Id == SessionFacade.CurrentLanguageId);
    var defaultLang = Model.ActiveLanguages.FirstOrDefault();
}

@Scripts.Render(BundleConfig.ScriptNames.ConfirmationDialog)
<link href="~/Content/css/summernote.css" rel="stylesheet" />
<link href="~/Content/css/font-awesome.min.css" rel="stylesheet" />
<link href="~/Content/css/bootstrap.css" rel="stylesheet" />
<link href="~/Areas/Admin/Content/css/extendedcase-editor.css" rel="stylesheet" />
<script src="~/Content/summernote-0.8.18/summernote.js"></script>
<style>
    span[contenteditable]:empty:focus::before,
    span[contenteditable]:empty::before {
        content: '@Translation.GetCoreTextTranslation("Fliknamn")';
        opacity: 0.5;
    }
</style>

<div class="secnavs fixed">
    <div class="pull-left">
        <ul class="secnav">
            <li class="extendedCaseFormsLst"><input type="button" id="btnSubmit" class="btn" value=@Translation.GetCoreTextTranslation("Spara")></li>
            <li class="extendedCaseFormsLst"><input type="button" class="btn" value="@Translation.GetCoreTextTranslation("Avbryt")" id="btnCancel"></li>
        </ul>
    </div>
</div>
<div class="content">
    <div class="container">
        <ul class="nav nav-tabs" id="myTab">
            <li class="active extendedCaseFormsLst" style="margin-left:0px"><a href="#subfragment-1">@Translation.GetCoreTextTranslation("Editerbara formulär") - @Model.Customer.Name</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane tab-pane-border active" id="fragment1">
                <div class="container">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th colspan="2">
                                    @Translation.GetCoreTextTranslation("Allmänt")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="general-fields">
                                    @Translation.GetCoreTextTranslation("Beskrivning")
                                </td>
                                <td>
                                    <input id="formDescription" class="txtInput" type="text" value='@(Model.ExtendedCaseForm == null ? "" : Model.ExtendedCaseForm.Description)' maxlength="500" />
                                </td>
                            </tr>
                            <tr>
                                <td class="general-fields">
                                    @Translation.GetCoreTextTranslation("Ärendemallar")
                                </td>
                                <td>
                                    <select required id="drpCaseSolutions" class="chosen-select" multiple placeholder=@Translation.GetCoreTextTranslation("Välj en eller flera")>
                                        @foreach (var item in Model.CustomerCaseSolutions.OrderBy(c => c.Name))
                                        {
                                            <option value="@item.Id"
                                                    @((Model.ExtendedCaseForm == null ? "" : (Model.ExtendedCaseForm.CaseSolutions.Contains(item)) ? "selected " : " "))
                                                    @((Model.CustomerCaseSolutionsWithExtendedCaseForm == null ? "" : (Model.CustomerCaseSolutionsWithExtendedCaseForm.Contains(item)) ? "disabled" : ""))>
                                                @item.Name
                                            </option>
                                        }
                                    </select>
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <table class="table table-striped table-bordered table-hover">
                        <thead>
                            <tr>
                                <th style="border-right:none">
                                    @Translation.GetCoreTextTranslation("Formulär") editor
                                </th>
                                <th style="text-align:right; border-left:none">
                                    <select id="chosenLanguage" onchange="onChangeLanguage(this, [...translations])">
                                        <option selected value="@SessionFacade.CurrentLanguageId">
                                            @Translation.GetCoreTextTranslation(currentLang.Name) (@currentLang.LanguageId) @(currentLang.Id == defaultLang.Id ? " *" : "")
                                        </option>
                                        @foreach (var l in Model.ActiveLanguages.Where(c => c.Id != SessionFacade.CurrentLanguageId).OrderBy(c => c.Name))
                                        {
                                            <option id="optSelectedFormLang" @(l.Id == defaultLang.Id ? "class=required-defaultLng" : "") value="@l.Id">@Translation.GetCoreTextTranslation(l.Name) (@l.LanguageId) @(l.Id == defaultLang.Id ? " *" : "")</option>
                                        }
                                    </select>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="2" class="editor-cols">
                                    <div id="fields" class="dragndrop">
                                        <ul id="source">
                                            <li class="extendedCaseFormsLst" data-type="section"><i class="fa fa-header" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Sektion")</li>
                                            <li class="extendedCaseFormsLst" data-type="textbox"><i class="fa fa-font" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Textfält")</li>
                                            <li class="extendedCaseFormsLst" data-type="textarea"><i class="fa fa-text-width" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Textarea")</li>
                                            <li class="extendedCaseFormsLst" data-type="date"><i class="fa fa-calendar-o" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Datumfält")</li>
                                            <li class="extendedCaseFormsLst" data-type="fileupload"><i class="fa fa-upload" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Filuppladdning")</li>
                                            <li class="extendedCaseFormsLst" data-type="html"><i class="fa fa-file-word-o" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Infofält")</li>
                                            <li class="extendedCaseFormsLst" data-type="radio"><i class="fa fa-dot-circle-o" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Radioknapp")</li>
                                            <li class="extendedCaseFormsLst" data-type="checkbox-list"><i class="fa fa-check-square" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Kryssruta")</li>
                                            <li class="extendedCaseFormsLst" data-type="dropdown"><i class="fa fa-chevron-circle-down" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Rullgardinsmeny")</li>
                                        </ul>
                                        <input id="btnClear" class="btn" type="button" value='@Translation.GetCoreTextTranslation("Rensa")' />
                                    </div>

                                    <ul id="formtabs" class="field" style="background-color:inherit">
                                        <li class="formtabs-li"><span id="formtab-editheaderName" tabindex=0 role="textbox" contenteditable="false"></span><a id="tab-edit" class='fa fa-pencil' data-toggle='collapse' role='button' title='Edit' href='#formtab-edit' aria-hidden='true'></a></li>
                                    </ul>

                                    <ul id="dropzone" class="dragndrop"></ul>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    //Initialize global variables
    const defaultLanguage = {
        Id : @defaultLang.Id,
        LanguageId : '@defaultLang.LanguageId'
    };
    const currentLanguageId = @SessionFacade.CurrentLanguageId;

    let SELECTEDTRANSLATIONLANGUAGEID = currentLanguageId;

    const droppedItemClass = "dropped-item";
    const extendedCaseFormInCases = '@Model.ExtendedCaseFormInCases';
    var translations = {}


    //Ready method
    $(document).ready(function () {

        //Initialization of lacal variables
        var activeLanguages = {}
        activeLanguages = JSON.parse('@Html.Raw(Json.Encode(Model.ActiveLanguages))');

        translations = JSON.parse('@Html.Raw(Json.Encode(Model.FieldTranslations))');
        const IDNAME = "firstSectionId";
        let draggedFrom = "";
        let draggedItem;

        //Set Tab title
        $('#formtab-editheaderName')[0].innerHTML = '@Translation.GetCoreTextTranslation("Fliknamn")';


        // COMPONENTS
        let OptionListItemComponent = (idName, option, activeLanguage, controlType, savedId, optionsCount) => "<li " + (savedId != null ? "data-dhhelpdesk-savedId='" + option.id + "' data-dhhelpdesk-listId='" + option.id.split("_")[0].replace(/[^0-9]/gi, '') : " data-dhhelpdesk-listId='" + option.id) + "' data-dhhelpdesk-controlId='" + idName + "' data-dhhelpdesk-langId='" + activeLanguage.Id + "'>" + OptionInputComponent(idName, option, activeLanguage, controlType, optionsCount) + "</li>"

        let OptionInputComponent = (idName, option, activeLanguage, controlType, optionsCount) => {
            let isDefaultLanguage = activeLanguage.Id == defaultLanguage.Id;
            let translation = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(option.name))
                && t.Language.Id == activeLanguage.Id && t.Prefix == "DataSource.Value");

            let defaultLanguageValue = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(option.name))
                && t.Language.Id == defaultLanguage.Id && t.Prefix == "DataSource.Value");

            let optionTranslation = translation[0].TranslationText + (translation[0].Name == "Val" ? (" " + option.id) : "");
            let optionDefaultLangTranslation = defaultLanguageValue[0].TranslationText + (defaultLanguageValue[0].Name == "Val" ? (" " + option.id) : "");
            return "<div>" + (isDefaultLanguage ? "" : "<span class='spanDefaultOptionName'>" + " (" + defaultLanguage.LanguageId + ") </span>" + " <span class='spanDefaultOptionName' id='defaultOptionLabel_" + idName + "_Item_" + (option.listId != null ? option.listId : option.id) + "_Lang_" + activeLanguage.Id + "'>" + optionDefaultLangTranslation + "</span><br/>") + "</div><input class='labelName txtInput' type='text' id='" + idName + "label" + activeLanguage.Id + "' data-dhhelpdesk-isoption='true' data-dhhelpdesk-langId='" + activeLanguage.Id + "' data-dhhelpdesk-controlType='" + controlType + "' style='width:95%' type='text' value='" + (option.placeholderOnly ? "" : optionTranslation) + "' placeholder='" + optionTranslation + "'><span><a class='fa fa-trash fa-lg option' href='#' style='color:black; " + (optionsCount == 1 ? "display:none" : "") + "' aria-hidden='true'></a></span>";
        };

        let SelectionComponent = (idName, activeLanguage, isDefaultLanguage, options, controlType, savedId) => {
            let selectionCls = controlType == "checkbox-list" ? " checkboxlst" : (controlType == "radio" ? " radiolst" : "");
            let optionRows = (options) => {
                let res = "<tr class='table-light'><td style='width:100%'><ul class='selectOptions" + selectionCls + "' data-dhhelpdesk-controlId='" + idName + "' data-dhhelpdesk-langId='" + activeLanguage.Id + "'>";
                for (let o = 0; o < options.length; o++) {

                    res = res + OptionListItemComponent(idName, options[o], activeLanguage, controlType, savedId, options.length);
                }
                res = res + "</ul></td></tr>";

                return res;
            };

            return "<tr class='trTransField' data-dhhelpdesk-labelId='" + idName + "' data-dhhelpdesk-options='true' data-dhhelpdesk-langId='" + activeLanguage.Id + "'" + (activeLanguage.Id == document.getElementById("chosenLanguage").value ? "" : "style='display:none'") + "><td class='transField'>" + (isDefaultLanguage ? "" : "<br/>") + "<label><span>@Translation.GetCoreTextTranslation("Val") " + activeLanguage.LanguageId + " </span>" + (isDefaultLanguage ? "<span class='required-defaultLng'>*</span>" : "") + "</label><td><table class='table table-borderless'><tbody>"
                + optionRows(options) + "</tbody></table></td></tr>";
        }

        let HeaderActionsComponent = (idName) =>
            "<div class='header-actions'><a class='fa fa-pencil fa-lg' data-toggle='collapse' href='#"
            + idName + "' role='button' title='Edit' aria-hidden='true'></a><a class='fa fa-trash fa-lg head' href='#"
            + idName + "' title='Remove Element' role='button' aria-hidden='true'></a></div>";

        let HeaderLabelComponent = (labelClass, labelName, idName) => "<div class='header-label'><label class='"
            + labelClass + "' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>"
            + labelName + "</label></div>";

        let EditFieldComponent = (editfields) => {

            var res = "<div " + (editfields.controlType == "html" ? "" : " class='collapse' ") + " id = '"
                + editfields.idName + "' > <div><table class='table borderless'><tbody>";

            var defaultLanguageValue = '';
            for (let i = 0; i < activeLanguages.length; i++) {
                var isDefaultLanguage = activeLanguages[i].Id == defaultLanguage.Id;

                if (editfields.placeHolder !== null) {

                    let translation = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(editfields.placeHolder))
                        && t.Language.Id == activeLanguages[i].Id);
                    let translationText = (translation[0].TranslationText == null ? "" : translation[0].TranslationText);

                    if (activeLanguages[i].Id == defaultLanguage.Id) {
                        defaultLanguageValue = translationText;
                    }

                    if (editfields.controlType == "html") {
                        res += "<tr class='trTransField' data-dhhelpdesk-labelId='" + editfields.idName + "' data-dhhelpdesk-langId='"
                            + activeLanguages[i].Id + "'" + (activeLanguages[i].Id == document.getElementById("chosenLanguage").value ? "" : "style='display:none;'") + "><td style='width:100%' class='transField'>" + SummerNoteConfigComponent(editfields.idName + activeLanguages[i].Id, translationText) + "</td></tr>";
                    }
                    else {
                        res += "<tr class='trTransField' data-dhhelpdesk-labelId='" + editfields.idName + "' data-dhhelpdesk-langId='"
                            + activeLanguages[i].Id + "'" + (activeLanguages[i].Id == document.getElementById("chosenLanguage").value ? "" : "style='display:none'") + "><td class='transField'>" + (isDefaultLanguage ? "" : "<br/>") + "<label for='" + editfields.idName + "label" + activeLanguages[i].Id + "'><span>@Translation.GetCoreTextTranslation("Fältetikett") " + activeLanguages[i].LanguageId + " </span>" + (isDefaultLanguage ? "<span class='required-defaultLng'>*</span>" : "") + "</label></td><td>" + "<span class='spanDefaultLabelName'>" + (isDefaultLanguage ? "" : " (" + defaultLanguage.LanguageId + ") </span>" + " <span class='spanDefaultLabelName' id='defaultLabelName" + editfields.idName + "'>" + defaultLanguageValue) + "</span>" + "<input class='labelName txtInput' type='text' id='" + editfields.idName + "label" + activeLanguages[i].Id + "' data-dhhelpdesk-langId='" + activeLanguages[i].Id + "' data-dhhelpdesk-lang='" + activeLanguages[i].LanguageId + "' data-dhhelpdesk-controlType='" + editfields.controlType + "' data-dhhelpdesk-id='" + translation[0].Id + "' placeholder='" + translationText + "' value='" + (editfields.placeholderOnly ? "" : translationText) + "'></td></tr>"
                    }
                    if (editfields.controlType == "fileUpload") {
                        let translation = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(editfields.labelFields[0].Text))
                            && t.Language.Id == activeLanguages[i].Id && t.Prefix == "Message");

                        let translationText = (translation[0].TranslationText == null ? "" : translation[0].TranslationText);
                        res = res + "<tr class='trTransField' data-dhhelpdesk-fileupload-text='true' data-dhhelpdesk-labelId='"
                            + editfields.idName + "' data-dhhelpdesk-langId='" + activeLanguages[i].Id + "'" + (activeLanguages[i].Id == document.getElementById("chosenLanguage").value ? "" : "style='display:none'") + "><td class='transField'>" + (isDefaultLanguage ? "" : "<br/>") + "<label for='" + editfields.idName + "label" + activeLanguages[i].Id + "'><span>@Translation.GetCoreTextTranslation("Fälttext") " + activeLanguages[i].LanguageId + " </span>" + (isDefaultLanguage ? "<span class='required-defaultLng'>*</span>" : "") + "</label></td><td>" + "<span class='spanDefaultLabelName'>" + (isDefaultLanguage ? "" : " (" + defaultLanguage.LanguageId + ") </span>" + " <span class='spanDefaultLabelName' id='defaultLabelName" + editfields.idName + "FieldText'>" + defaultLanguageValue) + "</span>" + "<input class='labelFieldTextName labelName txtInput' type='text' id='" + editfields.idName + "labelFieldText" + activeLanguages[i].Id + "' data-dhhelpdesk-langId='" + activeLanguages[i].Id + "' data-dhhelpdesk-lang='" + activeLanguages[i].LanguageId + "' data-dhhelpdesk-controlType='" + editfields.controlType + "' data-dhhelpdesk-id='" + translation[0].Id + "' placeholder='" + translationText + "' value='" + (editfields.placeholderOnly ? "" : translationText) + "'></td></tr>"
                    }

                    if (editfields.controlType == "radio" || editfields.controlType == "checkbox-list" || editfields.controlType == "dropdown") {

                        res = res + SelectionComponent(editfields.idName, activeLanguages[i], isDefaultLanguage, editfields.options, editfields.controlType, editfields.savedId);
                    }

                }
            }
            if (editfields.controlType == "radio" || editfields.controlType == "checkbox-list" || editfields.controlType == "dropdown") {
                res = res + "<tr><td class='tdAddOption' style='background-color: white; margin-top: 0px; border-top: none;'></td><td class='tdAddOption' style='background-color: white; margin-top: 0px; border-top: none; text-align:right; padding-top:0px'><button class='btn btn-outline-dark btnAddChoice' data-dhhelpdesk-controlId='" + editfields.idName + "'>@Translation.GetCoreTextTranslation("Lägg till") @Translation.GetCoreTextTranslation("Val") +</button></td></tr>"
            }

            if (editfields.hasRequiredChk) {
                res = res + "<tr style='background-color:#f9f9f9'><td><label>" + '@Translation.GetCoreTextTranslation("Obligatorisk")' + "</label></td><td style='padding-top: 4px; padding-bottom: 2px;'><table class='table table-borderless'><tr class='tr-transparent'><td style='width: 5%'><label for='" + editfields.idName + "required" + "' class=''>Helpdesk</label></td><td style='width: 2%'><input type='checkbox' " + (editfields.isRequired == true ? 'checked' : '') + " class='chkRequired' id = '" + editfields.idName + "required" + "'></td><td style='width: 8%'></td><td style='width: 8%'><label for='" + editfields.idName + "requiredSelfService" + "'>" + '@Translation.GetCoreTextTranslation("Självservice")' + "</label></td><td><input type='checkbox' " + (editfields.isRequiredSelfService == true ? 'checked' : '') + " class='chkRequiredSelfService' id='" + editfields.idName + "requiredSelfService" + "' /></td></tr></table></td></tr> ";
            }

            res = res + "</tbody></table></div></div>";

            return res;
        }

        let SectionDivComponent = (EditFieldComponent, idName, labelClass, labelName, savedId = null) => "<div class='field' " + (savedId != null ? "data-dhhelpdesk-savedid='" + savedId + "'" : "") + "><div class='header'>" + HeaderLabelComponent(labelClass, labelName, idName) + HeaderActionsComponent(idName) + "</div><br/>" + EditFieldComponent + "</div > ";
        let SectionComponent = () => {
            let editfields = { idName: IDNAME, placeHolder: '@Translation.GetCoreTextTranslation("Sektion")', controlType: "Section", hasRequiredChk: false, isRequired: false, labelFields: null };
            return "<li data-type='section' class='ui-draggable dropped-item' style='display: list-item'>" + SectionDivComponent(EditFieldComponent(editfields), IDNAME, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")') + "</li>";
        }

        let ListComponent = (dataType, controlDiv) => "<li data-type='" + dataType + "' class='ui-draggable dropped-item' style='display: list-item'>" + controlDiv + "</li>";
        let SummerNoteConfigComponent = (idName, data) => "<div id='" + idName + "_summernote'>" + data + "</div><script>$('#" + idName + "_summernote').summernote({placeholder: '', dialogsFade: true, tabsize: 2, height: 270, fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36', '48' , '64', '82'], toolbar: [ ['style', ['bold', 'italic', 'underline', 'clear']], ['fontname', ['fontname']], ['fontsize', ['fontsize']], ['color', ['color']], ['para', ['ul', 'ol']], ['insert', ['link', 'picture']] ], disableResizeImage: true }); <" + "/script>"


        //EVENTS
        // Dragging
        $("#source li").draggable({
            connectToSortable: "#dropzone", helper: "clone", revert: 'invalid',
            start: function (e, ui) {
                $(ui.helper).css('width', "10%");
                    draggedItem = ui.item;
                    draggedFrom = $(this).closest(".dragndrop").attr("id");
                },
            stop: function (event, ui) {
                $(ui.helper).css('width', "100%");
                },
            opacity: 0.75
        });

        //Sorting
        $("#dropzone").sortable({
            revert: true,
            receive: function (event, ui) {
                draggedItem.switchClass("extendedCaseFormsLst", droppedItemClass);
                let idName = createUUID();
                let editfields;
                if (draggedFrom == "fields") {
                    switch (draggedItem.data('type')) {
                        case "section":
                            editfields = { idName: idName, placeHolder: '@Translation.GetCoreTextTranslation("Sektion")', controlType: "Section", hasRequiredChk: false, isRequired: false, labelFields: null, placeholderOnly: true };
                            draggedItem.html(SectionDivComponent(EditFieldComponent(editfields), idName, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")'));
                            break;

                        case "textbox":
                            editfields = { idName: idName, placeHolder: '@Html.Raw(Translation.GetCoreTextTranslation("Textfält"))', controlType: "TextBox", hasRequiredChk: true, isRequired: false, labelFields: null, placeholderOnly: true };
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Textfält")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'><input type='text' class='form-control form-control-width txtInput' readonly></div>" + EditFieldComponent(editfields) + "</div>")
                            break;

                        case "textarea":
                            editfields = { idName: idName, placeHolder: '@Html.Raw(Translation.GetCoreTextTranslation("Textarea"))', controlType: "Textarea", hasRequiredChk: true, isRequired: false, labelFields: null, placeholderOnly: true };
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Textarea")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'><textarea class='form-control form-control-width' readonly></textarea></div>" + EditFieldComponent(editfields) + "</div>")
                            break;

                        case "date":
                            editfields = { idName: idName, placeHolder: '@Html.Raw(Translation.GetCoreTextTranslation("Datumfält"))', controlType: "Date", hasRequiredChk: true, isRequired: false, labelFields: null, placeholderOnly: true };
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Datumfält")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'><input type='date' class='form-control form-control-width' readonly></div>" + EditFieldComponent(editfields) + "</div>")
                            break;

                        case "fileupload":
                            editfields = { idName: idName, placeHolder: '@Html.Raw(Translation.GetCoreTextTranslation("Filuppladdning"))', controlType: "fileUpload", hasRequiredChk: true, isRequired: false, labelFields: [{ Text: '@Translation.GetCoreTextTranslation("Dra filer hit")' }], placeholderOnly: true };
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Filuppladdning")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'><input type='text' id='" + idName + "fileUploadText' value='" + '@Translation.GetCoreTextTranslation("Dra filer hit")' + "' class='file-upload txtInput' readonly></div>" + EditFieldComponent(editfields) + "</div>")
                            break;

                        case "html":
                            editfields = { idName: idName, placeHolder: '@Html.Raw(Translation.GetCoreTextTranslation("Infofält"))', controlType: "html", hasRequiredChk: false, isRequired: false, labelFields: null, placeholderOnly: true };
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Infofält")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'</div><p class='form-control form-control-width' readonly></p></div>" + EditFieldComponent(editfields) + "</div>")

                            //$('#dropzone').sortable("disable");
                            break;

                        case "radio":
                            let radioOptions = [{ id: 1, name: "Val", placeholderOnly: true }, { id: 2, name: "Val", placeholderOnly: true }, { id: 3, name: "Val", placeholderOnly: true }];
                            editfields = { idName: idName, placeHolder: '@Html.Raw(Translation.GetCoreTextTranslation("Radioknapp"))', controlType: "radio", hasRequiredChk: true, isRequired: false, labelFields: null, options: radioOptions, placeholderOnly: true };
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Radioknapp")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'>" + DraggedItemInputFieldComponent(draggedItem.data('type'), radioOptions, [...activeLanguages].filter(l => l.Id == currentLanguageId)[0], [...translations]) + "</div>" + EditFieldComponent(editfields) + "</div>")
                            break;

                        case "checkbox-list":
                            let chkOptions = [{ id: 1, name: "Val", placeholderOnly: true }];
                            editfields = { idName: idName, placeHolder: '@Html.Raw(Translation.GetCoreTextTranslation("Kryssruta"))', controlType: "checkbox-list", hasRequiredChk: true, isRequired: false, labelFields: null, options: chkOptions, placeholderOnly: true };
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Kryssruta")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'>" + DraggedItemInputFieldComponent(draggedItem.data('type'), chkOptions, [...activeLanguages].filter(l => l.Id == currentLanguageId)[0], [...translations]) + "</div>" + EditFieldComponent(editfields) + "</div>")
                            break;

                        case "dropdown":
                            let drpOptions = [{ id: 1, name: "Val", placeholderOnly: true }, { id: 2, name: "Val", placeholderOnly: true }, { id: 3, name: "Val", placeholderOnly: true }];
                            editfields = { idName: idName, placeHolder: '@Html.Raw(Translation.GetCoreTextTranslation("Rullgardinsmeny"))', controlType: "dropdown", hasRequiredChk: true, isRequired: false, labelFields: null, options: drpOptions, placeholderOnly: true };
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Rullgardinsmeny")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'>" + DraggedItemInputFieldComponent(draggedItem.data('type'), drpOptions, [...activeLanguages].filter(l => l.Id == currentLanguageId)[0], [...translations]) + "</div>" + EditFieldComponent(editfields) + "</div>")
                            break;

                        default:
                            draggedItem.html(draggedItem.data('textbox'));
                    }

                    draggedFrom = "";
                }
            },
            start: function (e, ui) {
                draggedItem = ui.item;
            }
        });


        // On mouseenter and mouseleave graphic changes
        $(document).on("mouseenter", ".field", function (e) {
            $(this).children(".header").children(".header-actions").css("visibility", "visible");
        });

        $(document).on("mouseleave", ".field", function (e) {
            $(this).children(".header").children(".header-actions").css("visibility", "hidden");
        });

        $(document).on("mouseenter", ".fa-pencil", function (e) {
            let field = $(this).closest('.field');
            if (field.attr("id") == "formtabs") {
                return;
            }
            $(this).closest('.field').css("background", "#99ccff");
        });

        $(document).on("mouseleave", ".fa-pencil", function (e) {
            let field = $(this).closest('.field');
            if (field.attr("id") == "formtabs") {
                return;
            }
            $(this).closest('.field').css("background", "#e8dfdf");
        });

        $(document).on("mouseenter", ".fa-trash.head", function (e) {
            $(this).closest('.field').css("background", "pink");
        });

        $(document).on("mouseleave", ".fa-trash.head", function (e) {
            $(this).closest('.field').css("background", "#e8dfdf");
            $(this).closest('.field').attr('class', 'field');
        });

        $(document).on("mouseenter", ".fa-trash.option", function (e) {
            $(this).closest('li').find('input').css("background", "pink");
        });

        $(document).on("mouseleave", ".fa-trash.option", function (e) {
            $(this).closest('li').find('input').css("background", "white");
        });


        // Rich text event click on area
        $(document).on('click', '.note-editing-area', function () {
            $(this).children('.note-editable').trigger('focus');
        });

        // Rich text event leave area
        $(document).on('mouseenter', '.note-editable', function () {
            $('#dropzone').sortable("disable")
        }).on('mouseleave', '.note-editable', function () {
            $('#dropzone').sortable("enable")
        });

        //Delete button click event
        $(document).on("click", ".fa-trash.head", function () {

            let savedId = $(this).closest(".field").attr('data-dhhelpdesk-savedid');
            let obj = $(this)
            if (savedId != null && extendedCaseFormInCases == 'True') {
                var dlg = new ConfirmationDialog();
                var opts = {
                    dlgText: '@Html.Raw(Translation.GetForJS(Translation.GetCoreTextTranslation("Formuläret används på minst ett ärende. Borttagning av fält/sektion påverkar existerande ärenden. Är du säker på att du vill ta bort") +"?"))',
                    btnYesText: '@Translation.GetForJS("Ja")',
                    btnNoText: '@Translation.GetForJS("Nej")',
                    onClick: function (button) {
                        if (button === ConfirmationDialog.YES) {
                            $(obj).parent().parent().parent().parent().remove();
                            dlg.hide();
                        }
                        else {
                            dlg.hide();
                        }
                    }
                }
                dlg.init(opts);
                dlg.show();
            }
            else {
                $(obj).parent().parent().parent().parent().remove();
            }
        });

        // Edit button click event
        $(document).on("click", ".fa-pencil", function () {
            let isCollapsed = $(this).hasClass('collapsed');
            let controlType = $(this).closest("li").attr('data-type');
            let controlId = $(this).attr('href').replace('#', '');


            if (controlType == 'radio' || controlType == 'checkbox-list' || controlType == 'dropdown') {
                let element;
                if (isCollapsed) {
                    let listOfChoices = $(document).find(".selectOptions").filter('[data-dhhelpdesk-controlId= ' + controlId + ']');
                    let listItems = listOfChoices.filter('[data-dhhelpdesk-langId= ' + SELECTEDTRANSLATIONLANGUAGEID + ']')[0].getElementsByTagName('li');

                    let options = [];

                    for (let i = 0; i < listItems.length; i++) {
                        let option = { name: listItems[i].querySelectorAll("input")[0].value };
                        options.push(option);
                    }

                    element = DraggedItemInputFieldComponent(controlType, options, null, [...translations]);

                }
                else {
                    element = "<br/>";
                }
                document.getElementById(controlId + '_control').innerHTML = element;
            }
        });

        //Delete option click event
        $(document).on("click", ".fa-trash.option", function () {
            let obj = $(this).closest("li");
            let savedId = obj.attr('data-dhhelpdesk-savedid');

            let listId = obj.attr('data-dhhelpdesk-listId');
            let controlId = obj.attr('data-dhhelpdesk-controlid');

            let list = $(document).find(".selectOptions")
                .filter('[data-dhhelpdesk-controlId= ' + controlId + ']');

            if (list[0].childElementCount > 1) {

                if (savedId != null && extendedCaseFormInCases == 'True') {
                    var dlg = new ConfirmationDialog();
                    var opts = {
                        dlgText: '@Html.Raw(Translation.GetForJS(Translation.GetCoreTextTranslation("Formuläret används på minst ett ärende. Borttagning av fält/sektion påverkar existerande ärenden. Är du säker på att du vill ta bort") +"?"))',
                        btnYesText: '@Translation.GetForJS("Ja")',
                        btnNoText: '@Translation.GetForJS("Nej")',
                        onClick: function (button) {
                            if (button === ConfirmationDialog.YES) {
                                for (let l = 0; l < list.length; l++) {
                                    let listOfChoices = [...list[l].children].filter(item => item.getAttribute('data-dhhelpdesk-listId') == listId);

                                    for (let c = 0; c < listOfChoices.length; c++) {
                                        listOfChoices[c].remove();
                                    }
                                }
                                dlg.hide();
                            }
                            else {
                                dlg.hide();
                            }
                        }
                    }
                    dlg.init(opts);
                    dlg.show();
                }
                else {
                    for (let l = 0; l < list.length; l++) {
                        let listOfChoices = [...list[l].children].filter(item => item.getAttribute('data-dhhelpdesk-listId') == listId);

                        for (let c = 0; c < listOfChoices.length; c++) {
                            listOfChoices[c].remove();
                        }
                    }
                }
                if (list[0].childElementCount == 1) {
                    for (let l = 0; l < list.length; l++) {
                        let listOfChoices = [...list[l].children];
                        for (let c = 0; c < listOfChoices.length; c++) {
                            listOfChoices[c].getElementsByClassName('fa-trash')[0].style.display = 'none';
                        }
                    }
                }
            }
        });

        //Add choice click event
        $(document).on("click", ".btnAddChoice", function () {
            let controlId = $(this).attr('data-dhhelpdesk-controlId');
            let listOfChoices = $(document).find(".selectOptions").filter('[data-dhhelpdesk-controlId= ' + controlId + ']');
            let listItems = listOfChoices.filter('[data-dhhelpdesk-langId= ' + SELECTEDTRANSLATIONLANGUAGEID + ']')[0].getElementsByTagName('li');

            let nextListItemId = 1;

            for (let i = 0; i < listItems.length; i++) {
                let listItemId = listItems[i].getAttribute('data-dhhelpdesk-listid');
                if (listItemId > nextListItemId) {
                    nextListItemId = parseInt(listItemId);
                }
            }

            nextListItemId++;

            let controlType = listOfChoices[0].querySelectorAll("input")[0].getAttribute('data-dhhelpdesk-controlType');
            for (let l = 0; l < listOfChoices.length; l++) {
                let count = parseInt(listOfChoices[l].childElementCount);
                let activeLanguageId = listOfChoices[l].getAttribute('data-dhhelpdesk-langId');
                let activeLanguage = [...activeLanguages].filter(l => l.Id == activeLanguageId)[0];

                let option = { id: count + 1, name: "Val", placeholderOnly: true, listId: nextListItemId};
                let li = document.createElement('li');
                li.setAttribute('data-dhhelpdesk-listid', nextListItemId);
                li.setAttribute('data-dhhelpdesk-controlid', controlId);
                li.setAttribute('data-dhhelpdesk-langid', activeLanguageId);
                li.innerHTML = OptionInputComponent(controlId, option, activeLanguage, controlType, count + 1);
                listOfChoices[l].appendChild(li);

                if (listOfChoices[l].childElementCount == 2) {
                    listOfChoices[l].getElementsByClassName('fa-trash')[0].style.display = 'inline';
                }
            }
        });


        // Check if there already is an editor form to be displayed
        var formFields =  @Html.Raw(Json.Encode(Newtonsoft.Json.JsonConvert.SerializeObject(Model.FormFields)));

        // If no editor form exists then create and empty form with a tab and section section
        if (formFields === 'null') {
            let editfields = { idName: IDNAME, placeHolder: '@Translation.GetCoreTextTranslation("Sektion")', controlType: "Section", hasRequiredChk: false, isRequired: false, placeholderOnly: true };
            $("#dropzone").html(SectionComponent(SectionDivComponent(EditFieldComponent(editfields), IDNAME, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")')));
            let formtabEditFields = { idName: "formtab-edit", placeHolder: '@Translation.GetCoreTextTranslation("Fliknamn")', controlType: "Tab", hasRequiredChk: false, isRequired: false };
            $('#formtabs').append(EditFieldComponent(formtabEditFields));
        }
        else {  // if form exist then show the form fields
            var formData = JSON.parse(formFields);

            if (formData) {
                for (var t = 0; t < formData.tabs.length; t++) {

                    $('#formtabs').attr('data-dhhelpdesk-savedid', formData.tabs[t].id);
                    let currentTabLabel = [...translations].filter(item => item.Language.Id == currentLanguageId && item.Name == formData.tabs[t].name);

                    $('span#formtab-editheaderName')[0].innerHTML = currentTabLabel[0].TranslationText;
                    let formtabEditFields = { idName: "formtab-edit", placeHolder: currentTabLabel[0].Name, controlType: "Tab", hasRequiredChk: false, isRequired: false };
                    $('#formtabs').append(EditFieldComponent(formtabEditFields));

                    for (var s = 0; s < formData.tabs[t].sections.length; s++) {

                        let idName = formData.tabs[t].sections[s].id;
                        if (idName != "HiddenFields" && idName != "InitiatorInfo") {
                            let currentLanguageSectionName = [...translations].filter(item => item.Language.Id == currentLanguageId && formData.tabs[t].sections[s].name == item.Name);
                            let sectionEditFields = { idName: idName, placeHolder: formData.tabs[t].sections[s].name, controlType: "Section", hasRequiredChk: false, isRequired: false };

                            $("#dropzone").append(ListComponent("section", SectionDivComponent(EditFieldComponent(sectionEditFields), idName, "field-label sectionLabel", currentLanguageSectionName[0].TranslationText, idName)));

                            for (var c = 0; c < formData.tabs[t].sections[s].controls.length; c++) {
                                let idName = formData.tabs[t].sections[s].controls[c].id;

                                let dataType = formData.tabs[t].sections[s].controls[c].type;
                                let isRequired = false;
                                let isRequiredSelfService = false;

                                if (formData.tabs[t].sections[s].controls[c].validators) {
                                    let requiredObj = formData.tabs[t].sections[s].controls[c].validators.onSave[0];
                                    if (requiredObj.type == "required") {

                                        if (requiredObj.enabled != null) {
                                            isRequired = requiredObj.enabled.toLowerCase().includes("helpdesk");
                                            isRequiredSelfService = requiredObj.enabled.toLowerCase().includes("selfservice");
                                        }
                                        else {
                                            isRequired = true;
                                            isRequiredSelfService = true;
                                        }
                                    }
                                }

                                let currentLanguageLabel = [...translations].filter(item => item.Language.Id == currentLanguageId && formData.tabs[t].sections[s].controls[c].label == item.Name);
                                let editfields;
                                if (dataType == "textbox") {
                                    editfields = { idName: idName, placeHolder: formData.tabs[t].sections[s].controls[c].label, controlType: "TextBox", hasRequiredChk: true, isRequired: isRequired, isRequiredSelfService: isRequiredSelfService };
                                    $("#dropzone").append(ListComponent(dataType, "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id='" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'><input type='text' class='form-control form-control-width txtInput' readonly></div>" + EditFieldComponent(editfields) + "</div>"));
                                }

                                else if (dataType == "textarea") {
                                    editfields = { idName: idName, placeHolder: formData.tabs[t].sections[s].controls[c].label, controlType: "Textarea", hasRequiredChk: true, isRequired: isRequired, isRequiredSelfService: isRequiredSelfService };
                                    $("#dropzone").append(ListComponent(dataType, "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'><textarea class='form-control form-control-width' readonly></textarea></div>" + EditFieldComponent(editfields) + "</div>"));
                                }

                                else if (dataType == "date") {
                                    editfields = { idName: idName, placeHolder: formData.tabs[t].sections[s].controls[c].label, controlType: "Date", hasRequiredChk: true, isRequired: isRequired, isRequiredSelfService: isRequiredSelfService };
                                    $("#dropzone").append(ListComponent(dataType, "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'><input type='date' class='form-control form-control-width' readonly></div>" + EditFieldComponent(editfields) + "</div>"), null);
                                }

                                else if (dataType == "fileupload") {
                                    let currentLanguageFieldTextName = [...translations].filter(item => item.Language.Id == currentLanguageId && formData.tabs[t].sections[s].controls[c].addonText == item.Name);

                                    editfields = { idName: idName, placeHolder: formData.tabs[t].sections[s].controls[c].label, controlType: "fileUpload", hasRequiredChk: true, isRequired: isRequired, isRequiredSelfService: isRequiredSelfService, labelFields: [{ Text: currentLanguageFieldTextName[0].Name }] };
                                    $("#dropzone").append(ListComponent(dataType, "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'><input type='text' id='" + idName + "fileUploadText' value='" + currentLanguageFieldTextName[0].TranslationText + "' class='file-upload txtInput' readonly></div>" + EditFieldComponent(editfields) + "</div>"), null);
                                }

                                else if (dataType == "radio") {
                                    let radioOptions = [];

                                    for (let r = 0; r < formData.tabs[t].sections[s].controls[c].dataSource.length; r++) {

                                        radioOptions.push({ id: formData.tabs[t].sections[s].controls[c].dataSource[r].value, name: formData.tabs[t].sections[s].controls[c].dataSource[r].text });
                                    }

                                    editfields = { idName: idName, placeHolder: formData.tabs[t].sections[s].controls[c].label, controlType: "radio", hasRequiredChk: true, isRequired: isRequired, isRequiredSelfService: isRequiredSelfService, labelFields: null, options: radioOptions, savedId: idName };
                                    $("#dropzone").append(ListComponent(dataType, "<div class='field' data-dhhelpdesk-savedid='" + idName + "''><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'>" + DraggedItemInputFieldComponent(dataType, radioOptions, [...activeLanguages].filter(l => l.Id == currentLanguageId)[0], [...translations]) + "</div>" + EditFieldComponent(editfields) + "</div>"), null);
                                }

                                else if (dataType == "checkbox-list") {
                                    let chkOptions = [];
                                    for (let r = 0; r < formData.tabs[t].sections[s].controls[c].dataSource.length; r++) {
                                        chkOptions.push({ id: formData.tabs[t].sections[s].controls[c].dataSource[r].value, name: formData.tabs[t].sections[s].controls[c].dataSource[r].text });
                                    }

                                    editfields = { idName: idName, placeHolder: formData.tabs[t].sections[s].controls[c].label, controlType: "checkbox-list", hasRequiredChk: true, isRequired: isRequired, isRequiredSelfService: isRequiredSelfService, labelFields: null, options: chkOptions, savedId: idName };
                                    $("#dropzone").append(ListComponent(dataType, "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'>" + DraggedItemInputFieldComponent(dataType, chkOptions, [...activeLanguages].filter(l => l.Id == currentLanguageId)[0], [...translations]) + "</div>" + EditFieldComponent(editfields) + "</div>"));
                                }

                                else if (dataType == "dropdown") {
                                    let drpOptions = [];
                                    for (let r = 0; r < formData.tabs[t].sections[s].controls[c].dataSource.length; r++) {
                                        drpOptions.push({ id: formData.tabs[t].sections[s].controls[c].dataSource[r].value, name: formData.tabs[t].sections[s].controls[c].dataSource[r].text });
                                    }
                                    editfields = { idName: idName, placeHolder: formData.tabs[t].sections[s].controls[c].label, controlType: "dropdown", hasRequiredChk: true, isRequired: isRequired, isRequiredSelfService: isRequiredSelfService, labelFields: null, options: drpOptions, savedId: idName };
                                    $("#dropzone").append(ListComponent(dataType, "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'>" + DraggedItemInputFieldComponent(dataType, drpOptions, [...activeLanguages].filter(l => l.Id == currentLanguageId)[0], [...translations]) + "</div>" + EditFieldComponent(editfields) + "</div>"));
                                }

                                else if (dataType = "html") {

                                    editfields = { idName: idName, placeHolder: formData.tabs[t].sections[s].controls[c].label, controlType: "html", hasRequiredChk: false, isRequired: false, isRequiredSelfService: false, labelFields: null, placeholderOnly: true };
                                    $("#dropzone").append(ListComponent("html", "<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Infofält")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + HeaderActionsComponent(idName) + "</div><div class='control' id='" + idName + "_control'</div><p class='form-control form-control-width' readonly></p></div>" + EditFieldComponent(editfields) + "</div>"));
                                }

                                if (isRequired || isRequiredSelfService) {
                                    $("#" + idName + "requiredSpan").css('visibility', 'visible');
                                }
                            }
                        }
                    }
                }
            }
        }

        // Option and checkbox events
        $(document).on("keyup", ".labelName", function (e) {
            var isOptionElement = $(this).attr('data-dhhelpdesk-isoption');

            if (isOptionElement == null) {
                var id = $(this).attr('id').replace('label' + document.getElementById("chosenLanguage").value, 'headerName');
                document.getElementById(id).innerHTML = $(this).attr('value');
            }
        });

        $(document).on("keyup", ".labelFieldTextName", function (e) {
            var objId = $(this).attr('id');
            var id = objId.substring(0, objId.indexOf('labelFieldText'));

            document.getElementById(id + "fileUploadText").value = $(this).attr('value');
        });

        $(document).on("change", ".chkRequired", function (e) {
            var idSpan = $(this).attr('id').replace('required', 'requiredSpan');
            if ($(this).prop("checked")) {
                document.getElementById(idSpan).style.visibility = "visible";
            }
            else {
                let requiredInSelfServiceChk = document.getElementById($(this).attr('id').replace('required', 'requiredSelfService'));

                if (!requiredInSelfServiceChk.checked) {
                    document.getElementById(idSpan).style.visibility = "hidden";
                }
            }
        });

        $(document).on("change", ".chkRequiredSelfService", function (e) {
            var idSpan = $(this).attr('id').replace('requiredSelfService', 'requiredSpan');
            if ($(this).prop("checked")) {
                document.getElementById(idSpan).style.visibility = "visible";
            }
            else {
                let requiredInHdChk = document.getElementById($(this).attr('id').replace('requiredSelfService', 'required'));

                if (!requiredInHdChk.checked) {
                    document.getElementById(idSpan).style.visibility = "hidden";
                }
            }
        });

        // Clear button click event
        $(function () {
            $('#btnClear').click(function (e) {
                let hasSavedId = false;
                $('#dropzone li').each(function (e, obj) {
                    if ($(this).find(".field").attr('data-dhhelpdesk-savedid') != null) {
                        hasSavedId = true;
                        return false;
                    }
                });

                let editfields = { idName: IDNAME, placeHolder: '@Translation.GetCoreTextTranslation("Sektion")', controlType: "Section", hasRequiredChk: false, placeholderOnly: true };
                if (hasSavedId != null && extendedCaseFormInCases == 'True') {
                    var dlg = new ConfirmationDialog();
                    var opts = {
                        dlgText: '@Html.Raw(Translation.GetForJS(Translation.GetCoreTextTranslation("Formuläret används på minst ett ärende. Borttagning av fält/sektion påverkar existerande ärenden. Är du säker på att du vill ta bort") +"?"))',
                        btnYesText: '@Translation.GetForJS("Ja")',
                        btnNoText: '@Translation.GetForJS("Nej")',
                        onClick: function (button) {
                            if (button === ConfirmationDialog.YES) {
                                $("#dropzone").html(SectionComponent(SectionDivComponent(EditFieldComponent(editfields), IDNAME, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")')));
                                dlg.hide();
                            }
                            else {
                                dlg.hide();
                            }
                        }
                    }
                    dlg.init(opts);
                    dlg.show();
                }
                else {
                    $("#dropzone").html(SectionComponent(SectionDivComponent(EditFieldComponent(editfields), IDNAME, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")')));
                }
            });
        });

        // Submit event
        $(function () {
            $('#btnSubmit').click(function (e) {
                if (document.getElementById("dropzone").firstElementChild == null) {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Formuläret får ej vara tomt", Enums.TranslationSource.TextTranslation)))', "error")
                    return;
                }

                let tabName = $('span#formtab-editheaderName')[0].innerHTML;
                if (tabName == null || tabName.trim() == '') {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Formulärets flik får ej vara tom", Enums.TranslationSource.TextTranslation)))', "error")
                    $('#formtab-editheaderName').focus();
                    return;
                }

                var emptySections = 0;
                var droppedItemElements = $("." + droppedItemClass);
                for (var i = 0; i < droppedItemElements.length; i++) {
                    var element = droppedItemElements.eq(i);
                    var nextElement = droppedItemElements.eq(i + 1);

                    if (element.attr("data-type") == 'section' && nextElement.length == 0) {
                        emptySections = emptySections + 1;
                    }
                    else if (element.attr("data-type") == 'section' && nextElement.attr("data-type") == 'section') {
                        emptySections = emptySections + 1;
                    }
                }

                if (emptySections > 0) {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("En sektion får ej vara tom", Enums.TranslationSource.TextTranslation)))', "error")
                    return;
                }


                if (document.getElementById("dropzone").firstElementChild.getAttribute('data-type') != "section") {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Formulärets första fält måste vara en sektion", Enums.TranslationSource.TextTranslation)))', "error")
                    return;
                }

                if (document.getElementById("formDescription").value == "" || document.getElementById("formDescription").value.match(/^ *$/) !== null) {
                    document.getElementById("formDescription").value = "";
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Du måste ange en beskrivning", Enums.TranslationSource.TextTranslation)))', "error")
                    document.getElementById("formDescription").focus();
                    return;
                }

                var requiredNotFilled = 0;
                $('.labelName').each(function () {
                    if (this.value == "" || this.value == null) {
                        var isRequired = $('label[for="' + $(this).attr("id") + '"]').children("span.required-defaultLng").val();
                        if (isRequired != null) {
                            requiredNotFilled = requiredNotFilled + 1;
                        }
                    }
                });

                if (requiredNotFilled > 0) {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Alla texter måste vara ifyllda på språket ", Enums.TranslationSource.TextTranslation)))' + defaultLanguage.LanguageId, "error");
                    return;
                }
                var selectedCaseSolutions = [];
                $.each($("#drpCaseSolutions option:selected"), function () {
                    selectedCaseSolutions.push($(this).val());
                });

                if (selectedCaseSolutions.length == 0) {
                    var dlg = new ConfirmationDialog();
                    var opts = {
                        dlgText: '@Html.Raw(Translation.GetForJS(Translation.GetCoreTextTranslation("Ingen vald ärendemall. Är du säker på att du vill inaktivera formuläret?")))',
                        btnYesText: '@Translation.GetForJS("Ja")',
                        btnNoText: '@Translation.GetForJS("Nej")',
                        onClick: function (button) {
                            if (button === ConfirmationDialog.YES) {
                                postForm(selectedCaseSolutions);
                                dlg.hide();
                            }
                            else {
                                dlg.hide();
                            }
                        }
                    }
                    dlg.init(opts);
                    dlg.show();
                }
                else {

                    postForm(selectedCaseSolutions);
                        @*ShowToastMessage('@Html.Raw(Translation.GetForJS("Vänligen välj minst en ärendemall"))', "error")
                        return;*@
                        }
            });
        });

        // Cancel event
        $(function () {
            $('#btnCancel').click(function (e) {
                    e.stopImmediatePropagation();
                    let url = "/admin/ExtendedCase/GetCustomerForms?customerId=" + '@Model.Customer.Id';
                    window.location.href = url;
                });
            });
        });


    // GLOBAL FUNCTIONS OUTSIDE DOCUMENT.READY
    // Function that saves/updates the editor form
    function postForm(selectedCaseSolutions) {
        let sectionId, sectionName, id, type, label, valueBinding, required, addonText, columnCount, sections;

        let tabs = [
            {
                id,
                name,
                columnCount,
                sections
            }
        ];

        let items = [
            {
                sectionId,
                sectionName,
                controls: [
                    id,
                    type,
                    label,
                    required,
                    valueBinding,
                    addonText
                ]
            }
        ];

        var getNextUntil = function (elem, selector) {
            var siblings = [];
            var next = elem.nextElementSibling;

            while (next) {
                if (next.matches(selector)) break;
                siblings.push(next);
                next = next.nextElementSibling
            }
             return siblings;
        };

        let fieldTranslations = [];

        let counter = 0

        //Loop through all sections
        $('.sectionLabel').each(function (i, obj) {

            counter++;

            var sTranslations = document.getElementById(obj.id.replace("header", "")).querySelectorAll(".labelName");
            var sTranslationsProperty = [...sTranslations].filter(item => item.getAttribute('data-dhhelpdesk-langid') == defaultLanguage.Id);

            let savedId = $(obj).closest('.field').attr('data-dhhelpdesk-savedid');

            let newId = sTranslationsProperty[0].value + counter;
            let idSection = savedId != null ? savedId : newId;

            //Add section items
            items[i] = {};
            items[i].id = idSection;
            items[i].sectionName = document.getElementById(obj.id).innerText;
            items[i].controls = [];

            items[i].translationId = document.getElementById(obj.id).getAttribute('data-dhhelpdesk-id');

            //Add translations for the different sections
            for (s = 0; s < sTranslations.length; s++) {
                let translation = {};
                translation.Languageid = sTranslations[s].getAttribute('data-dhhelpdesk-langid');
                translation.Property = idSection;
                translation.Text = sTranslations[s].value.replaceAll('"', '\\\"');
                translation.ControlType = sTranslations[s].getAttribute('data-dhhelpdesk-controlType');
                translation.TranslationId = sTranslations[s].getAttribute('data-dhhelpdesk-id');
                fieldTranslations.push(translation);
            }
            //Loop through all controls inside a section
            getNextUntil(obj.parentElement.parentElement.parentElement.parentElement, "[data-type='section']").forEach(function (obj, n) {
                counter++;
                let controlType = obj.getAttribute('data-type');
                if (obj.querySelector('.field-label') != null) {
                    var id = obj.querySelector('.field-label').id;
                    var label = document.getElementById(id.replace('header', 'headerName')) != null ? document.getElementById(id.replace('header', 'headerName')).innerText : "infoField";

                    var required = document.getElementById(id.replace('header', 'required')) ? document.getElementById(id.replace('header', 'required')).checked : false;
                    var requiredSelfService = document.getElementById(id.replace('header', 'requiredSelfService')) ? document.getElementById(id.replace('header', 'requiredSelfService')).checked : false;
                    //var content = contentSummerNote ? 'function(m) { return ' + contentSummerNote + ' }' : "";

                    var fileuploadText = document.getElementById(id.replace('header', 'labelFieldText') + defaultLanguage.Id) != null ? document.getElementById(id.replace('header', 'labelFieldText') + defaultLanguage.Id).value : '';
                    var fTranslations = obj.querySelectorAll(".trTransField");

                    var fTranslationsProperty = [...fTranslations].filter(item => item.getAttribute('data-dhhelpdesk-langid') == defaultLanguage.Id);

                    var dataSrc = null;

                    if (fTranslationsProperty.length > 1) {
                        dataSrc = [];

                        if (fTranslationsProperty[1].querySelector('.selectOptions') !== null) {
                            let optionLst = fTranslationsProperty[1].querySelector('.selectOptions').getElementsByTagName("li");

                            for (let o = 0; o < optionLst.length; o++) {
                                let optionId;
                                let savedId = optionLst[o].getAttribute('data-dhhelpdesk-savedid');

                                let newId = 'lst' + optionLst[o].getAttribute('data-dhhelpdesk-listid') + '_' + optionLst[o].querySelectorAll('.labelName')[0].value;

                                optionId = savedId != null ? savedId : newId;

                                let option = optionLst[o].querySelector('.labelName');
                                dataSrc.push({ value: optionId, text: option.value });
                            }
                        }
                    }

                    let savedId = $(obj).find('.field').attr('data-dhhelpdesk-savedid');

                    let newId;

                    if (controlType == "html") {
                        newId = id.substring(0, 8) + counter;
                    }
                    else {
                        newId = fTranslationsProperty.length > 0 ? fTranslationsProperty[0].querySelector('.labelName').value + counter : label + counter;
                    }
                    idControl = savedId != null ? savedId : newId;

                    items[i].controls[n] = {
                        id: idControl,
                        type: obj.getAttribute('data-type'),
                        label: label,
                        required: required,
                        requiredSelfService: requiredSelfService,
                        valueBinding: controlType == "html" ? idControl : "",
                        addonText: fileuploadText,
                        dataSource: dataSrc
                    }

                    let fieldTextTranslations = [...fTranslations].filter(item => item.getAttribute('data-dhhelpdesk-fileupload-text') == "true");

                    if (fieldTextTranslations.length > 0) {

                        let idFileUploadText = fieldTextTranslations[0].querySelector('.labelName').value;

                        for (let t = 0; t < fieldTextTranslations.length; t++) {
                            let fTranslation = fieldTextTranslations[t].querySelector('.labelName');
                            let translation = {};
                            translation.LanguageId = fTranslation.getAttribute('data-dhhelpdesk-langId');
                            translation.Property = idFileUploadText;
                            translation.Text = fTranslation.value.replaceAll('"', '\\\"');;
                            translation.ControlType = fTranslation.getAttribute('data-dhhelpdesk-controlType');
                            translation.TranslationId = fieldTextTranslations[t].getAttribute('data-dhhelpdesk-id');
                            fieldTranslations.push(translation);
                        }
                    }

                    let optionTextTranslations = [];
                    optionTextTranslations = [...fTranslations].filter(item => item.getAttribute('data-dhhelpdesk-options') == "true");
                    let listItemCount = 0;

                    if (optionTextTranslations.length > 0) {

                        let optionElms = [];

                        for (let o = 0; o < optionTextTranslations.length; o++) {
                            let selectOptions = optionTextTranslations[o].querySelector('.selectOptions');
                            let optionItems = selectOptions.getElementsByTagName('li');

                            for (let i = 0; i < optionItems.length; i++) {
                                let listItemId = optionItems[i].getAttribute('data-dhhelpdesk-listid');
                                if (listItemId > listItemCount) {
                                    listItemCount = parseInt(listItemId);
                                }
                                optionElms.push(optionItems[i]);
                            }
                        }

                        for (let c = 0; c < listItemCount; c++) {
                            let optionsList = [...optionElms].filter(item => item.getAttribute('data-dhhelpdesk-listid') == c + 1);
                            let options = [];

                            for (let u = 0; u < optionsList.length; u++) {
                                options.push(optionsList[u].querySelector('.labelName'));
                            }

                            let idOptionProperty = [...options].filter(item => item.getAttribute('data-dhhelpdesk-langId') == defaultLanguage.Id);

                            for (let p = 0; p < options.length; p++) {

                                let savedId = options[p].parentElement.getAttribute('data-dhhelpdesk-savedId');
                                let newId = 'lst' + options[p].parentElement.getAttribute('data-dhhelpdesk-listid') + '_' + idOptionProperty[0].value;

                                let idOption = savedId != null ? savedId : newId;

                                let translation = {};

                                translation.LanguageId = options[p].getAttribute('data-dhhelpdesk-langId');
                                translation.Property = idOption;
                                translation.Text = options[p].value.replaceAll('"', '\\\"');;
                                translation.ControlType = options[p].getAttribute('data-dhhelpdesk-controlType');
                                translation.TranslationId = options[p].getAttribute('data-dhhelpdesk-id');
                                fieldTranslations.push(translation);
                            }
                        }
                    }

                    let fieldLabelTranslations = [...fTranslations].filter(item => !fieldTextTranslations.includes(item) && !optionTextTranslations.includes(item));

                    if (fieldLabelTranslations.length > 0) {
                        for (let f = 0; f < fieldLabelTranslations.length; f++) {
                            let lTranslation;
                            let translation = {};
                            if (controlType == "html") {

                                lTranslation = fieldLabelTranslations[f];

                                let contentSummerNote;
                                let summerNoteId = id.replace('header', '_summernote');
                                let cleanSummerNoteId = summerNoteId.replace("_summernote", "");
                                summerNoteId = summerNoteId.replace(cleanSummerNoteId, cleanSummerNoteId + lTranslation.getAttribute('data-dhhelpdesk-langId'));

                                if (document.getElementById(summerNoteId) != null) {
                                    contentSummerNote = $('#' + summerNoteId).summernote('code');

                                    contentSummerNote = contentSummerNote.replaceAll("color: ", "color:");
                                    contentSummerNote = contentSummerNote.replaceAll(" background-color:", "background-color:");
                                    contentSummerNote = contentSummerNote.replaceAll(" font-size: ", "font-size:");
                                    contentSummerNote = contentSummerNote.replaceAll("font-size: ", "font-size:");
                                    contentSummerNote = contentSummerNote.replaceAll("font-family: ", "font-family:");
                                    let regex = /[Rr][Gg][Bb][\(](((([\d]{1,3})[\,]{0,1})[\s]*){3})[\)]/gm
                                    let matches = contentSummerNote.match(regex);

                                    if (matches != null) {
                                        for (let m = 0; m < matches.length; m++) {
                                            contentSummerNote = contentSummerNote.replace(matches[m], matches[m].replaceAll(' ', ''));
                                        }
                                    }
                                }

                                translation.Text = contentSummerNote.replaceAll('"', '\\\"');;
                                translation.ControlType = controlType;
                            }
                            else {
                                lTranslation = fieldLabelTranslations[f].querySelector('.labelName');
                                translation.Text = lTranslation.value.replaceAll('"', '\\\"');;
                                translation.ControlType = lTranslation.getAttribute('data-dhhelpdesk-controlType');
                                translation.TranslationId = lTranslation.getAttribute('data-dhhelpdesk-id');
                            }
                            translation.LanguageId = lTranslation.getAttribute('data-dhhelpdesk-langId');
                            translation.Property = idControl;
                            fieldTranslations.push(translation);
                        }
                    }
                    }
                });

            });

            // Check that sections do not have the same name
            if (checkForDuplicates(items)) {
                ShowToastMessage("Sektionerna får ej ha samma namn", "error");
                return;
            }

            //Tab translations
            let tabTranslations = document.getElementById("formtabs").querySelectorAll(".labelName");
            let tabTranslationsProperty = [...tabTranslations].filter(item => item.getAttribute('data-dhhelpdesk-langid') == defaultLanguage.Id);

            let savedId = $('#formtabs').attr('data-dhhelpdesk-savedid');

            let newId = tabTranslationsProperty[0].value + "0";
            let tabId = savedId != null ? savedId : newId;

            tabs[0] = {
                id: tabId,
                name: tabId,
                columnCount: "1",
                sections: items
            }

            for (let t = 0; t < tabTranslations.length; t++) {
                let translation = {};
                translation.Languageid = tabTranslations[t].getAttribute('data-dhhelpdesk-langid');
                translation.Property = tabId;
                translation.Text = tabTranslations[t].value.replaceAll('"', '\\\"');;
                translation.ControlType = tabTranslations[t].getAttribute('data-dhhelpdesk-controlType');
                translation.TranslationId = tabTranslations[t].getAttribute('data-dhhelpdesk-id');
                fieldTranslations.push(translation);
            }

            //Set up data to post
            var dataToSend = {
                id: getUrlVars()["extendedCaseFormId"],
                customerId: getUrlVars()["customerId"],
                customerGuid: "@Model.Customer.CustomerGUID",
                languageId: currentLanguageId,
                description: document.getElementById("formDescription").value,
                status: selectedCaseSolutions.length == 0 ? "false" : "true",
                caseSolutionIds: selectedCaseSolutions,
                tabs: tabs,
                translations: fieldTranslations
        };

        //POST editor form data
        $.ajax({
            url: "/admin/ExtendedCase/SaveForm",
            type: "POST",
            data: JSON.stringify(dataToSend),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                
                if (data.result == true) {
                    if (typeof (getUrlVars()["extendedCaseFormId"]) == "undefined") {
                        let url = "EditForm?extendedCaseFormId=" + data.formId + "&languageId=" + currentLanguageId;
                        window.location.href = url;
                    }
                ShowToastMessage('@Html.Raw(Translation.GetForJS("Sparat"))')
                }
                else {
                    ShowToastMessage(data.error, "error")
                }
            }
            //,
            //error: function (request) {

            //    ShowToastMessage(, "error");
            //}
        });
    }

    // Helper fucntions
    function checkForDuplicates(array) {
        let valuesAlreadySeen = []

        for (let i = 0; i < array.length; i++) {
            let value = array[i].id
            if (valuesAlreadySeen.indexOf(value) !== -1) {
                return true
            }
            valuesAlreadySeen.push(value)
        }
        return false
    }

    function getUrlVars() {
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('=')
            vars.push(hash[0])
            vars[hash[0]] = hash[1]
        }
        return vars
    }

    function createUUID() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    function getStringWithoutSpecialChars(str) {
        return str.replace(/[^a-zA-Z0-9]/g, "");
    }

    function getStringWithoutSweChars(str) {

        var translate = {
        "ä": "a", "ö": "o", "ü": "u",
        "Ä": "A", "Ö": "O", "Ü": "U"
        };
        var translate_re = /[öäüÖÄÜ]/g;
        return (str.replace(translate_re, function (match) {
            return translate[match];
        }));
    }

    // Fucntion when language has been changed
    function onChangeLanguage(opt, translations) {

            $.each($(".field"), function () {

                SELECTEDTRANSLATIONLANGUAGEID = opt.value;
                let lblNameText = "";
                let fileUploadText = "";
                let id;
                var transFields = $(this).find('.trTransField');

                let defaultLangLabelName = "";
                let defaultLangLabelFieldTextName = "";

                for (let i = 0; i < transFields.length; i++) {

                    if (transFields[i].getAttribute('data-dhhelpdesk-langid') == opt.value) {
                        transFields[i].style.display = "";
                        id = $(transFields[i]).attr('data-dhhelpdesk-labelId');

                        var lables = $(transFields[i]).find('.labelName');

                        let controlType = transFields[i].closest("li") != null ? transFields[i].closest("li").getAttribute("data-type") : "";
                        if (controlType == "html") {
                            lblNameText = [...translations].filter(item => item.Name == "Infofält" && item.Prefix == "Control" && item.Language.Id == opt.value);

                            lblNameText = lblNameText != null ? lblNameText[0].TranslationText : "";
                        }
                        else if ($(transFields[i]).attr('data-dhhelpdesk-fileupload-text') == 'true') {
                            fileUploadText = lables[0] == null ? "" : lables[0].value;
                        }
                        else {
                            if (transFields[i].getAttribute('data-dhhelpdesk-options') == null) {
                                if (lables.length > 0) {

                                    lblNameText = lables[0].value;
                                }
                            }
                        }
                    }
                    else {
                        transFields[i].style.display = "none";
                    }

                    if (transFields[i].getAttribute('data-dhhelpdesk-options') == null) {
                        if (transFields[i].getAttribute('data-dhhelpdesk-langid') == defaultLanguage.Id) {
                            let lables = $(transFields[i]).find('.labelName');

                            if (lables.length > 0) {
                                if (lables[0].id.includes("FieldText")) {
                                    defaultLangLabelFieldTextName = lables[0].value;
                                }
                                else {
                                    defaultLangLabelName = lables[0].value;
                                }
                            }
                        }
                    }
                    else {
                        if (transFields[i].getAttribute('data-dhhelpdesk-langid') == opt.value) {

                            let controlId = transFields[i].getAttribute('data-dhhelpdesk-labelid');
                            let list = transFields[i].querySelector('.selectOptions').getElementsByTagName("li");
                            let controlType = list[0].querySelectorAll("input")[0].getAttribute('data-dhhelpdesk-controlType');
                            let options = [];
                            for (let l = 0; l < list.length; l++) {
                                let listItemId = list[l].getAttribute('data-dhhelpdesk-listid');
                                let option = { name: list[l].querySelectorAll("input")[0].value };

                                let defaultOptionLabel = $('[data-dhhelpdesk-listid="' + listItemId + '"][data-dhhelpdesk-langid="' + defaultLanguage.Id
                                    + '"][data-dhhelpdesk-controlid="' + controlId + '"]');

                                let optionLabelId = "defaultOptionLabel_" + controlId + "_Item_" + listItemId + "_Lang_" + opt.value;

                                if (document.getElementById(optionLabelId) != null) {
                                    let inputVal = defaultOptionLabel[0].querySelectorAll("input")[0].value;

                                    document.getElementById(optionLabelId).innerHTML = inputVal;
                                }
                                options.push(option);
                            }

                            let element = DraggedItemInputFieldComponent(controlType, options, null, null)
                            document.getElementById(controlId + '_control').innerHTML = element;
                        }
                    }
                }

                if (document.getElementById('defaultLabelName' + id) != null) {
                    document.getElementById('defaultLabelName' + id).innerHTML = defaultLangLabelName;
                }

                if (document.getElementById('defaultLabelName' + id + 'FieldText') != null) {
                    document.getElementById('defaultLabelName' + id + 'FieldText').innerHTML = defaultLangLabelFieldTextName;
                }

                if (document.getElementById(id + 'headerName') != null) {
                    document.getElementById(id + 'headerName').innerHTML = lblNameText;
                }
                if (document.getElementById(id + 'fileUploadText') != null) {
                    document.getElementById(id + 'fileUploadText').value = fileUploadText;
                }
            });
        }

        // Global component for this page
        function DraggedItemInputFieldComponent(controlType, options, activeLanguage, translations) {

                if (controlType == "radio" || controlType == "checkbox-list" || controlType == "dropdown") {

                    let str = "";
                    if (controlType == "radio") {
                        str += "<div class='form-control form-control-width'>";
                        for (let o = 0; o < options.length; o++) {
                            let optionName;
                            if (activeLanguage != null) {
                                let translation = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(options[o].name))
                                    && t.Language.Id == activeLanguage.Id && t.Prefix == "DataSource.Value");

                                optionName = translation[0].TranslationText + (translation[0].Name == "Val" ? (" " + options[o].id) : "");
                            }
                            else {
                                optionName = options[o].name;
                            }

                            str += "<label>";
                            str += "<input disabled='true' type='radio' name='" + optionName + "'" + (o == 0 ? "checked" : "") + ">";
                            str += optionName;
                            str += "</label>";
                        }
                        str += "</div>";
                    }

                    if (controlType == "checkbox-list") {
                        str += "<div class='form-control form-control-width'>";
                        for (let o = 0; o < options.length; o++) {
                            let optionName;
                            if (activeLanguage != null) {
                            let translation = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(options[o].name))
                                && t.Language.Id == activeLanguage.Id && t.Prefix == "DataSource.Value");

                                optionName = translation[0].TranslationText + (translation[0].Name == "Val" ? (" " + options[o].id) : "");
                            }
                            else {
                                optionName = options[o].name;
                            }
                            str += "<label>";
                            str += "<input disabled='true' type='checkbox' name='" + optionName + "'>";
                            str += optionName
                            str += "</label>";
                        }
                        str += "</div>";
                    }

                    if (controlType == "dropdown") {
                        str += "<select class='form-control form-control-width' readonly>";
                        for (let o = 0; o < options.length; o++) {
                            let optionName;
                            if (activeLanguage != null) {
                            let translation = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(options[o].name))
                                && t.Language.Id == activeLanguage.Id && t.Prefix == "DataSource.Value");

                                optionName = translation[0].TranslationText + (translation[0].Name == "Val" ? (" " + options[o].id) : "");
                            }
                            else {
                                optionName = options[o].name;
                            }
                            str += "<option value='" + optionName + "'" + (o == 0 ? "selected" : "") + ">";
                            str += optionName
                            str += "</option>";
                        }
                        str += "</select>"
                    }
                    return str;
                }
                else {
                    return "<input type='text' class='form-control form-control-width txtInput' readonly>";
                }
            };

</script>

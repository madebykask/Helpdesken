@using DH.Helpdesk.Web
@model DH.Helpdesk.BusinessData.Models.ExtendedCase.ExtendedFormViewModels
@{
    var currentLang = Model.ActiveLanguages.FirstOrDefault(c => c.Id == SessionFacade.CurrentLanguageId);
    var defaultLang = Model.ActiveLanguages.FirstOrDefault();
}

@Scripts.Render(BundleConfig.ScriptNames.ConfirmationDialog)
<link href="~/Content/css/summernote.css" rel="stylesheet" />
<link href="~/Content/css/font-awesome.min.css" rel="stylesheet" />
<link href="~/Content/css/bootstrap.css" rel="stylesheet" />
<script src="~/Content/summernote-0.8.18/summernote.js"></script>

<div class="secnavs fixed">
    <div class="pull-left">
        <ul class="secnav">
            <li class="extendedCaseFormsLst"><input type="button" id="btnSubmit" class="btn" value=@Translation.GetCoreTextTranslation("Spara")></li>
            @*@if (Model.ExtendedCaseForm != null)
                {
                    <li class="extendedCaseFormsLst"><input type="button" class="btn" value="@Translation.GetCoreTextTranslation("Ta bort")" id="btnDelete"></li>
                }*@
            <li class="extendedCaseFormsLst"><input type="button" class="btn" value="@Translation.GetCoreTextTranslation("Avbryt")" id="btnCancel"></li>
        </ul>
    </div>
</div>
<div class="content">
    <div class="container">
        <ul class="nav nav-tabs" id="myTab">
            <li class="active extendedCaseFormsLst" style="margin-left:0px"><a href="#subfragment-1">@Translation.GetCoreTextTranslation("Editerbara formulär") - @Model.Customer.Name</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane tab-pane-border active" id="fragment1">
                <div class="container">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th colspan="2">
                                    @Translation.GetCoreTextTranslation("Allmänt")
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @*<tr>
                                    <td>
                                        @Translation.GetCoreTextTranslation("Formulär")  @Translation.GetCoreTextTranslation("Namn")
                                    </td>
                                    <td>
                                        <input id="formName" type="text" value='@(Model.ExtendedCaseForm == null ? "" : Model.ExtendedCaseForm.Name)' maxlength="100" />
                                    </td>
                                </tr>*@
                            <tr>
                                <td class="general-fields">
                                    @Translation.GetCoreTextTranslation("Beskrivning")
                                </td>
                                <td>
                                    <input id="formDescription" type="text" value='@(Model.ExtendedCaseForm == null ? "" : Model.ExtendedCaseForm.Description)' maxlength="500" />
                                </td>
                            </tr>
                            <tr>
                                <td class="general-fields">
                                    @Translation.GetCoreTextTranslation("Ärendemallar")
                                </td>
                                <td>
                                    <select required id="drpCaseSolutions" class="chosen-select" multiple placeholder=@Translation.GetCoreTextTranslation("Välj en eller flera")>
                                        @foreach (var item in Model.CustomerCaseSolutions.OrderBy(c => c.Name))
                                        {
                                            <option value="@item.Id"
                                                    @((Model.ExtendedCaseForm == null ? "" : (Model.ExtendedCaseForm.CaseSolutions.Contains(item)) ? "selected " : " "))
                                                    @((Model.CustomerCaseSolutionsWithExtendedCaseForm == null ? "" : (Model.CustomerCaseSolutionsWithExtendedCaseForm.Contains(item)) ? "disabled" : ""))>
                                                @item.Name
                                            </option>
                                        }
                                    </select>
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <table class="table table-striped table-bordered table-hover">
                        <thead>
                            <tr>
                                <th style="border-right:none">
                                    @Translation.GetCoreTextTranslation("Formulär") editor
                                </th>
                                <th style="text-align:right; border-left:none">
                                    <select id="chosenLanguage" onchange="onChangeLanguage(this)">
                                        <option selected value="@SessionFacade.CurrentLanguageId">
                                            @Translation.GetCoreTextTranslation(currentLang.Name) (@currentLang.LanguageId) @(currentLang.Id == defaultLang.Id ? " *" : "")
                                        </option>
                                        @foreach (var l in Model.ActiveLanguages.Where(c => c.Id != SessionFacade.CurrentLanguageId).OrderBy(c => c.Name))
                                        {
                                            <option id="optSelectedFormLang" @(l.Id == defaultLang.Id ? "class=required-defaultLng" : "") value="@l.Id">@Translation.GetCoreTextTranslation(l.Name) (@l.LanguageId) @(l.Id == defaultLang.Id ? " *" : "")</option>
                                        }
                                    </select>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td colspan="2" class="editor-cols">
                                    <div id="fields" class="dragndrop">
                                        <ul id="source">
                                            <li class="extendedCaseFormsLst" data-type="section"><i class="fa fa-header" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Sektion")</li>
                                            <li class="extendedCaseFormsLst" data-type="textbox"><i class="fa fa-font" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Textfält")</li>
                                            <li class="extendedCaseFormsLst" data-type="textarea"><i class="fa fa-text-width" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Textarea")</li>
                                            <li class="extendedCaseFormsLst" data-type="date"><i class="fa fa-calendar-o" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Datumfält")</li>
                                            <li class="extendedCaseFormsLst" data-type="fileupload"><i class="fa fa-upload" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Filuppladdning")</li>
                                            <li class="extendedCaseFormsLst" data-type="html"><i class="fa fa-file-word-o" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Infofält")</li>
                                            <li class="extendedCaseFormsLst" data-type="radio"><i class="fa fa-dot-circle-o" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Radioknapp")</li>
                                            <li class="extendedCaseFormsLst" data-type="checkbox-list"><i class="fa fa-check-square" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Kryssruta")</li>
                                            <li class="extendedCaseFormsLst" data-type="dropdown"><i class="fa fa-chevron-circle-down" aria-hidden="true"></i> @Translation.GetCoreTextTranslation("Rullgardinsmeny")</li>
                                        </ul>
                                        <input id="btnClear" class="btn" type="button" value='@Translation.GetCoreTextTranslation("Rensa")' />
                                    </div>

                                    <ul id="formtabs" class="field" style="background-color:inherit">
                                        <li class="formtabs-li"><span id="formtab-editheaderName" tabindex=0 role="textbox" contenteditable="false"></span><a id="tab-edit" class='fa fa-pencil' data-toggle='collapse' role='button' title='Edit' href='#formtab-edit' aria-hidden='true'></a></li>
                                    </ul>

                                    <ul id="dropzone" class="dragndrop"></ul>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    const defaultLanguage = {
        Id : @defaultLang.Id,
        LanguageId : '@defaultLang.LanguageId'
    };
    const currentLanguageId = @SessionFacade.CurrentLanguageId;
    const droppedItemClass = "dropped-item";
    const extendedCaseFormInCases = '@Model.ExtendedCaseFormInCases';

    $(document).ready(function () {

        var activeLanguages = {}
        activeLanguages = JSON.parse('@Html.Raw(Json.Encode(Model.ActiveLanguages))');
        var translations = {}
        translations = JSON.parse('@Html.Raw(Json.Encode(Model.FieldTranslations))');
        const IDNAME = "firstSectionId";

        $('#formtab-editheaderName')[0].innerHTML = '@Translation.GetCoreTextTranslation("Fliknamn")';

        let optionListItem = (idName, option) => "<li data-dhhelpdesk-listId='" + option.id + "' data-dhhelpdesk-controlId='" + idName + "'><input style='width:95%' type='text' placeholder='" + option.name + "'><span><a class='fa fa-trash fa-lg option' style='color:black' aria-hidden='true'></a></span></li>"

        let selectionHtml = (idName, activeLanguage, isDefaultLanguage, options, controlType) => {
            let checkboxCls = controlType == "CheckboxList" ? " checkboxlst" : "";
            let optionRows = (options) => {
                let res = "<tr class='table-light'><td style='width:100%'><ul class='selectOptions" + checkboxCls + "' data-dhhelpdesk-controlId='" + idName + "'>";
                for (let o = 0; o < options.length; o++) {
                    //res = res + "<tr class='table-light'><td style='width:5%'><span aria-hidden='true'><i class='fa fa-circle'></i></span></td><td style='width:100%'><input type='text' placeholder='" + options[o] + "'></td><td><a class='fa fa-trash fa-lg' style='color:black' aria-hidden='true'></a></td></tr>"
                    res = res + optionListItem(idName, options[o]);
                }
                res = res + "</ul></td></tr>";
                //res = res + "<div style='border: 1px solid black; margin-left:5px:margin-right:5px'><ul><li><input style='width:95%' type='text' placeholder='Option 1'><span><a class='fa fa-trash fa-lg' style='color:black' aria-hidden='true'></a></span></li></ul></div>"
                return res;
            };

            return "<tr class='trTransField' data-dhhelpdesk-labelId='" + idName + "' data-dhhelpdesk-langId='" + activeLanguage.Id + "'" + (activeLanguage.Id == document.getElementById("chosenLanguage").value ? "" : "style='display:none'") + "><td class='transField'>" + (isDefaultLanguage ? "" : "<br/>") + "<label><span>@Translation.GetCoreTextTranslation("Val") " + activeLanguage.LanguageId + " </span>" + (isDefaultLanguage ? "<span class='required-defaultLng'>*</span>" : "") + "</label><td><table class='table table-borderless'><tbody>"
                + optionRows(options) + "</tbody></table></td></tr>";
        }

        let divHeaderActions = (idName) => "<div class='header-actions'><a class='fa fa-pencil fa-lg' data-toggle='collapse' href='#" + idName + "' role='button' title='Edit' aria-hidden='true'></a><a class='fa fa-trash fa-lg head' href='#" + idName + "' title='Remove Element' role='button' aria-hidden='true'></a></div>";
        let divHeaderLabel = (labelClass, labelName, idName) => "<div class='header-label'><label class='" + labelClass + "' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + labelName + "</label></div>";
        let editFieldHtml = (idName, placeHolder, controlType, hasRequiredChk, isRequired = false, labelFields = null) => {
            var res = "<div class='collapse' id = '" + idName + "'><div><table class='table borderless'><tbody>";
            var defaultLanguageValue = '';
            for (let i = 0; i < activeLanguages.length; i++) {
                var isDefaultLanguage = activeLanguages[i].Id == defaultLanguage.Id;

                if (placeHolder !== null) {

                    let translation = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(placeHolder))
                        && t.Language.Id == activeLanguages[i].Id);
                    let translationText = (translation[0].TranslationText == null ? "" : translation[0].TranslationText);

                    if (activeLanguages[i].Id == defaultLanguage.Id) {
                        defaultLanguageValue = translationText;
                    }

                    res = res + "<tr class='trTransField' data-dhhelpdesk-labelId='" + idName + "' data-dhhelpdesk-langId='" + activeLanguages[i].Id + "'" + (activeLanguages[i].Id == document.getElementById("chosenLanguage").value ? "" : "style='display:none'") + "><td class='transField'>" + (isDefaultLanguage ? "" : "<br/>") + "<label for='" + idName + "label" + activeLanguages[i].Id + "'><span>@Translation.GetCoreTextTranslation("Fältetikett") " + activeLanguages[i].LanguageId + " </span>" + (isDefaultLanguage ? "<span class='required-defaultLng'>*</span>" : "") + "</label></td><td>" + "<span class='spanDefaultLabelName'>" + (isDefaultLanguage ? "" : " (" + defaultLanguage.LanguageId + ") </span>" + " <span class='spanDefaultLabelName' id='defaultLabelName" + idName + "'>" + defaultLanguageValue) + "</span>" + "<input class='labelName' type='text' id='" + idName + "label" + activeLanguages[i].Id + "' data-dhhelpdesk-langId='" + activeLanguages[i].Id + "' data-dhhelpdesk-lang='" + activeLanguages[i].LanguageId + "' data-dhhelpdesk-controlType='" + controlType + "' data-dhhelpdesk-id='" + translation[0].Id + "' placeholder='" + translationText + "' value='" + translationText + "'></td></tr>"

                    if (controlType == "fileUpload") {
                        let translation = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(labelFields[0].Text))
                            && t.Language.Id == activeLanguages[i].Id && t.Prefix == "Message");

                        let translationText = (translation[0].TranslationText == null ? "" : translation[0].TranslationText);
                        res = res + "<tr class='trTransField' data-dhhelpdesk-fileupload-text='true' data-dhhelpdesk-labelId='" + idName + "' data-dhhelpdesk-langId='" + activeLanguages[i].Id + "'" + (activeLanguages[i].Id == document.getElementById("chosenLanguage").value ? "" : "style='display:none'") + "><td class='transField'>" + (isDefaultLanguage ? "" : "<br/>") + "<label for='" + idName + "label" + activeLanguages[i].Id + "'><span>@Translation.GetCoreTextTranslation("Fälttext") " + activeLanguages[i].LanguageId + " </span>" + (isDefaultLanguage ? "<span class='required-defaultLng'>*</span>" : "") + "</label></td><td>" + "<span class='spanDefaultLabelName'>" + (isDefaultLanguage ? "" : " (" + defaultLanguage.LanguageId + ") </span>" + " <span class='spanDefaultLabelName' id='defaultLabelName" + idName + "'>" + defaultLanguageValue) + "</span>" + "<input class='labelFieldTextName labelName' type='text' id='" + idName + "labelFieldText" + activeLanguages[i].Id + "' data-dhhelpdesk-langId='" + activeLanguages[i].Id + "' data-dhhelpdesk-lang='" + activeLanguages[i].LanguageId + "' data-dhhelpdesk-controlType='" + controlType + "' data-dhhelpdesk-id='" + translation[0].Id + "' placeholder='" + translationText + "' value='" + translationText + "'></td></tr>"
                    }

                    if (controlType == "Radio" || controlType == "CheckboxList" || controlType == "Dropdown") {
                        let options;
                        if (controlType == "CheckboxList") {
                            options = [{ id: 1, name: "Option 1" }];
                        }
                        else {
                            options = [{ id: 1, name: "Option 1" }, { id: 2, name: "Option 2" }, { id: 3, name: "Option 3" }];
                        }

                        res = res + selectionHtml(idName, activeLanguages[i], isDefaultLanguage, options, controlType);
                        //let translation = [...translations].filter(t => getStringWithoutSpecialChars(getStringWithoutSweChars(t.Name)) == getStringWithoutSpecialChars(getStringWithoutSweChars(labelFields[0].Text))
                        //    && t.Language.Id == activeLanguages[i].Id && t.Prefix == "Message");

                        //let translationText = (translation[0].TranslationText == null ? "" : translation[0].TranslationText);
                        //res = res + "<tr class='trTransField' data-dhhelpdesk-fileupload-text='true' data-dhhelpdesk-labelId='" + idName + "' data-dhhelpdesk-langId='" + activeLanguages[i].Id + "'" + (activeLanguages[i].Id == document.getElementById("chosenLanguage").value ? "" : "style='display:none'") + "><td class='transField'>" + (isDefaultLanguage ? "" : "<br/>") + "<label for='" + idName + "label" + activeLanguages[i].Id + "'><span>@Translation.GetCoreTextTranslation("Fälttext") " + activeLanguages[i].LanguageId + " </span>" + (isDefaultLanguage ? "<span class='required-defaultLng'>*</span>" : "") + "</label></td><td>" + "<span class='spanDefaultLabelName'>" + (isDefaultLanguage ? "" : " (" + defaultLanguage.LanguageId + ") </span>" + " <span class='spanDefaultLabelName' id='defaultLabelName" + idName + "'>" + defaultLanguageValue) + "</span>" + "<input class='labelFieldTextName labelName' type='text' id='" + idName + "labelFieldText" + activeLanguages[i].Id + "' data-dhhelpdesk-langId='" + activeLanguages[i].Id + "' data-dhhelpdesk-lang='" + activeLanguages[i].LanguageId + "' data-dhhelpdesk-controlType='" + controlType + "' data-dhhelpdesk-id='" + translation[0].Id + "' placeholder='" + translationText + "' value='" + translationText + "'></td></tr>"
                    }
                }
            }
            if (controlType == "Radio" || controlType == "CheckboxList" || controlType == "Dropdown") {
                res = res + "<tr><td class='tdAddOption' style='background-color: white; margin-top: 0px; border-top: none;'></td><td class='tdAddOption' style='background-color: white; margin-top: 0px; border-top: none; text-align:right; padding-top:0px'><button class='btn btn-outline-dark btnAddChoice' data-dhhelpdesk-controlId='" + idName + "'>@Translation.GetCoreTextTranslation("Lägg till") @Translation.GetCoreTextTranslation("Val") +</button></td></tr>"
            }

            if (hasRequiredChk) {
                res = res + "<tr><td><label for='" + idName + "required" + "' class=''>" + '@Translation.GetCoreTextTranslation("Obligatorisk")' + "</label></td><td><input type='checkbox' " + (isRequired == true ? 'checked' : '') + " class='chkRequired' id = '" + idName + "required" + "' ></td ></tr > ";
            }
            res = res +"</tbody></table></div></div>";
            return res;
        }

        let sectionHtmlDiv = (editFieldHtml, idName, labelClass, labelName, savedId = null) => "<div class='field' " + (savedId != null ? "data-dhhelpdesk-savedid='" + savedId + "'" : "") + "><div class='header'>" + divHeaderLabel(labelClass, labelName, idName) + divHeaderActions(idName) + "</div><br/>" + editFieldHtml + "</div > ";
        let sectionHtml = () => "<li data-type='section' class='ui-draggable dropped-item' style='display: list-item'>" + sectionHtmlDiv(editFieldHtml(IDNAME, '@Translation.GetCoreTextTranslation("Sektion")', "Section", false, false), IDNAME, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")') + "</li>";

        let listHtml = (dataType, controlDiv) => "<li data-type='" + dataType + "' class='ui-draggable dropped-item' style='display: list-item'>" + controlDiv + "</li>";
        let summerNoteConfig = (idName, data) => "<div id='" + idName + "_summernote'>" + data + "</div><script>$('#" + idName + "_summernote').summernote({placeholder: '', dialogsFade: true, tabsize: 2, height: 170, toolbar: [ ['style', ['bold', 'italic', 'underline', 'clear']], ['fontname', ['fontname']], ['color', ['forecolor']], ['para', ['ul', 'ol']], ['insert', ['link', 'picture']] ] }); <" + "/script>"

        var draggedFrom = "";
        var draggedItem;

        //let templates = {};
        // templates = getTemplates();

        $("#source li").draggable({
            connectToSortable: "#dropzone", helper: "clone", revert: 'invalid',
            start: function (e, ui) {
                $(ui.helper).css('width', "10%");
                    draggedItem = ui.item;
                    draggedFrom = $(this).closest(".dragndrop").attr("id");
                },
            stop: function (event, ui) {
                $(ui.helper).css('width', "100%");
                },
            opacity: 0.75
        });

        $("#dropzone").sortable({
            revert: true,
            receive: function (event, ui) {
                draggedItem.switchClass("extendedCaseFormsLst", droppedItemClass);
                let idName = createUUID();
                if (draggedFrom == "fields") {
                    switch (draggedItem.data('type')) {
                        case "section":
                            draggedItem.html(sectionHtmlDiv(editFieldHtml(idName, '@Translation.GetCoreTextTranslation("Sektion")', "Section", false, false), idName, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")'));
                            break;

                        case "textbox":
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Textfält")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><input type='text' class='form-control form-control-width' readonly></div>" + editFieldHtml(idName, '@Html.Raw(Translation.GetCoreTextTranslation("Textfält"))', "TextBox", true, false) + "</div>")
                            break;

                        case "textarea":
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Textarea")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><textarea class='form-control form-control-width' readonly></textarea></div>" + editFieldHtml(idName, '@Html.Raw(Translation.GetCoreTextTranslation("Textarea"))', "Textarea", true, false) + "</div>")
                            break;

                        case "date":
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Datumfält")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><input type='date' class='form-control form-control-width' readonly></div>" + editFieldHtml(idName, '@Html.Raw(Translation.GetCoreTextTranslation("Datumfält"))', "Date", true, false) + "</div>")
                            break;

                        case "fileupload":
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Filuppladdning")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><input type='text' id=" + idName + "fileUploadText" + " value='"+ '@Translation.GetCoreTextTranslation("Dra filer hit")' + "' class='file-upload' readonly></div>" + editFieldHtml(idName, '@Html.Raw(Translation.GetCoreTextTranslation("Filuppladdning"))', "fileUpload", true, false, [{ Text: '@Translation.GetCoreTextTranslation("Dra filer hit")'}]) + "</div>")
                            break;

                        case "radio":
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Radioknapp")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><select class='form-control form-control-width' readonly data-placeholder='Choose a template...'></select></div>" + editFieldHtml(idName, '@Html.Raw(Translation.GetCoreTextTranslation("Radioknapp"))', "Radio", true, false) + "</div>")
                            break;

                        case "checkbox-list":
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Kryssruta")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><select class='form-control form-control-width' readonly data-placeholder='Choose a template...'></select></div>" + editFieldHtml(idName, '@Html.Raw(Translation.GetCoreTextTranslation("Kryssruta"))', "CheckboxList", true, false) + "</div>")
                            break;

                        case "dropdown":
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Rullgardinsmeny")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><select class='form-control form-control-width' readonly data-placeholder='Choose a template...'></select></div>" + editFieldHtml(idName, '@Html.Raw(Translation.GetCoreTextTranslation("Rullgardinsmeny"))', "Dropdown", true, false) + "</div>")
                            break;

                        case "html":
                            draggedItem.html("<div class='field'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>@Translation.GetCoreTextTranslation("Infofält")</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control' style='padding:10px'>" + summerNoteConfig(idName, '') + "</div></div>")
                            $('#dropzone').sortable("disable");
                            break;

                        default:
                            draggedItem.html(draggedItem.data('textbox'));
                    }

                    draggedFrom = "";
                }
            },
            start: function (e, ui) {
                draggedItem = ui.item;
            }
        });

        $(document).on("mouseenter", ".field", function (e) {
            $(this).children(".header").children(".header-actions").css("visibility", "visible");
        });

        $(document).on("mouseleave", ".field", function (e) {
            $(this).children(".header").children(".header-actions").css("visibility", "hidden");
        });

        $(document).on("mouseenter", ".fa-pencil", function (e) {
            let field = $(this).closest('.field');
            if (field.attr("id") == "formtabs") {
                return;
            }
            $(this).closest('.field').css("background", "#99ccff");
        });

        $(document).on("mouseleave", ".fa-pencil", function (e) {
            let field = $(this).closest('.field');
            if (field.attr("id") == "formtabs") {
                return;
            }
            $(this).closest('.field').css("background", "#e8dfdf");
        });

        $(document).on("mouseenter", ".fa-trash.head", function (e) {
            $(this).closest('.field').css("background", "pink");
        });

        $(document).on("mouseleave", ".fa-trash.head", function (e) {
            $(this).closest('.field').css("background", "#e8dfdf");
            $(this).closest('.field').attr('class', 'field');
        });

        $(document).on("click", ".fa-trash.head", function () {
            let savedId = $(this).closest(".field").attr('data-dhhelpdesk-savedid');
            let obj = $(this)
            if (savedId != null && extendedCaseFormInCases == 'True') {
                var dlg = new ConfirmationDialog();
                var opts = {
                    dlgText: '@Html.Raw(Translation.GetForJS(Translation.GetCoreTextTranslation("Formuläret används på minst ett ärende. Borttagning av fält/sektion påverkar existerande ärenden. Är du säker på att du vill ta bort") +"?"))',
                    btnYesText: '@Translation.GetForJS("Ja")',
                    btnNoText: '@Translation.GetForJS("Nej")',
                    onClick: function (button) {
                        if (button === ConfirmationDialog.YES) {
                            $(obj).parent().parent().parent().parent().remove();
                            dlg.hide();
                        }
                        else {
                            dlg.hide();
                        }
                    }
                }
                dlg.init(opts);
                dlg.show();
            }
            else {
                $(obj).parent().parent().parent().parent().remove();
            }
        });

        $(document).on("click", ".fa-trash.option", function () {
            let listId = $(this).closest('li').attr('data-dhhelpdesk-listId');
            let controlId = $(this).closest('li').attr('data-dhhelpdesk-controlid');

            let list = $(document).find(".selectOptions")
                .filter('[data-dhhelpdesk-controlId= ' + controlId + ']');

            for (let l = 0; l < list.length; l++) {
                let listOfChoices = [...list[l].children].filter(item => item.getAttribute('data-dhhelpdesk-listId') == listId);

                for (let c = 0; c < listOfChoices.length; c++) {
                    listOfChoices[c].remove();
                }
            }
        });

        $(document).on("mouseenter", ".fa-trash.option", function (e) {
            $(this).closest('li').find('input').css("background", "pink");
        });

        $(document).on("mouseleave", ".fa-trash.option", function (e) {
            $(this).closest('li').find('input').css("background", "white");
        });

        $(document).on("click", ".btnAddChoice", function () {
            let controlId = $(this).attr('data-dhhelpdesk-controlId');
            let listOfChoices = $(document).find(".selectOptions").filter('[data-dhhelpdesk-controlId= ' + controlId + ']');

            for (let l = 0; l < listOfChoices.length; l++) {
                let count = parseInt(listOfChoices[l].childElementCount);
                let option = { id: count + 1, name: "Option" + " " + (count + 1) };
                listOfChoices[l].innerHTML += (optionListItem(controlId, option));
            }
        });


        var formFields =  @Html.Raw(Json.Encode(Newtonsoft.Json.JsonConvert.SerializeObject(Model.FormFields)));

        if (formFields === 'null') {
            $("#dropzone").html(sectionHtml(sectionHtmlDiv(editFieldHtml(IDNAME, '@Translation.GetCoreTextTranslation("Sektion")', "Section", false, false, IDNAME, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")'))));
            $('#formtabs').append(editFieldHtml("formtab-edit", '@Translation.GetCoreTextTranslation("Fliknamn")', "Tab", false, false));
        }
        else {
            var formData = JSON.parse(formFields);

            if (formData) {
                for (var t = 0; t < formData.tabs.length; t++) {

                    $('#formtabs').attr('data-dhhelpdesk-savedid', formData.tabs[t].id);
                    let currentTabLabel = [...translations].filter(item => item.Language.Id == currentLanguageId && item.Name == formData.tabs[t].name);

                    $('span#formtab-editheaderName')[0].innerHTML = currentTabLabel[0].TranslationText;

                    $('#formtabs').append(editFieldHtml("formtab-edit", currentTabLabel[0].Name, "Tab", false, false));

                    for (var s = 0; s < formData.tabs[t].sections.length; s++) {

                        let idName = formData.tabs[t].sections[s].id;

                        let currentLanguageSectionName = [...translations].filter(item => item.Language.Id == currentLanguageId && formData.tabs[t].sections[s].name == item.Name);

                        $("#dropzone").append(listHtml("section", sectionHtmlDiv(editFieldHtml(idName, formData.tabs[t].sections[s].name, "Section", false, false), idName, "field-label sectionLabel", currentLanguageSectionName[0].TranslationText, idName)));

                        for (var c = 0; c < formData.tabs[t].sections[s].controls.length; c++) {
                            let idName = formData.tabs[t].sections[s].controls[c].id;

                            let dataType = formData.tabs[t].sections[s].controls[c].type;
                            let isRequired = false;

                            if (formData.tabs[t].sections[s].controls[c].validators) {
                                isRequired = formData.tabs[t].sections[s].controls[c].validators.onSave[0].type == "required" ? true : false;
                            }

                            let currentLanguageLabel = [...translations].filter(item => item.Language.Id == currentLanguageId && formData.tabs[t].sections[s].controls[c].label == item.Name);

                            if (dataType == "textbox") {
                                $("#dropzone").append(listHtml("textbox", "<div class='field' data-dhhelpdesk-savedid='" + idName +  "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id='" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><input type='text' class='form-control form-control-width' readonly></div>" + editFieldHtml(idName, formData.tabs[t].sections[s].controls[c].label, "TextBox", true, isRequired) + "</div>"));
                            }

                            else if (dataType == "textarea") {
                                $("#dropzone").append(listHtml("textarea", "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><textarea class='form-control form-control-width' readonly></textarea></div>" + editFieldHtml(idName, formData.tabs[t].sections[s].controls[c].label, "Textarea", true, isRequired) + "</div>"));
                            }

                            else if (dataType == "date") {
                                $("#dropzone").append(listHtml("date", "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><input type='date' class='form-control form-control-width' readonly></div>" + editFieldHtml(idName, formData.tabs[t].sections[s].controls[c].label, "Date", true, isRequired) + "</div>"), null);
                            }

                            else if (dataType == "fileupload") {
                                let currentLanguageFieldTextName = [...translations].filter(item => item.Language.Id == currentLanguageId && formData.tabs[t].sections[s].controls[c].addonText == item.Name);

                                $("#dropzone").append(listHtml("fileupload", "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + currentLanguageLabel[0].TranslationText + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control'><input type='text' id=" + idName + "fileUploadText" + " value='" + currentLanguageFieldTextName[0].TranslationText + "' class='file-upload' readonly></div>" + editFieldHtml(idName, formData.tabs[t].sections[s].controls[c].label, "fileUpload", true, false, [{ Text: currentLanguageFieldTextName[0].Name }]) + "</div>"), null);
                            }

                            else if (dataType = "html") {
                                $("#dropzone").append(listHtml("html", "<div class='field' data-dhhelpdesk-savedid='" + idName + "'><div class='header'><div class='header-label'><label class='field-label' id='" + idName + "header" + "'><span id= '" + idName + "headerName" + "'>" + '@Html.Raw(Translation.GetForJS(Translation.GetCoreTextTranslation("Infofält")))' + "</span> <span class='required' id='" + idName + "requiredSpan" + "'>*</span></label></div>" + divHeaderActions(idName) + "</div><div class='control' style='padding:10px'>" + summerNoteConfig(idName, formData.tabs[t].sections[s].controls[c].valueBinding) + "</div></div>"));
                            }

                            if (isRequired) {
                                $("#" + idName + "requiredSpan").css('visibility', 'visible');
                            }
                        }
                    }
                }
            }
        }

        $(document).on("keyup", ".labelName", function (e) {
            var id = $(this).attr('id').replace('label' + document.getElementById("chosenLanguage").value, 'headerName');
            document.getElementById(id).innerHTML = $(this).attr('value');
        });

        $(document).on("keyup", ".labelFieldTextName", function (e) {
            var objId = $(this).attr('id');
            var id = objId.substring(0, objId.indexOf('labelFieldText'));

            document.getElementById(id + "fileUploadText").value = $(this).attr('value');
        });

        $(document).on("change", ".chkRequired", function (e) {
            var id = $(this).attr('id').replace('required', 'requiredSpan');
            if ($(this).prop("checked")) {
                document.getElementById(id).style.visibility = "visible";
            }
            else {
                document.getElementById(id).style.visibility = "hidden";
            }
        });

        $(function () {
            $('#btnClear').click(function (e) {
                let hasSavedId = false;
                $('#dropzone li').each(function (e, obj) {
                    if ($(this).find(".field").attr('data-dhhelpdesk-savedid') != null) {
                        hasSavedId = true;
                        return false;
                    }
                });

                if (hasSavedId != null && extendedCaseFormInCases == 'True') {
                    var dlg = new ConfirmationDialog();
                    var opts = {
                        dlgText: '@Html.Raw(Translation.GetForJS(Translation.GetCoreTextTranslation("Formuläret används på minst ett ärende. Borttagning av fält/sektion påverkar existerande ärenden. Är du säker på att du vill ta bort") +"?"))',
                        btnYesText: '@Translation.GetForJS("Ja")',
                        btnNoText: '@Translation.GetForJS("Nej")',
                        onClick: function (button) {
                            if (button === ConfirmationDialog.YES) {
                                $("#dropzone").html(sectionHtml(sectionHtmlDiv(editFieldHtml(IDNAME, '@Translation.GetCoreTextTranslation("Sektion")', "Section", false), IDNAME, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")')));
                                dlg.hide();
                            }
                            else {
                                dlg.hide();
                            }
                        }
                    }
                    dlg.init(opts);
                    dlg.show();
                }
                else {
                    $("#dropzone").html(sectionHtml(sectionHtmlDiv(editFieldHtml(IDNAME, '@Translation.GetCoreTextTranslation("Sektion")', "Section", false), IDNAME, "field-label sectionLabel", '@Translation.GetCoreTextTranslation("Sektion")')));
                }
            });
        });

        $(document).on('click', '.note-editing-area', function () {
            $(this).children('.note-editable').trigger('focus');
        });


        $(document).on('mouseenter', '.note-editable', function () {
            $('#dropzone').sortable("disable")
                }).on('mouseleave', '.note-editable', function () {
                $('#dropzone').sortable("enable")
        });

        $(function () {
            $('#btnSubmit').click(function (e) {
                if (document.getElementById("dropzone").firstElementChild == null) {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Formuläret får ej vara tomt", Enums.TranslationSource.TextTranslation)))', "error")
                    return;
                }

                let tabName = $('span#formtab-editheaderName')[0].innerHTML;
                if (tabName == null || tabName.trim() == '') {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Formulärets flik får ej vara tom", Enums.TranslationSource.TextTranslation)))', "error")
                    $('#formtab-editheaderName').focus();
                    return;
                }

                var emptySections = 0;
                var droppedItemElements = $("." + droppedItemClass);
                for (var i = 0; i < droppedItemElements.length; i++) {
                    var element = droppedItemElements.eq(i);
                    var nextElement = droppedItemElements.eq(i + 1);

                    if (element.attr("data-type") == 'section' && nextElement.length == 0) {
                        emptySections = emptySections + 1;
                    }
                    else if (element.attr("data-type") == 'section' && nextElement.attr("data-type") == 'section') {
                        emptySections = emptySections + 1;
                    }
                }

                if (emptySections > 0) {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("En sektion får ej vara tom", Enums.TranslationSource.TextTranslation)))', "error")
                    return;
                }


                if (document.getElementById("dropzone").firstElementChild.getAttribute('data-type') != "section") {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Formulärets första fält måste vara en sektion", Enums.TranslationSource.TextTranslation)))', "error")
                    return;
                }

                if (document.getElementById("formDescription").value == "" || document.getElementById("formDescription").value.match(/^ *$/) !== null) {
                    document.getElementById("formDescription").value = "";
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Du måste ange en beskrivning", Enums.TranslationSource.TextTranslation)))', "error")
                    document.getElementById("formDescription").focus();
                    return;
                }

                var requiredNotFilled = 0;
                $('.labelName').each(function () {
                    if (this.value == "" || this.value == null) {
                        var isRequired = $('label[for="' + $(this).attr("id") + '"]').children("span.required-defaultLng").val();
                        if (isRequired != null) {
                            requiredNotFilled = requiredNotFilled + 1;
                        }
                    }
                });

                if (requiredNotFilled > 0) {
                    ShowToastMessage('@Html.Raw(Translation.GetForJS(Translation.Get("Alla texter måste vara ifyllda på språket ", Enums.TranslationSource.TextTranslation)))' + defaultLanguage.LanguageId, "error");
                    return;
                }
                var selectedCaseSolutions = [];
                $.each($("#drpCaseSolutions option:selected"), function () {
                    selectedCaseSolutions.push($(this).val());
                });

                if (selectedCaseSolutions.length == 0) {
                    var dlg = new ConfirmationDialog();
                    var opts = {
                        dlgText: '@Html.Raw(Translation.GetForJS(Translation.GetCoreTextTranslation("Ingen vald ärendemall. Är du säker på att du vill inaktivera formuläret?")))',
                        btnYesText: '@Translation.GetForJS("Ja")',
                        btnNoText: '@Translation.GetForJS("Nej")',
                        onClick: function (button) {
                            if (button === ConfirmationDialog.YES) {
                                postForm(selectedCaseSolutions);
                                dlg.hide();
                            }
                            else {
                                dlg.hide();
                            }
                        }
                    }
                    dlg.init(opts);
                    dlg.show();
                }
                else {

                    postForm(selectedCaseSolutions);
                        @*ShowToastMessage('@Html.Raw(Translation.GetForJS("Vänligen välj minst en ärendemall"))', "error")
                        return;*@
                        }
            });
        });

        $(function () {
            $('#btnCancel').click(function (e) {
                    e.stopImmediatePropagation();
                    let url = "/admin/ExtendedCase/GetCustomerForms?customerId=" + '@Model.Customer.Id';
                    window.location.href = url;
                });
            });
        });


    function postForm(selectedCaseSolutions) {
        let sectionId, sectionName, id, type, label, valueBinding, required, addonText, columnCount, sections;

        let tabs = [
            {
                id,
                name,
                columnCount,
                sections
            }
        ];

        let items = [
            {
                sectionId,
                sectionName,
                controls: [
                    id,
                    type,
                    label,
                    required,
                    valueBinding,
                    addonText
                ]
            }
        ];

        var getNextUntil = function (elem, selector) {
            var siblings = [];
            var next = elem.nextElementSibling;

            while (next) {
                if (next.matches(selector)) break;
                siblings.push(next);
                next = next.nextElementSibling
            }
             return siblings;
        };

        let fieldTranslations = [];

        let counter = 0
        $('.sectionLabel').each(function (i, obj) {
            counter++;

            var sTranslations = document.getElementById(obj.id.replace("header", "")).querySelectorAll(".labelName");
            var sTranslationsProperty = [...sTranslations].filter(item => item.getAttribute('data-dhhelpdesk-langid') == defaultLanguage.Id);

            let savedId = $(obj).closest('.field').attr('data-dhhelpdesk-savedid');

            let newId = sTranslationsProperty[0].value + counter;
            let idSection = savedId != null ? savedId : newId;

            items[i] = {};
            items[i].id = idSection;
            items[i].sectionName = document.getElementById(obj.id).innerText;
            items[i].controls = [];

            items[i].translationId = document.getElementById(obj.id).getAttribute('data-dhhelpdesk-id');

            for (s = 0; s < sTranslations.length; s++) {
                let translation = {};
                translation.Languageid = sTranslations[s].getAttribute('data-dhhelpdesk-langid');
                translation.Property = idSection;
                translation.Text = sTranslations[s].value;
                translation.ControlType = sTranslations[s].getAttribute('data-dhhelpdesk-controlType');
                translation.TranslationId = sTranslations[s].getAttribute('data-dhhelpdesk-id');
                fieldTranslations.push(translation);
            }

        getNextUntil(obj.parentElement.parentElement.parentElement.parentElement, "[data-type='section']").forEach(function (obj, n) {
            counter++;

            if (obj.querySelector('.field-label') != null) {
                var id = obj.querySelector('.field-label').id;
                let contentSummerNote;
                if (document.getElementById(id.replace('header', '_summernote')) != null) {
                    contentSummerNote = $('#' + id.replace('header', '_summernote')).summernote('code');
                    console.log(contentSummerNote)
                }

                var label = document.getElementById(id.replace('header', 'headerName')) != null ? document.getElementById(id.replace('header', 'headerName')).innerText : "infoField";

                var required = document.getElementById(id.replace('header', 'required')) ? document.getElementById(id.replace('header', 'required')).checked : false;
                var content = contentSummerNote ? 'function(m) { return ' + contentSummerNote + ' }' : ""
                var fileuploadText = document.getElementById(id.replace('header', 'fileUploadText')) != null ? document.getElementById(id.replace('header', 'fileUploadText')).value : '';
                var fTranslations = obj.querySelectorAll(".trTransField");
                var fTranslationsProperty = [...fTranslations].filter(item => item.getAttribute('data-dhhelpdesk-langid') == defaultLanguage.Id);

                let savedId = $(obj).find('.field').attr('data-dhhelpdesk-savedid');

                let newId = fTranslationsProperty.length > 0 ? fTranslationsProperty[0].querySelector('.labelName').value + counter : label + counter;
                idControl = savedId != null ? savedId : newId;

                items[i].controls[n] = {
                    id: idControl,
                    type: obj.getAttribute('data-type'),
                    label: label,
                    required: required,
                    valueBinding: content,
                    addonText: fileuploadText
                }

                let fieldTextTranslations = [...fTranslations].filter(item => item.getAttribute('data-dhhelpdesk-fileupload-text') == "true");

                if (fieldTextTranslations.length > 0) {

                    let idFileUploadText = fieldTextTranslations[0].querySelector('.labelName').value;

                    for (let t = 0; t < fieldTextTranslations.length; t++) {
                        let fTranslation = fieldTextTranslations[t].querySelector('.labelName');
                        let translation = {};
                        translation.LanguageId = fTranslation.getAttribute('data-dhhelpdesk-langId');
                        translation.Property = idFileUploadText;
                        translation.Text = fTranslation.value;
                        translation.ControlType = fTranslation.getAttribute('data-dhhelpdesk-controlType');
                        translation.TranslationId = fieldTextTranslations[t].getAttribute('data-dhhelpdesk-id');
                        fieldTranslations.push(translation);
                    }
                }

                let fieldLabelTranslations = [...fTranslations].filter(item => !fieldTextTranslations.includes(item));

                if (fieldLabelTranslations.length > 0) {
                    for (let f = 0; f < fieldLabelTranslations.length; f++) {
                        let lTranslation = fieldLabelTranslations[f].querySelector('.labelName');
                        let translation = {};
                        translation.LanguageId = lTranslation.getAttribute('data-dhhelpdesk-langId');
                        translation.Property = idControl;
                        translation.Text = lTranslation.value;
                        translation.ControlType = lTranslation.getAttribute('data-dhhelpdesk-controlType');
                        translation.TranslationId = lTranslation.getAttribute('data-dhhelpdesk-id');
                        fieldTranslations.push(translation);
                    }
                }
                }
                });

                });

                if (checkForDuplicates(items)) {
                    ShowToastMessage("Sektionerna får ej ha samma namn", "error");
                    return;
                }

                let tabTranslations = document.getElementById("formtabs").querySelectorAll(".labelName");
                let tabTranslationsProperty = [...tabTranslations].filter(item => item.getAttribute('data-dhhelpdesk-langid') == defaultLanguage.Id);

                let savedId = $('#formtabs').attr('data-dhhelpdesk-savedid');

                let newId = tabTranslationsProperty[0].value + "0";
                let tabId = savedId != null ? savedId : newId;

                tabs[0] = {
                    id: tabId,
                    name: tabId,
                    columnCount: "1",
                    sections: items
                }

                for (let t = 0; t < tabTranslations.length; t++) {
                    let translation = {};
                    translation.Languageid = tabTranslations[t].getAttribute('data-dhhelpdesk-langid');
                    translation.Property = tabId;
                    translation.Text = tabTranslations[t].value;
                    translation.ControlType = tabTranslations[t].getAttribute('data-dhhelpdesk-controlType');
                    translation.TranslationId = tabTranslations[t].getAttribute('data-dhhelpdesk-id');
                    fieldTranslations.push(translation);
                }

                var dataToSend = {
                    id: getUrlVars()["extendedCaseFormId"],
                    customerId: getUrlVars()["customerId"],
                    languageId: currentLanguageId,
                    //name: document.getElementById("formName").value,
                    description: document.getElementById("formDescription").value,
                    status: selectedCaseSolutions.length == 0 ? "false" : "true",
                    caseSolutionIds: selectedCaseSolutions,
                    //sections: items,
                    tabs: tabs,
                    translations: fieldTranslations
                };

                $.ajax({
                    url: "/admin/ExtendedCase/SaveForm",
                    type: "POST",
                    data: JSON.stringify(dataToSend),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) {
                        if (data.result == true) {
                            if (typeof (getUrlVars()["extendedCaseFormId"]) == "undefined") {
                                let url = "EditForm?extendedCaseFormId=" + data.formId + "&languageId=" + currentLanguageId;
                                window.location.href = url;
                            }
                        ShowToastMessage('@Html.Raw(Translation.GetForJS("Sparat"))')
                        }
                        else {
                            ShowToastMessage(data.error, "error")
                        }
                    }
                //,
                //error: function (request) {

                //    ShowToastMessage(, "error");
                //}
                });

            }

        function checkForDuplicates(array) {
            let valuesAlreadySeen = []

            for (let i = 0; i < array.length; i++) {
                let value = array[i].id
                if (valuesAlreadySeen.indexOf(value) !== -1) {
                    return true
                }
                valuesAlreadySeen.push(value)
            }
            return false
        }

        function getUrlVars() {
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for (var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('=')
                vars.push(hash[0])
                vars[hash[0]] = hash[1]
            }
            return vars
        }

        function createUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        function getStringWithoutSpecialChars(str) {
            return str.replace(/[^a-zA-Z0-9]/g, "");
        }

        function getStringWithoutSweChars(str) {
            var translate = {
            "ä": "a", "ö": "o", "ü": "u",
            "Ä": "A", "Ö": "O", "Ü": "U"
            };
            var translate_re = /[öäüÖÄÜ]/g;
            return (str.replace(translate_re, function (match) {
            return translate[match];
            }));
        }

        function onChangeLanguage(opt) {
            $.each($(".field"), function () {

                let lblNameText = "";
                let fileUploadText = ""; //TODO Array of values
                let id;
                var transFields = $(this).find('.trTransField');
                let defaultLangLabelName = "";

                for (let i = 0; i < transFields.length; i++) {
                    if (transFields[i].getAttribute('data-dhhelpdesk-langid') == opt.value) {
                        transFields[i].style.display = "";
                        id = $(transFields[i]).attr('data-dhhelpdesk-labelId');

                        var lables = $(transFields[i]).find('.labelName');

                        if ($(transFields[i]).attr('data-dhhelpdesk-fileupload-text') == 'true') {
                            fileUploadText = lables[0] == null ? "" : lables[0].value;
                        }
                        else {
                            //lblNameText = lables[0] == null ? "" : lables[0].value;
                            if (lables.length > 0) {
                                lblNameText = lables[0].value;
                            }
                        }
                    }
                    else {
                        transFields[i].style.display = "none";
                    }
                    if (transFields[i].getAttribute('data-dhhelpdesk-langid') == defaultLanguage.Id) {
                        let lables = $(transFields[i]).find('.labelName');

                        if (lables.length > 0) {
                            defaultLangLabelName = lables[0].value;
                        }
                    }
                }

                if (document.getElementById('defaultLabelName' + id) != null) {
                    document.getElementById('defaultLabelName' + id).innerHTML = defaultLangLabelName;
                }

                if (document.getElementById(id + 'headerName') != null) {
                    document.getElementById(id + 'headerName').innerHTML = lblNameText;
                }
                if (document.getElementById(id + 'fileUploadText') != null) {
                    document.getElementById(id + 'fileUploadText').value = fileUploadText;
                }
                //var idLbl = $(transFields[i]).attr('data-dhhelpdesk-labelId') + 'headerName';
                //document.getElementById(idLbl).innerHTML = lables[0].value;

            });
        }

</script>

<style>
    #fields {
        margin: 0;
        padding: 0;
        width: 15%;
        margin-right: 20px;
        float: left;
        border: 1px thin;
        border-radius: 5px;
    }

    input[type=text] {
        width: 97%
    }

    .header-actions {
        opacity: 0.5;
        visibility: hidden;
    }

    .header-actions a {
        margin-right: 15px
    }


    #source {
        list-style: none;
        margin: 0;
        padding: 0;
        border: 1px solid #dddddd;
        border-radius: 10px;
    }

    .field {
        background-color: #e8dfdf;
        border-radius: 10px;
    }

    .header-label {
        width: 80%;
        float: left
    }

    .header-actions {
        /*width: 20%;*/
        display: flex;
        justify-content: flex-end;
        margin: 5px;
        padding-top: 5px;
    }

    .field-label {
        font-family: inherit;
        font-size: large;
        margin: 5px;
        padding-top: 5px;
        padding-right: 10px
    }

    .form-control {
        margin: 10px;
    }

    .form-control-width {
        width: 97%;
    }

    #btnClear {
        margin-top: 15px;
        margin-left: 5px;
    }

    #source li {
        cursor: move;
        padding: 10px;
        border: 1px solid #dddddd;
        background: #f5f5f5;
    }

    .label {
        font-size: large;
    }

    .sectionLabel {
        padding: 5px;
        font-size: x-large;
        font-weight: 600;
    }

    #dropzone {
        min-height: 400px;
        height: auto;
        float: none;
        overflow: hidden;
        border: 1px dashed black;
    }

    .extendedCaseFormsLst {
        list-style-type: none;
        padding: 0;
        margin: 5px;
    }

    .formtabs-li {
        list-style-type: none;
        padding: 0;
        margin: 5px 5px 0px 5px;
    }

    .fa {
        margin: 5px;
    }

    .required {
        color: red;
        visibility: hidden;
    }

    .required-defaultLng {
        color: red;
    }

    .ui-draggable {
        list-style-type: none;
        padding: 0;
        margin: 5px;
    }

    .note-editor {
        padding: 0px;
    }

    .note-modal {
        height: max-content;
    }

    .file-upload {
        margin: 10px;
        border-color: black;
        border: 1px dashed black !important;
        height: 50px !important;
        text-align: center !important;
    }

    .spanDefaultLabelName {
        margin-left: 5px;
        font-size: 12px;
    }

    .transField {
        width: 200px;
    }

    #formtabs {
        list-style-type: none;
        /*min-height: 400px;*/
        height: auto;
        float: none;
        overflow: hidden;
        padding:0;
        margin: 0px 0px 5px 5px
    }

    #formtab-editheaderName {
        background-color: #e8dfdf;
        width: inherit;
        font-family: inherit;
        padding: 1px 6px;
        border-top-right-radius: 10px;
        border-top-left-radius: 10px;
        margin: 5px 5px 5px 5px;
        font-weight: bold;
        font-size: 16px;
        display: inline-block;
        justify-content: space-between;
        height: inherit
    }

    #formtab-edit {
        background-color: #e8dfdf;
    }

    .general-fields {
        width:17%;
    }

    .editor-cols {
        background-color: inherit;
    }

    .table.borderless {
        margin:5px 10px;
        width:98%;
    }

    span[contenteditable]:empty:focus::before,
    span[contenteditable]:empty::before {
        content: '@Translation.GetCoreTextTranslation("Fliknamn")';
        opacity: 0.5;
    }

    .table-borderless > tbody > tr > td,
    .table-borderless > tbody > tr > th,
    .table-borderless > tfoot > tr > td,
    .table-borderless > tfoot > tr > th,
    .table-borderless > thead > tr > td,
    .table-borderless > thead > tr > th {
        border: none;
    }
    .table-borderless > tbody > tr {
        border: 1px solid #dddddd;
        border-radius: 5px;
    }

    .table-borderless {
        margin-left: 5px;
        margin-right: 30px;
        margin-right: 0px;
    }

    .tdAddOption {
        background-color: white;
        margin-top: 0px;
        border-top: none;
    }

    .selectOptions li {
        list-style: none;
        position: relative;
    }

    .selectOptions li:before {
        content: "\f1db"; /*"\f096"; */
        font-family: FontAwesome;
        display: inline-block;
        margin-left: -1.3em;
        width: 1.3em;
        position: absolute;
    }

    .selectOptions.checkboxlst li:before {
        content: "\f096"; 
        font-family: FontAwesome;
        display: inline-block;
        margin-left: -1.3em;
        width: 1.3em;
        position: absolute;
    }

    .note-fontname {
        padding-top: 5px;
    }

    .note-color-fore {
        padding-top: 5px;
    }

</style>

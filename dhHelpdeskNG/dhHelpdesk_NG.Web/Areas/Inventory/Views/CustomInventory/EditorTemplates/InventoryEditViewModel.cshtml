@using System.Web.Optimization
@using DH.Helpdesk.BusinessData.Models.Inventory.Edit.Inventory
@using DH.Helpdesk.Web.Areas.Inventory.Models.EditModel.Inventory
@using DH.Helpdesk.Web.Infrastructure
@model InventoryEditViewModel
@functions {

    private bool IsVisibleGeneral()
    {
        return Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.DepartmentId.Show || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Name.Show || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Model.Show || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Manufacturer.Show || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.SerialNumber.Show || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.TheftMark.Show;
    }

    private bool IsVisibleInventory()
    {
        return Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.BarCode.Show || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.PurchaseDate.Show;
    }

}
@Scripts.Render("~/bundles/inventory/place-cascading")

<script>
    $(function () {
        var parameters = {
            floorsSearchUrl: '@Url.Action("SearchFloorsByBuildingId")',
            roomsSearchUrl: '@Url.Action("SearchRoomsByFloorId")'
        };

        applyCascadingBehivarior(parameters);
    });
</script>

@if (IsVisibleGeneral())
{
    <h4>@Translation.GetCoreTextTranslation("Allmänt")</h4>

    <div class="row">
        <div class="span12">
            <table class="tableform">
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.DepartmentId, "CustomTypesFields/List", new { Source = Model.InventoryViewModel.DefaultFieldsViewModel.Departments })
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Name, "CustomTypesFields/Text", new { inputAttributes = new Dictionary<string, object> { { "maxlength", "60" } } })
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Model, "CustomTypesFields/Text")
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Manufacturer, "CustomTypesFields/Text")
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.SerialNumber, "CustomTypesFields/Text")
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.TheftMark, "CustomTypesFields/Text")
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Type, "CustomTypesFields/List", new { Source = Model.InventoryViewModel.DefaultFieldsViewModel.ComputerTypes })
            </table>
        </div>
    </div>
}

@if (IsVisibleInventory())
{
    <h4>@Translation.GetCoreTextTranslation("Inventering")</h4>
    
    <div class="row">
        <div class="span12">
            <table class="tableform">
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.BarCode, "CustomTypesFields/Text")
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.PurchaseDate, "CustomTypesFields/Date", new { id = "inventory_edit_purchasedate_date_datepicker" })
               @* @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Info, "CustomTypesFields/WideText")*@
            </table>
        </div>
    </div>
}
@if (Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Info.Show)
{
    <h4>@Translation.GetCoreTextTranslation("Övrigt")</h4>
    <div class="row">
        <div class="span12">
            <table class="tableform">
               @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Info, "CustomTypesFields/WideText")
            </table>
        </div>
    </div>
}
@if (Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId.Show)
{
    <h4>@Translation.GetCoreTextTranslation("Placering")</h4>
}
@if (Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId.Show)
{
    <div class="row">
        <div class="span12">
            <table class="tableform">
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.BuildingId, "Fields/ListInt",
                    new {
                        Source = Model.InventoryViewModel.DefaultFieldsViewModel.Buildings,
                        id = "buildings_dropdown",
                        Label = Translation.GetCoreTextTranslation("Byggnad"),
                        Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId.IsReadOnly
                    })
                @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.FloorId, "Fields/ListInt",
                    new
                    {
                        Source = Model.InventoryViewModel.DefaultFieldsViewModel.Floors,
                        id = "floors_dropdown",
                        Label = Translation.GetCoreTextTranslation("Våning"),
                        Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId.IsReadOnly
                    })
                <tr>
                    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId, "CustomTypesFields/List", new {Source = Model.InventoryViewModel.DefaultFieldsViewModel.Rooms, id = "rooms_dropdown"})
                </tr>
            </table>
        </div>
    </div>
}

@{
    List<int> groups = Model.DynamicFieldModels.Select(x => x.GroupId).Distinct().OrderBy(x => x).ToList();
    List<DynamicFieldModel> allModels = Model.DynamicFieldModels.OrderBy(x => x.GroupId).ThenBy(x => x.Position).ToList();

    foreach (var group in groups)
    {
        var id = group;
        var dynamicFieldModels = Model.DynamicFieldModels.Where(x => x.GroupId == id).OrderBy(x => x.Position).ToList();

        if (!dynamicFieldModels.Any())
        {
            continue;
        }

        var groupName = Model.TypeGroupModels.FirstOrDefault(x => x.Id == group);

        var header = groupName != null ? groupName.Name : string.Empty;
        <h4>@Html.DisplayFor(m => header)</h4>

        <div class="row">
            <div class="span12">
                <table class="tableform">
                    @for (var i = 0; i < allModels.Count; i++)
                    {
                        if (dynamicFieldModels.Contains(allModels[i]))
                        {
                            @Html.EditorFor(m => allModels[i],
                                "DynamicFieldModel",
                                string.Format("allModels[{0}]", i.ToString()),
                                new
                               {
                                   Id = i
                               })
                        }
                    }
                </table>
            </div>
        </div>
    }
}
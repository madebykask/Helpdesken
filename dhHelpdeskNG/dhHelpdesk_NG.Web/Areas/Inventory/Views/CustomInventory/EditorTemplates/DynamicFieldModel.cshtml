@using DH.Helpdesk.BusinessData.Models.Inventory.Edit.Settings
@using DH.Helpdesk.Web.Areas.Inventory.Models.EditModel.Inventory
@model DynamicFieldModel
<tr>
    <td class="span3">
        <label>@Html.DisplayFor(m => m.Caption)</label>
    </td>
    <td class="span9">
        @{

            switch (Model.FieldTypes)
            {
                case FieldTypes.Bool:
                    var boolValue = !string.IsNullOrWhiteSpace(Model.Value) && Model.Value == DynamicFieldModel.True;
                    @(Model.IsReadOnly
                        ? Html.CheckBoxFor(m => boolValue, new {@readonly = true, @disabled = "disabled", Name = ViewData.TemplateInfo.HtmlFieldPrefix + ".Value"})
                        : Html.CheckBoxFor(m => boolValue, new {Name = ViewData.TemplateInfo.HtmlFieldPrefix + ".Value"}))
                    break;
                case FieldTypes.Date:
                    DateTime dateValueTemp;
                    DateTime? dateValue = null;
                    if (DateTime.TryParse(Model.Value, out dateValueTemp))
                    {
                        dateValue = dateValueTemp;
                    }
                    @(Model.IsReadOnly
                        ? Html.DisplayFor(m => dateValue, "Date")
                        : Html.EditorFor(m => dateValue, "DatePicker", new {id = "general_finishing_date_datepicker" + ViewData["Id"], Name = ViewData.TemplateInfo.HtmlFieldPrefix + ".Value"}))
                    break;
                case FieldTypes.Text:
                    @(Model.IsReadOnly
                        ? Html.TextBoxFor(m => m.Value, new { @readonly = true})
                        : Html.TextBoxFor(m => m.Value, new {data_dh_is_use_maxlength = Model.IsUseMaxSize, data_dh_maxlength = Model.MaxSize }))
                    @Html.ValidationMessageFor(m => m.Value)
                    @Html.HiddenFor(m => m.IsUseMaxSize)
                    @Html.HiddenFor(m => m.MaxSize)
                    @Html.HiddenFor(m => m.FieldTypes)
                    break;
                case FieldTypes.Numeric:
                    var intValue = !string.IsNullOrWhiteSpace(Model.Value) ? (int?)int.Parse(Model.Value) : null;
                    @(Model.IsReadOnly
                        ? Html.TextBoxFor(m => intValue, new {@readonly = true})
                        : Html.TextBoxFor(m => intValue, new {Name = ViewData.TemplateInfo.HtmlFieldPrefix + ".Value"}))
                    break;
                default:
                    @(Model.IsReadOnly ? Html.EditorFor(m => Model.Value, new { @readonly = true }) : Html.EditorFor(m => Model.Value))
                    break;
            }
        }
        @Html.HiddenFor(m => m.InventoryTypePropertyId)
        @Html.HiddenFor(m => m.FieldTypes)
    </td>
</tr>


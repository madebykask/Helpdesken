@using System.Web.Optimization
@using DH.Helpdesk.Web
@using DH.Helpdesk.Web.Infrastructure
@model DH.Helpdesk.Web.Areas.Inventory.Models.EditModel.Computer.ComputerEditViewModel

@{
    Layout = "~/Areas/Inventory/Views/Workstation/_EditWorkstationLayout.cshtml";
    var documentModel = Model.ComputerViewModel.ContractFieldsViewModel.ContractFieldsModel.Document;
}

@section Actions
{
    <ul class="secnav">
        @if (Model.UserHasInventoryAdminPermission)
        {
            <li id="menu1">
                <input type="submit" value="@Translation.GetCoreTextTranslation("Spara")" class="btn" onclick=" $('#workstation_edit_form').submit(); " />
            </li>
            if (!Model.IsForDialog)
            {
                <li id="menu3">
                    @Html.ActionLink(Translation.GetCoreTextTranslation("Ta bort"), "Delete", new {id = Model.ComputerViewModel.Id}, new
                    {@class = "btn deleteDialog", deleteDialogText = Translation.GetCoreTextTranslation("Är du säker på att du vill ta bort aktuell post") + "?"})
                </li>
            }
        }
        @if (Model.IsForDialog && !string.IsNullOrEmpty(Model.UserId))
        {
            <li id="menu2">@Html.ActionLink(Translation.GetCoreTextTranslation("Avbryt"), "RelatedInventoryFull", new { userId = Model.UserId }, new { @class = "btn" })</li>
        }
        @if (!Model.IsForDialog)
        {
            <li id="menu2">@Html.ActionLink(Translation.GetCoreTextTranslation("Avbryt"), "Index", null, new { @class = "btn" })</li>
        }
    </ul>
}

@using (Html.BeginForm("Edit", "Workstation", FormMethod.Post, new { id = "workstation_edit_form" }))
{
    @Html.HiddenFor(m => m.ComputerViewModel.IsForDialog)
    @Html.HiddenFor(m => m.ComputerViewModel.UserId)
    @Html.HiddenFor(m => m.ComputerViewModel.Id)
    @Html.HiddenFor(m => m.Id)
    @Html.Hidden("DocumentFileKey", Model.ComputerViewModel.DocumentFileKey)

    @Html.EditorFor(m => m.ComputerViewModel.WorkstationFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.ChassisFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.InventoryFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.OperatingSystemFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.ProccesorFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.MemoryFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.GraphicsFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.CommunicationFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.SoundFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.ContractFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.OtherFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel, "Documents")
    @Html.EditorFor(m => m.ComputerViewModel.ContactInformationFieldsModel, new { ComputerId = Model.ComputerViewModel.Id })
    @Html.EditorFor(m => m.ComputerViewModel.OrganizationFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.PlaceFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.ContactFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.StateFieldsViewModel)

    


    if (Model.ComputerViewModel.CreatedDate.Show || Model.ComputerViewModel.ChangedDate.Show || Model.ComputerViewModel.DateFieldsModel.ScanDate.Show ||
            Model.ComputerViewModel.DateFieldsModel.SynchronizeDate.Show || Model.ComputerViewModel.DateFieldsModel.PathDirectory.Show)
    {
        <h4>@Translation.GetCoreTextTranslation("Status")</h4>
    }
    <div class="row">
        <div class="span12">
            <table class="tableform">
                @if (Model.ComputerViewModel.CreatedDate.Show)
                {
                    <tr>
                        <td class="span3">
                            <label>@Translation.GetCoreTextTranslation(Model.ComputerViewModel.CreatedDate.Caption)</label>
                        </td>
                        <td class="span9">
                            @Html.DisplayFor(m => m.ComputerViewModel.CreatedDate.Value, "Date")
                        </td>
                    </tr>
                }
                @if (Model.ComputerViewModel.ChangedDate.Show)
                {
                    <tr>
                        <td class="span3">
                            <label>@Translation.GetCoreTextTranslation(Model.ComputerViewModel.ChangedDate.Caption)</label>
                        </td>
                        <td class="span9">
                            @Html.DisplayFor(m => m.ComputerViewModel.ChangedDate.Value, "Date")
                        </td>
                    </tr>
                    if (Model.ComputerViewModel.ChangedByUserName != null)
                    {
                        <tr>
                            <td class="span3">
                                <label>@Translation.GetCoreTextTranslation("Changed by")</label>
                            </td>
                            <td class="span9">
                                @Html.DisplayFor(m => m.ComputerViewModel.ChangedByUserName.FirstName) @Html.DisplayFor(m => m.ComputerViewModel.ChangedByUserName.LastName)
                            </td>
                        </tr>
                    }
                }
            </table>
        </div>
    </div>
    @Html.EditorFor(m => m.ComputerViewModel.DateFieldsModel)
}

@section Scripts
{
    @Scripts.Render(BundleConfig.ScriptNames.InventoryWorkstation)
    <script type="text/javascript">

        window.parameters = (window.parameters == null ? {} : window.parameters);
        window.parameters.fileUploadWhiteList = [];

        @if (Model.FileUploadWhiteList != null)
        {
            foreach(var extension in Model.FileUploadWhiteList)
            {
                @:window.parameters.fileUploadWhiteList.push('@extension');
            }
        }
        else
        {
            @:window.parameters.fileUploadWhiteList = null;
        }


        $(function(jQuery) {
            window.workstationEdit = new WorkstationEdit($);
            window.workstationEdit.init({
                userId: @SessionFacade.CurrentUser.Id,
                customerId: @SessionFacade.CurrentCustomer.Id,
                getUnitsUrl: '@Url.Action("GetUnits", "Ajax", new {area = ""})',
                getDepartmentsUrl: '@Url.Action("GetDepartments", "Ajax", new {area = ""})'
            });
        });
    </script>

    @if (documentModel.Show)
    {
        @Html.Partial("_InventoryFiles")
        @Scripts.Render(BundleConfig.ScriptNames.InventoryFiles)
        <script type="text/javascript">

            var inventoryFilesOptions = {
                id: @Model.Id.ToString(),
                attachedFileName: '@(documentModel.Value)',
                currentLanguageId: '@Model.CurrentLanguageId',
                documentFileKey: '', //uses id instead
                uploadDocumentFileUrl: '@Url.Action("UploadFile", "Workstation")',
                fileDownloadUrlMask: '@Url.Action("DownloadFile", "Workstation")',
                fileDeleteUrl: '@Url.Action("DeleteFile", "Workstation")'
            };

            $(function(jQuery) {
                // create instance and init
                window.inventoryFiles = new InventoryFiles(jQuery);
                window.inventoryFiles.init(inventoryFilesOptions);
            });

        </script>
    }
}

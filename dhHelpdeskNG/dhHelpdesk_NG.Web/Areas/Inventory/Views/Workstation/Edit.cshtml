@using System.Web.Optimization
@using DH.Helpdesk.Web.Infrastructure.Extensions.HtmlHelperExtensions
@using DH.Helpdesk.Web
@using DH.Helpdesk.Web.Infrastructure
@model DH.Helpdesk.Web.Areas.Inventory.Models.EditModel.Computer.ComputerEditViewModel

@{
    Layout = "~/Areas/Inventory/Views/Workstation/_EditWorkstationLayout.cshtml";
    var documentModel = Model.ComputerViewModel.ContractFieldsViewModel.ContractFieldsModel.Document;
}

@section Actions
{
    <ul class="secnav">
        @if (Model.UserHasInventoryAdminPermission)
        {
            <li id="menu1">
                <input type="submit" value="@Translation.GetCoreTextTranslation("Spara")" class="btn" onclick="workstationEdit.submit()" />
            </li>
            if (!Model.IsForDialog)
            {
                <li id="menu3">
                    @Html.ActionLink(Translation.GetCoreTextTranslation("Ta bort"), "Delete", new { id = Model.ComputerViewModel.Id }, new
                    { @class = "btn deleteDialog", deleteDialogText = Translation.GetCoreTextTranslation("Är du säker på att du vill ta bort aktuell post") + "?" })
                </li>
            }
        }
        @if (Model.IsForDialog && !string.IsNullOrEmpty(Model.UserId))
        {
            <li id="menu2">@Html.ActionLink(Translation.GetCoreTextTranslation("Avbryt"), "RelatedInventoryFull", new { userId = Model.UserId }, new { @class = "btn" })</li>
        }
        @if (!Model.IsForDialog)
        {
            <li id="menu2">@Html.ActionLink(Translation.GetCoreTextTranslation("Avbryt"), "Index", null, new { @class = "btn" })</li>
        }
    </ul>
}

@using (Html.BeginForm("Edit", "Workstation", FormMethod.Post, new { id = "workstation_edit_form" }))
{
    @Html.HiddenFor(m => m.ComputerViewModel.IsForDialog)
    @Html.HiddenFor(m => m.ComputerViewModel.UserId)
    @Html.HiddenFor(m => m.ComputerViewModel.Id)
    @Html.HiddenFor(m => m.Id)
    @Html.Hidden("DocumentFileKey", Model.ComputerViewModel.DocumentFileKey)

    @Html.EditorFor(m => m.ComputerViewModel.WorkstationFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.ChassisFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.InventoryFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.OperatingSystemFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.ProccesorFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.MemoryFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.GraphicsFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.CommunicationFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.SoundFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.ContractFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.OtherFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel, "Documents")
    @Html.EditorFor(m => m.ComputerViewModel.ContactInformationFieldsModel, new { ComputerId = Model.ComputerViewModel.Id })
    @Html.EditorFor(m => m.ComputerViewModel.OrganizationFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.PlaceFieldsViewModel)
    @Html.EditorFor(m => m.ComputerViewModel.ContactFieldsModel)
    @Html.EditorFor(m => m.ComputerViewModel.StateFieldsViewModel)




    if (Model.ComputerViewModel.CreatedDate.Show || Model.ComputerViewModel.ChangedDate.Show || Model.ComputerViewModel.DateFieldsModel.ScanDate.Show ||
            Model.ComputerViewModel.DateFieldsModel.SynchronizeDate.Show || Model.ComputerViewModel.DateFieldsModel.PathDirectory.Show)
    {
        <h4>@Translation.GetCoreTextTranslation("Status")</h4>
    }
    <div class="row">
        <div class="span12">
            <table class="tableform">
                @if (Model.ComputerViewModel.CreatedDate.Show)
                {
                    <tr>
                        <td class="span3">
                            <label>@Translation.GetCoreTextTranslation(Model.ComputerViewModel.CreatedDate.Caption)</label>
                        </td>
                        <td class="span9">
                            @Html.DisplayFor(m => m.ComputerViewModel.CreatedDate.Value, "Date")
                        </td>
                    </tr>
                }
                @if (Model.ComputerViewModel.ChangedDate.Show)
                {
                    <tr>
                        <td class="span3">
                            <label>@Translation.GetCoreTextTranslation(Model.ComputerViewModel.ChangedDate.Caption)</label>
                        </td>
                        <td class="span9">
                            @Html.DisplayFor(m => m.ComputerViewModel.ChangedDate.Value, "Date")
                        </td>
                    </tr>
                    if (Model.ComputerViewModel.ChangedByUserName != null)
                    {
                        <tr>
                            <td class="span3">
                                <label>@Translation.GetCoreTextTranslation("Changed by")</label>
                            </td>
                            <td class="span9">
                                @Html.DisplayFor(m => m.ComputerViewModel.ChangedByUserName.FirstName) @Html.DisplayFor(m => m.ComputerViewModel.ChangedByUserName.LastName)
                            </td>
                        </tr>
                    }
                }
            </table>
        </div>
    </div>
    @Html.EditorFor(m => m.ComputerViewModel.DateFieldsModel)
}

@section Scripts
{
    @Scripts.Render(BundleConfig.ScriptNames.InventoryWorkstation)
    <script type="text/javascript">

        window.parameters = (window.parameters == null ? {} : window.parameters);
        window.parameters.fileUploadWhiteList = [];
        window.parameters.invalidFileExtensionText = '@Html.Raw(Translation.GetForJS("har inte en giltig filändelse"))';

        @if (Model.FileUploadWhiteList != null)
        {
            foreach (var extension in Model.FileUploadWhiteList)
            {
                @:window.parameters.fileUploadWhiteList.push('@extension');
            }
        }
        else
        {
            @:window.parameters.fileUploadWhiteList = null;
        }


        $(function (jQuery) {
            $('#@Html.IdFor(m => m.ComputerViewModel.CommunicationFieldsViewModel.CommunicationFieldsModel.MacAddress.Value)')
                .attr("data-val-uniquemac", '@string.Format(" {0} {1}", Html.PureFieldCaption(Model.ComputerViewModel.CommunicationFieldsViewModel.CommunicationFieldsModel.MacAddress), Translation.GetCoreTextTranslation("måste vara unikt"))');

            $.validator.unobtrusive.adapters.add("uniquemac", [], function (options) {
                options.rules["uniquemac"] = true;
                options.messages["uniquemac"] = options.message;
            });

            $.validator.addMethod("uniquemac",
                function (value, element, param) {
                    var validator = this;
                    if (!value) {
                        var submitted = validator.formSubmitted;
                        validator.prepareElement(element);
                        validator.formSubmitted = submitted;
                        validator.successList.push(element);
                        delete validator.invalid[element.name];
                        validator.showErrors();
                        return true;
                    }
                    var previous = this.previousValue(element);
                    if (!this.settings.messages[element.name]) {
                        this.settings.messages[element.name] = {};
                    }
                    previous.originalMessage = this.settings.messages[element.name].uniquemac;
                    if (previous.old === value) {
                        return previous.valid;
                    }
                    previous.old = value;
                    this.startRequest(element);
                    var valid = "pending";
                    $.get('@Url.Action("ValidateMacAddress", "Workstation")',
                        {
                            macAddress: value,
                            currentId: @Model.Id
                        },
                        function (response) {
                            validator.settings.messages[element.name].uniquemac = previous.originalMessage;
                            valid = response === true || response === "true";
                            if (valid) {
                                var submitted = validator.formSubmitted;
                                validator.prepareElement(element);
                                validator.formSubmitted = submitted;
                                validator.successList.push(element);
                                delete validator.invalid[element.name];
                                validator.showErrors();
                            } else {
                                var errors = {};
                                var message = response || validator.defaultMessage(element, "uniquemac");
                                errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
                                validator.invalid[element.name] = true;
                                validator.showErrors(errors);
                            }
                            previous.valid = valid;
                            validator.stopRequest(element, valid);
                        },
                        'json');
                    return valid;
                }
            );
            $('#workstation_edit_form')
                .removeData("validator")
                .removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse($('#workstation_edit_form'));

            window.workstationEdit = new WorkstationEdit($);
            window.workstationEdit.init({
                id: @Model.Id,
                userId: @SessionFacade.CurrentUser.Id,
                customerId: @SessionFacade.CurrentCustomer.Id,
                getUnitsUrl: '@Url.Action("GetUnits", "Ajax", new {area = ""})',
                getDepartmentsUrl: '@Url.Action("GetDepartments", "Ajax", new {area = ""})',
                validateMacAddressUrl: '@Url.Action("ValidateMacAddress", "Workstation")',
                fieldsIds: {
                    'MacAddressId':
                        '@Html.IdFor(m => m.ComputerViewModel.CommunicationFieldsViewModel.CommunicationFieldsModel.MacAddress.Value)'
                },
            });

            // TODO: Move this section to WorkstationEdit
            $('#@Html.IdFor(m => m.ComputerViewModel.ContractFieldsViewModel.ContractFieldsModel.PurchasePrice.Value)')
                .prop('type', 'number');

            // TODO: Move this section to WorkstationEdit
            $("#@Html.IdFor(m => m.ComputerViewModel.WorkstationFieldsViewModel.WorkstationFieldsModel.ComputerTypeId.Value)")
                .change(function() {

                    if (this.value > 0) {
                        $.get('@Url.Action("GetPrice", "Workstation")',
                            { id: this.value },
                            function(data) {
                                $(
                                        '#@Html.IdFor(m => m.ComputerViewModel.ContractFieldsViewModel.ContractFieldsModel.PurchasePrice.Value)')
                                    .val(data);
                            });
                    } else {
                        $(
                                '#@Html.IdFor(m => m.ComputerViewModel.ContractFieldsViewModel.ContractFieldsModel.PurchasePrice.Value)')
                            .val(0);
                    }
                });
        });
    </script>

    @if (documentModel.Show)
    {
        @Html.Partial("_InventoryFiles")
        @Scripts.Render(BundleConfig.ScriptNames.InventoryFiles)
        <script type="text/javascript">

            var inventoryFilesOptions = {
                id: @Model.Id.ToString(),
                attachedFileName: '@(documentModel.Value)',
                currentLanguageId: '@Model.CurrentLanguageId',
                documentFileKey: '', //uses id instead
                uploadDocumentFileUrl: '@Url.Action("UploadFile", "Workstation")',
                fileDownloadUrlMask: '@Url.Action("DownloadFile", "Workstation")',
                fileDeleteUrl: '@Url.Action("DeleteFile", "Workstation")'
            };

            $(function(jQuery) {
                // create instance and init
                window.inventoryFiles = new InventoryFiles(jQuery);
                window.inventoryFiles.init(inventoryFilesOptions);
            });

        </script>
    }
}

@using System.Web.Optimization
@using DH.Helpdesk.Common.Enums
@using DH.Helpdesk.Web.Models.Faq.Output
  
<script type="text/javascript">
    var _pluploadFAQ;

    function afterSuccessSubmit(result, state, response) {
        window.returnValue = result;
        try {
            window.opener.NewFAQEvent(result);
        }
        catch (err) { }
        window.close();
        return false;
    }

    $(document).ready(function () {
        FAQInitForm();        
    });

    function FAQInitForm() {
        
        var getFAQFiles = function () {
            $.get('/FAQ/Files', { faqId: $('#FAQKey').val(), now: Date.now() }, function (data) {
                $('#divFAQFiles').html(data);
                bindDeleteFAQFileBehaviorToDeleteButtons();
            });
        };

        $('#upload_FAQfiles_popup').on('hide', function () {

            if (_pluploadFAQ != undefined) {
                if (_pluploadFAQ.pluploadQueue().files.length > 0) {
                    if (_pluploadFAQ.pluploadQueue().state == plupload.UPLOADING) {
                        _pluploadFAQ.pluploadQueue().stop();
                        for (var i = 0; i < _pluploadFAQ.pluploadQueue().files.length; i++) {
                            _pluploadFAQ.pluploadQueue().removeFile(_pluploadFAQ.pluploadQueue().files[i]);
                        }
                        _pluploadFAQ.pluploadQueue().refresh();
                    }
                }
            }
        });

        //PluploadTranslation($('#CurLanguageId').val());

        $('#upload_FAQfiles_popup').on('show', function () {
            
            _pluploadFAQ = $('#FAQfile_uploader').pluploadQueue({
                runtimes: 'html5,html4',
                url: '/FAQ/UploadFile',

                multipart_params: { faqId: $('#FAQKey').val() },
                filters: {
                    max_file_size: '10mb',
                },
                buttons: { browse: true, start: true, stop: true, cancel: true },
                preinit: {
                    Init: function (up, info) {
                        //console.log('1:init', info);                    
                    },


                    UploadFile: function (up, file) {

                        var strFiles = $('#FAQFileNames').val();
                        if (strFiles != undefined) {
                            var allFileNames = strFiles.split('|');

                            var fn = file.name;

                            for (var i = 0; i < allFileNames.length; i++) {
                                if (fn == allFileNames[i]) {
                                    var findName = false;
                                    for (var j = 1; j < 100 && !findName; j++) {
                                        findName = true;
                                        for (var k = 0; k < allFileNames.length; k++) {
                                            if (j.toString() + '-' + fn == allFileNames[k])
                                                findName = false;
                                        }

                                        if (findName) {
                                            var d = getNow().toString();
                                            file.name = d + '-' + fn;
                                        }
                                    } // for j
                                }
                            } // for i
                        }
                        $('#FAQFileNames').val(strFiles + "|" + file.name);
                    },

                    UploadComplete: function (up, file) {

                        //console.log('3:uploaded complete',file.name);
                        //plupload_add
                        $(".plupload_buttons").css("display", "inline");
                        $(".plupload_upload_status").css("display", "inline");
                        up.refresh();
                    }
                },
                init: {
                    FileUploaded: function () {
                        getFAQFiles();
                    },

                    Error: function (uploader, e) {
                        if (e.status != 409) {
                            return;
                        }
                    },

                    StateChanged: function (uploader) {
                        if (uploader.state != plupload.STOPPED) {
                            return;
                        }
                        uploader.refresh();
                    }
                }
            });
            
        });
        
        bindDeleteFAQFileBehaviorToDeleteButtons();

    }
</script>

@Html.Partial("_Plupload")

@{
    Layout = "../Shared/_PopupLayout.cshtml";
    //ViewBag.Title = Translation.Get("Ny FAQ", Enums.TranslationSource.TextTranslation);
    ViewBag.Title = "";
    var err = (string)ViewData["Err"];

}

<div class="faq">
    @using (Ajax.BeginForm("NewFAQ", "Faq", new AjaxOptions { OnSuccess = "afterSuccessSubmit" }))
    {
        <div class="navbar fixed">
            <div class="navbar-container">
                <a href="/">
                    <div class="navbar-header pull-left navbar-brand">
                    </div>
                </a>
            </div>
        </div>
        <div class="secnavs fixed">
            <div class="pull-left">
                <ul class="secnav">
                    <li>
                        @if (string.IsNullOrEmpty(err))
                        {
                           <input type="submit" value="@Translation.Get("Spara", Enums.TranslationSource.TextTranslation)" class="btn" />
                        }
                    </li>
                    <li>
                        <input type="button" onclick=" window.close()" value="@Translation.Get("Avbryt", Enums.TranslationSource.TextTranslation)" class="btn" />
                    </li>
                </ul>
            </div>
        </div>
        
        if (string.IsNullOrEmpty(err))
        {
           @Html.Partial("FaqEditing", new EditingFaqModel(this.Model.TemporaryId, this.Model.Categories, string.Empty, string.Empty, string.Empty, new List<string>(0), string.Empty, string.Empty, this.Model.WorkingGroups, false, false, null, LanguageIds.Swedish))
        }
        else
        {            
            <div class="content">
                <div class="container">
                    <ul class="secnav">
                        <li>
                            @err
                        </li>
                    </ul>                
                </div>
            </div>
        }
    }
</div>
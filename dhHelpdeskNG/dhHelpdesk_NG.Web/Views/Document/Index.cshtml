@model DH.Helpdesk.Web.Models.DocumentInputViewModel
@using DH.Helpdesk.Web.Infrastructure
@using DH.Helpdesk.Web.Infrastructure.Extensions.HtmlHelperExtensions
@{
    ViewBag.Title = "Index";

    var menu1Style = "";
    var menu2Style = "";
    
    var menu1TabClass = "";
    var menu2TabClass = "";
    
    switch (Model.ActiveTab)
    {
        case "CategoriesTab":
            menu2Style = "display: block";
            menu1Style = "display: none";
            menu2TabClass = "active";
            menu1TabClass = "";
            break;
            
        default:
            menu1Style = "display: block";
            menu2Style = "display: none";
            menu1TabClass = "active";
            menu2TabClass = "";
            
            break;                              
    }
             
}

<div class="secnavs fixed">
    <div class="pull-left">
        <ul class="secnav">
            <li id="menu1" style="@menu1Style">@Html.ActionLink(Translation.Get("Lägg till", Enums.TranslationSource.TextTranslation) + " " + 
                                                                Translation.Get("dokument", Enums.TranslationSource.TextTranslation),
                                                                "new", null, new { @class = "btn" })
            </li>

            <li id="menu2" style="@menu2Style">@Html.ActionLink(Translation.Get("Lägg till", Enums.TranslationSource.TextTranslation) + " " +  
                                                                Translation.Get("Dokument", Enums.TranslationSource.TextTranslation)  + " " +  
                                                                Translation.Get("kategori", Enums.TranslationSource.TextTranslation) ,
                                                                "newcategory", null, new { @class = "btn" })
            </li>
        </ul>
    </div>
</div>
<div class="content">
    <div class="container">
        <ul class="nav nav-tabs" id="myTab">
            <li id="DocumentTab" class="@menu1TabClass" >
                <a href="#fragment-1">@Translation.Get("Dokument", Enums.TranslationSource.TextTranslation)</a>
            </li>
            <li id="CategoriesTab" class="@menu2TabClass">
                <a href="#fragment-2">@Translation.Get("Kategorier", Enums.TranslationSource.TextTranslation)</a>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane tab-pane-border @menu1TabClass" id="fragment-1">

                @using (Html.BeginForm("index", "document", FormMethod.Post, new { id = "docOverview" }))
                {                    
                    <div>
                        &nbsp;
                        &nbsp;
                    </div>
                    <div class="container">
                        <div class="row-fluid">                        
                            <div class="span3">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>
                                                @Translation.Get("Kategorier", Enums.TranslationSource.TextTranslation)
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>
                                                @this.Html.CustomDocumentTree("categories_tree", true, this.Model.DocumentTree,@Model.CurrentItemName)
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            
                            <div class="span9">
                                @this.Html.Partial("_DocumentListOverview", Model)
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="tab-pane tab-pane-border @menu2TabClass" id="fragment-2">
                <table class="table table-striped table-bordered table-hover" id="tbldocumentCategory">
                    <thead>
                        <tr>
                            <th>
                                @Translation.Get("Dokument", Enums.TranslationSource.TextTranslation)    
                                @Translation.Get("kategori", Enums.TranslationSource.TextTranslation) 
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var items in Model.DocumentCategories)
                        {
                            <tr>
                                <td>
                                    <a href="@Url.Action("editcategory", "document", new { id = items.Id })">@Html.DisplayFor(modelItem => items.Name)</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>            
        </div>
    </div>
</div>
<script type="text/javascript">

    function SortCol(colName) {               

        $.get('@this.Url.Action("SortDocList")',
               {
                   docType: $('#SelectedListType').val(),
                   Id: $('#SelectedCategory').val(),
                   sortedColumn: colName
               }, function (docs) {
                   $("#docOverview").submit();
                   //refreshDocsTable(docs, $('#SelectedListType').val(), $('#SelectedCategory').val(), colName);
        });
    }

    $('#DocumentTab').click(function () {
        $.post("/Document/RememberTab", { topic: "Document", tab: "DocumentTab" });
        $('#menu1').show();
        $('#menu2').hide();
    });

    $('#CategoriesTab').click(function () {
        $.post("/Document/RememberTab", { topic: "Document", tab: "CategoriesTab" });
        $('#menu2').show();
        $('#menu1').hide();
    });


    $('a[class="tree-node"], a[class="tree-selected-node"]', '#categories_tree').click(function () {
        
        var selectedItem = $(this).siblings('input').val();
        
        var curListType = 0;        
        var selected = selectedItem.split(",");

        switch (selected[0]) {
            case "Root":
                curListType = 0;
                break;

            case "Category":
                curListType = 1;
                break;            
        }

        location.href = "/document?listType=" + curListType + "&Id=" + selected[1];
    });

    //function refreshDocsTable(docs, listType, catId, sortCol) {
        
    //    var docsTable = $('#tbldocument');
    
    //    //************ Document Table Rows ****************
    //    docsTable.children('tbody').remove();                                                  

    //    for (var i = 0; i < docs.length; i++) 
    //    {
            
    //        var doc = docs[i];
    //        var s = doc.ChangedDate;                        
    //        var docMarkup = $(
    //            '<tr> ' +                       
                        
    //                '<td> <a onclick="showList(' + listType + ',' + doc.uniqueId + ')" href="/document/edit?Id=' + doc.Id + '">' + doc.DocName + '</a> </td> ' +

    //                '<td> <a onclick="showList(' + listType + ',' + doc.uniqueId + ')" href="/document/edit?Id=' + doc.Id + '">' + doc.Size + ' kb </a> </td> ' +

    //                '<td> <a onclick="showList(' + listType + ',' + doc.uniqueId + ')" href="/document/edit?Id=' + doc.Id + '">' + doc.ChangedDate + '</a> </td> ' +

    //                '<td> ' +  
    //                   '<a onclick="showList(' + listType + ',' + doc.uniqueId + ')" href="/document/edit?Id=' + doc.Id + '">' + doc.UserName + '</a> ' +
    //                   '<input type="hidden" id="SelectedCategory" value = "' + catId + '" /> ' +
    //                   '<input type="hidden" id="SelectedListType" value = "' + listType + '" /> ' +
    //                   '<input type="hidden" id="SortColName"  value = "' + sortCol + '" />  ' +
    //                '</td> ' +
    //            '</tr>' );

    //        docsTable.append(docMarkup);
    //    }

       
    //}


    $(document).ready(function () {
        //        tableOptions.sortable = false;
        //        tableOptions.pager = false;
        //$("#tbldocument").fixheadertable(tableOptions);
        //$("#tbldocumentCategory").fixheadertable(tableOptions);
    });

    $(function () {

        var validator = $("#target").validate({
            rules: {
                "Document.Name": {
                    required: true
                },
                "Document.DocumentId": {
                    required: true
                }
            },
            messages: {
                "Document.Name": {
                    required: "fel..."
                },
                "Document.DocumentId": {
                    required: "fel..."
                }
            },
            invalidHandler: function (form, validator) {
                var errors = validator.numberOfInvalids();
                if (errors) {
                    var invalidPanels = $(validator.invalidElements()).closest(".ui-tabs-panel", form);
                    if (invalidPanels.size() > 0) {
                        $.each($.unique(invalidPanels.get()), function () {
                            $(this).siblings(".ui-tabs-nav")
                                .find("a[href='#" + this.id + "']").parent().not(".ui-tabs-selected")
                                .addClass("ui-state-error")
                                .show("pulsate", { times: 3 });
                        });
                    }
                }
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass(errorClass);
                $(element.form).find("label[for=" + element.id + "]").removeClass(errorClass);
                var $panel = $(element).closest(".ui-tabs-panel", element.form);
                if ($panel.size() > 0) {
                    if ($panel.find("." + errorClass + ":visible").size() == 0) {
                        $panel.siblings(".ui-tabs-nav").find("a[href='#" + $panel[0].id + "']")
                            .parent().removeClass("ui-state-error");
                    }
                }
            },
            submitHandler: function (form) {
                form.submit();
            }
        });
    });

</script>

@model DH.Helpdesk.Web.Models.DocumentInputViewModel
@using DH.Helpdesk.Web.Infrastructure
@using DH.Helpdesk.Web.Infrastructure.Extensions.HtmlHelperExtensions
@{
    ViewBag.Title = "Index";
}
<div class="secnavs fixed">
    <div class="pull-left">
        <ul class="secnav">
            <li id="menu1" style="display: block">@Html.ActionLink(Translation.Get("Lägg till", Enums.TranslationSource.TextTranslation) + " " + Translation.Get("dokument", Enums.TranslationSource.TextTranslation), "new", null, new { @class = "btn" })</li>
            <li id="menu2" style="display: none">@Html.ActionLink(Translation.Get("Lägg till", Enums.TranslationSource.TextTranslation) + " " + Translation.Get("dokumentkategori", Enums.TranslationSource.TextTranslation), "newcategory", null, new { @class = "btn" })</li>
        </ul>
    </div>
</div>
<div class="content">
    <div class="container">
        <ul class="nav nav-tabs" id="myTab">
            <li class="active" onclick="$('#menu1').show(); $('#menu2').hide();"><a href="#fragment-1">@Translation.Get("Dokument", Enums.TranslationSource.TextTranslation)</a></li>
            <li onclick="$('#menu2').show(); $('#menu1').hide();"><a href="#fragment-2">@Translation.Get("Kategorier", Enums.TranslationSource.TextTranslation)</a></li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane tab-pane-border active" id="fragment-1">

                @using (Html.BeginForm("index", "document", FormMethod.Post))
                {
                    <div class="filterContent">
                        <table>
                            <tr>
                                <td>
                                    <input type="text" class="CellText" name="txtSearch" @*value="@Model.Search.Query"*@ />
                                </td>
                                <td>
                                    <input type ="button" value="@Translation.Get("Sök", Enums.TranslationSource.TextTranslation)" class="btn"/>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div>
                        &nbsp;
                        &nbsp;
                    </div>
                    <div class="container">
                        <div class="row">                        
                            <div class="span4">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>
                                                @Translation.Get("Kategorier", Enums.TranslationSource.TextTranslation)
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>
                                                @this.Html.CustomDocumentTree("categories_tree", true, this.Model.DocumentTree,Model.CurrentItemName)
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            
                            <div class="span12">
                                @this.Html.Partial("_DocumentListOverview", Model)
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="tab-pane tab-pane-border" id="fragment-2">
                <table class="table table-striped table-bordered table-hover" id="tbldocumentCategory">
                    <thead>
                        <tr>
                            <th>
                                @Translation.Get("Dokumentkategori", Enums.TranslationSource.TextTranslation)
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var items in Model.DocumentCategories)
                        {
                            <tr>
                                <td>
                                    <a href="@Url.Action("editcategory", "document", new { id = items.Id })">@Html.DisplayFor(modelItem => items.Name)</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    $('a[class="tree-node"], a[class="tree-selected-node"]', '#categories_tree').click(function () {
        var selectedItem = $(this).siblings('input').val();
        //alert("ok");
        var curListType = 0;        
        var newListType = 0;        
        var selected = selectedItem.split(",");

        switch (selected[0]) {
            case "Root":
                curListType = 0;
                newListType = 1;
                break;

            case "Category":
                curListType = 1;
                newListType = 2;
                break;

            case "Document":
                curListType = 2;
                break;
        }

        
        $.get('@this.Url.Action("GetDocList")', { docType: curListType, Id: selected[1] }, function (docs) {            
            refreshDocsTable(docs, newListType);
        });
        
    });

    function refreshDocsTable(docs, listType) {
        var docsTable = $('#tbldocument');
        docsTable.children('tbody').remove();
        //alert(docs.length);

        var backMarkup = $(
                    '<tr> ' +
                       '<td> <i class="icon-folder-close icon-yellow"/> </td> ' +

                       '<td> ... </td> ' +

                       '<td> </td> ' +

                       '<td> </td> ' +

                       '<td> </td> ' +
                    '</tr> ');
        docsTable.append(backMarkup);

        if (listType == 1)
        {            
            for (var i = 0; i < docs.length; i++) 
            {
                var doc = docs[i];

                var docMarkup = $(
                    '<tr> ' +

                       '<td> <i class="icon-folder-close icon-yellow"/> </td> ' +
                        
                       '<td> <a onclick="showList(' + listType + ',' + doc.Id + ')" href="#">' + doc.DocName + '</a> </td> ' +

                       '<td> <a onclick="showList(' + listType + ',' + doc.Id + ')" href="#">' + doc.Size + '</a> </td> ' +

                       '<td> <a onclick="showList(' + listType + ',' + doc.Id + ')" href="#">' + doc.ChangedDate + '</a> </td> ' +

                       '<td> <a onclick="showList(' + listType + ',' + doc.Id + ')" href="#">' + doc.UserName + '</a> </td> ' +
                    '</tr>' );

                docsTable.append(docMarkup);
            }
        }

        if (listType == 2)
        {
            
            for (var i = 0; i < docs.length; i++) {
                var doc = docs[i];                

                var docMarkup = $(
                    '<tr> ' +

                       '<td> <i class="icon-list-alt icon-dh"/> </td> ' +

                       '<td> <a href="@this.Url.Action("edit")?Id=' + doc.Id + '">' + doc.DocName + '</a> </td> ' +

                       '<td> <a href="@this.Url.Action("edit")?Id=' + doc.Id + '">' + doc.Size + '</a> </td> ' +

                       '<td> <a href="@this.Url.Action("edit")?Id=' + doc.Id + '">' + doc.ChangedDate + '</a> </td> ' +

                       '<td> <a href="@this.Url.Action("edit")?Id=' + doc.Id + '">' + doc.UserName + '</a> </td> ' +
                    '</tr>');

                docsTable.append(docMarkup);
            }
        }
    }


    function showList (listType, id)
    {        
        
        $.get('@this.Url.Action("GetDocList")', { docType: listType, Id: id }, function (docs) {
            refreshDocsTable(docs, 2);
        });

    }

    $(document).ready(function () {
        //        tableOptions.sortable = false;
        //        tableOptions.pager = false;
        //$("#tbldocument").fixheadertable(tableOptions);
        //$("#tbldocumentCategory").fixheadertable(tableOptions);
    });

    $(function () {

        var validator = $("#target").validate({
            rules: {
                "Document.Name": {
                    required: true
                },
                "Document.DocumentId": {
                    required: true
                }
            },
            messages: {
                "Document.Name": {
                    required: "fel..."
                },
                "Document.DocumentId": {
                    required: "fel..."
                }
            },
            invalidHandler: function (form, validator) {
                var errors = validator.numberOfInvalids();
                if (errors) {
                    var invalidPanels = $(validator.invalidElements()).closest(".ui-tabs-panel", form);
                    if (invalidPanels.size() > 0) {
                        $.each($.unique(invalidPanels.get()), function () {
                            $(this).siblings(".ui-tabs-nav")
                                .find("a[href='#" + this.id + "']").parent().not(".ui-tabs-selected")
                                .addClass("ui-state-error")
                                .show("pulsate", { times: 3 });
                        });
                    }
                }
            },
            unhighlight: function (element, errorClass, validClass) {
                $(element).removeClass(errorClass);
                $(element.form).find("label[for=" + element.id + "]").removeClass(errorClass);
                var $panel = $(element).closest(".ui-tabs-panel", element.form);
                if ($panel.size() > 0) {
                    if ($panel.find("." + errorClass + ":visible").size() == 0) {
                        $panel.siblings(".ui-tabs-nav").find("a[href='#" + $panel[0].id + "']")
                            .parent().removeClass("ui-state-error");
                    }
                }
            },
            submitHandler: function (form) {
                form.submit();
            }
        });
    });

</script>

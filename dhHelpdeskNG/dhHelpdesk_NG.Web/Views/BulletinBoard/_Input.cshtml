@using DH.Helpdesk.Web.Infrastructure
@model DH.Helpdesk.Web.Models.BulletinBoardInputViewModel
@if (TempData["Error"] != null)
{
    <div class="alert alert-error">
        @Translation.Get("Anslagstavla")
        @Translation.Get("som används går inte att ta bort")
    </div>
}

<script language="javascript">
    $(function () {
        tinymce.on('addeditor', function (event) {
            var editor = event.editor;
            editor.settings.maxLength = 4000;
            var f = function (e) {
                var content = editor.getContent();
                if (content.length > editor.settings.maxLength) {
                    $('.btn.save').attr('disabled', true);
                }
                else {
                    $('.btn.save').attr('disabled', false);
                }

            };
            editor.on('Change', f);
            editor.on('KeyUp', f);
            editor.on('NodeChange', f);
        }, true);
    });
</script>
<div class="bulletinboard content">
    <div class="container">
        <ul class="nav nav-tabs" id="myTab">
            <li class="active"><a href="#fragment-1">@Translation.Get("Anslagstavla")</a></li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane tab-pane-border active" id="fragment1">
                <div class="container">
                    <h4>@Translation.Get("Anslagstavla")</h4>
                    <div class="row">
                        <div class="span12">
                            <table class="tableform">
                                <tr>
                                    <td class="span3">
                                        @Translation.Get("Visa fr.o.m") *
                                    </td>
                                    <td class="span9">
                                        @Html.EditorFor(model => model.BulletinBoard.ShowDate, "DatePicker", new { id = "divBulletinBoard_ShowDate" })
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Translation.Get("Visa t.o.m") *
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.BulletinBoard.ShowUntilDate, "DatePicker", new { id = "divBulletinBoard_ShowUntilDate" })
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Translation.Get("Anslagstavla") *
                                    </td>
                                    <td>
                                        @Html.TextAreaFor(model => model.BulletinBoard.Text, new { style = "width:600px; height:250px;", @class = "richtexteditor" })
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Translation.Get("Visa")
                                    </td>
                                    <td class="checkbox" style="padding-left: 20px">
                                        <input type="checkbox" name="BulletinBoard.ShowOnStartPage" @(Model.BulletinBoard.ShowOnStartPage == 1 ? "checked=checked" : "") value="1" />
                                        <input type="hidden" name="BulletinBoard.ShowOnStartPage" value="0" />
                                        &nbsp;@Translation.Get("Visa på startsidan")
                                    </td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td class="checkbox" style="padding-left: 20px">
                                        <input type="checkbox" name="BulletinBoard.PublicInformation" @(Model.BulletinBoard.PublicInformation == 1 ? "checked=checked" : "") value="1" />
                                        <input type="hidden" name="BulletinBoard.PublicInformation" value="0" />
                                        &nbsp;@Translation.Get("Visa på självservice")
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <h4>@Translation.Get("Säkerhet")</h4>
                    <div class="row">
                        <div class="span12">
                            <table class="tableform" id="security">
                                <tr>
                                    <td class="span3">
                                        @Translation.Get("Driftgrupp")
                                    </td>
                                    <td>
                                        @Translation.Get("Tillgängliga")
                                    </td>
                                    <td></td>
                                    <td>
                                        @Translation.Get("Valda")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <input type="checkbox" id="LimitWGs"> @Translation.Get("Begränsa rättigheter till")<br>
                                        <input type="hidden" id="userGroupId" value="@Model.CurrentUser.UserGroup_Id" />
                                    </td>
                                    <td>
                                        @Html.ListBox("WGsAvailable", Model.WGsAvailable, new { style = "width: 340px; height: 150px" })
                                    </td>
                                    <td>
                                        <input type="button" value="&gt;" id="addWGs" class="btn" /><br />
                                        <input type="button" value="&lt;" id="removeWGs" class="btn" />
                                    </td>
                                    <td>
                                        @Html.ListBox("WGsSelected", Model.WGsSelected, new { style = "width: 340px; height: 150px" })
                                    </td>
                                </tr>

                            </table>
                            @Html.HiddenFor(model => model.BulletinBoard.Customer_Id)
                            @Html.HiddenFor(model => model.BulletinBoard.Id)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {

        $.validator.addMethod('dateGreaterThan', function (value, element, param) {
            var fromDate = $("#divBulletinBoard_ShowDate").datepicker('getDate');
            var endDate = $("#divBulletinBoard_ShowUntilDate").datepicker('getDate');
            if (Date.parse(endDate) >= Date.parse(fromDate)) {
                return isValid;
            }

        }, '@Translation.GetForJS("Var vänlig ange ett giltigt datum")');

        $('.btn.save').on('click', function () {
            if (!$(this).attr('disabled')) {
                $("#WGsSelected option").attr("selected", "selected");

                $("#target").submit();
            }

            return false;
        });

        $("#chkSecurity").click(function () {
            $("#securityOptions").toggle();
        });

        $("#addWGs").click(function () {
            $("#WGsAvailable option:selected").remove().appendTo("#WGsSelected");
            $("#WGsAvailable").get(0).selectedIndex = -1;
            $("#WGsSelected").get(0).selectedIndex = -1;
            return false;
        });

        $("#removeWGs").click(function () {
            $("#WGsSelected option:selected").remove().appendTo("#WGsAvailable");
            $("#WGsAvailable").get(0).selectedIndex = -1;
            $("#WGsAvailable").get(0).selectedIndex = -1;
            if ($("#WGsSelected option").length == 0) {
                $("#LimitWGs").attr("checked", false);
                $("#WGsAvailable").attr("disabled", true);
                $("#WGsSelected").attr("disabled", true);
                $("#WGsSelected").removeAttr('required');
                $("#WGsSelected").rules("remove");
            };

            return false;
        });

        $("#divBulletinBoard_ShowDate").on("change", function () {

            var validator = $("#target").data('validator');
            var controlId = "#" + this.id + " input:first";
            validator.element(controlId);
        });

        $("#LimitWGs").change(function () {
            if ($("#LimitWGs").attr("checked")) {
                $("#WGsAvailable").attr("disabled", false);
                $("#WGsSelected").attr("disabled", false);
                $("#WGsSelected").rules("add", {
                    required: true
                });
            } else {
                $("#WGsSelected option").remove().appendTo("#WGsAvailable");
                $("#WGsAvailable").attr("disabled", true);
                $("#WGsSelected").attr("disabled", true);

                $("#WGsSelected").removeAttr('required');
                $("#WGsSelected").rules("remove");
            }
        });

        if ($("#WGsSelected option").length > 0) {
            $("#LimitWGs").attr("checked", true);
            $("#WGsAvailable").attr("disabled", false);
            $("#WGsSelected").attr("disabled", false);
        } else {
            if ($("#LimitWGs").attr('checked'))
            {
                $("#WGsAvailable").attr("disabled", false);
                $("#WGsSelected").attr("disabled", false);
            }
            else
            {
                $("#WGsAvailable").attr("disabled", true);
                $("#WGsSelected").attr("disabled", true);
            }
        }
        $("#target").data('validator', null);
        var validator = $("#target")
            .submit(function () {
                // update underlying textarea before submit validation
                tinyMCE.triggerSave();
            })
            .validate({
                ignore: "",
                rules: {
                    "BulletinBoard.Text": 'required',
                    "BulletinBoard.ShowDate": {
                        'required': true,
                        'date': true
                    },
                    "BulletinBoard.ShowUntilDate": {
                        'required': true,
                        'date': true,
                        'dateGreaterThan': true
                    },
                    "WGsSelected": { 'required': $("#LimitWGs").attr('checked') === "checked" }
                },
                messages: {
                    'BulletinBoard.ShowDate': {
                        required: '@( string.Format("{0} {1}", Translation.GetForJS("Du måste ange"), Translation.GetForJS("Visa fr.o.m") ))',
                        date: '@Translation.GetForJS("Var vänlig ange ett giltigt datum")'
                    },
                    'BulletinBoard.ShowUntilDate': {
                        required: '@( string.Format("{0} {1}", Translation.GetForJS("Du måste ange"), Translation.GetForJS("Visa t.o.m") ))',
                        date: '@Translation.GetForJS("Var vänlig ange ett giltigt datum")',
                        dateGreaterThan: '@Translation.GetForJS("Var vänlig ange ett giltigt datum")'
                    },
                    "BulletinBoard.Text": {
                        required: '@( string.Format("{0} {1}", Translation.GetForJS("Du måste ange"), Translation.GetForJS("Anslagstavla") ))'
                    },
                    "WGsSelected": {
                        required: '@( string.Format("{0} {1}", Translation.GetForJS("Du måste ange"), Translation.GetForJS("Driftgrupp") ))'
                    }
                },
                errorPlacement: function (error, element) {
                    if (element.is("textarea")) {
                        element.parent().prepend(error);
                    } else if (element.parent().hasClass('date')) {
                        element.parent().append(error);
                    } else {
                        error.insertAfter(element);
                    }
                },
                submitHandler: function (form) {
                    form.submit();
                }
            });
            validator.focusInvalid = function() {
                // put focus on tinymce on submit validation
                if (this.settings.focusInvalid) {
                    try {
                        var toFocus = $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []);
                        if (toFocus.is("textarea")) {
                            tinyMCE.get(toFocus.attr("id")).focus();
                        } else {
                            toFocus.filter(":visible").focus();
                        }
                    } catch (e) {
                        // ignore IE throwing errors when focusing hidden elements
                    }
                }
        };

        if ($("#chkSecurity").is(":checked"))
            $("#securityOptions").show();
    });
</script>

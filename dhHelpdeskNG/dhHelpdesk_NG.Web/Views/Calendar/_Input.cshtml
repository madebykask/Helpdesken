@model DH.Helpdesk.Web.Models.CalendarInputViewModel
@if (TempData["Error"] != null)
{
    <div class="alert alert-error">
        @Translation.Get("Händelse")
        @Translation.Get("som används går inte att ta bort")
    </div>    
}
<div class="content">
    <div class="container">
        <ul class="nav nav-tabs" id="myTab">
            <li class="active"><a href="#fragment-1">@Translation.Get("Ny händelse")</a></li>            
        </ul>
        <div class="tab-content">
            <div class="tab-pane tab-pane-border active" id="fragment1">
                <div class="container">
                    <h4>@Translation.Get("Aktuellt")</h4>
                    <div class="row">
                        <div class="span12">
                            <table class="tableform">
                                <tr>
                                    <td class="span3">
                                        @Translation.Get("Datum")
                                    </td>
                                    <td class="span9">
                                        @Html.EditorFor(model => model.Calendar.CalendarDate, "DatePicker", new { id = "divCalendar_CalendarDate" }) 
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Translation.Get("Visa fr.o.m")
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.Calendar.ShowFromDate, "DatePicker", new { id = "divCalendar_ShowFromDate" }) 
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Translation.Get("Visa t.o.m")
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => model.Calendar.ShowUntilDate, "DatePicker", new { id = "divCalendar_ShowUntilDate" }) 
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Translation.Get("Rubrik")
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(model => model.Calendar.Caption, new { maxlength = "50", style = "width: 200px;" })
                                    </td>
                                </tr>                                                               
                                <tr>
                                    <td>
                                        @Translation.Get("Text")
                                    </td>
                                    <td>
                                        @Html.TextAreaFor(model => model.Calendar.Text, new { style = "width:600px; height:250px;", maxlength = "2000", @class="richtexteditor" })
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        @Translation.Get("Visa")
                                    </td>
                                    <td class="checkbox" style="padding-left: 20px">
                                        @Html.CheckBoxFor(m => m.Calendar.ShowOnStartPage)                                        
                                        &nbsp;@Translation.Get("Visa på startsidan")
                                    </td>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td class="checkbox" style="padding-left: 20px">
                                        @Html.CheckBoxFor(m => m.Calendar.PublicInformation)
                                        &nbsp;@Translation.Get("Visa på självservice")
                                    </td>                                
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
                <div class="container">
                    <h4>@Translation.Get("Säkerhet")</h4>
                    <div class="row">
                        <div class="span12">
                            <table class="tableform" id="säkerhet">
                                <tr>
                                    <td class="span3">
                                        @Translation.Get("Driftgrupp")
                                    </td>
                                    <td>
                                        @Translation.Get("Tillgängliga")
                                    </td>
                                    <td></td>
                                    <td>
                                        @Translation.Get("Valda")
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <input type="checkbox" id="LimitWGs"> @Translation.Get("Begränsa rättigheter till", Enums.TranslationSource.TextTranslation)<br>
                                        <input type="hidden" id="userGroupId" value="@Model.CurrentUser.UserGroup_Id" />
                                    </td>
                                    <td>
                                        @Html.ListBox("WGsAvailable", Model.WGsAvailable, new { style = "width: 340px; height: 100px" })
                                        
                                    </td>
                                    <td>
                                        <input type="button" value="&gt;" id="addWGs" class="btn"/>
                                        <input type="button" value="&lt;" id="removeWGs" class="btn" />
                                    </td>
                                    <td>
                                        @Html.ListBox("WGsSelected", Model.WGsSelected, new { style = "width: 340px; height: 100px" })
                                    </td>
                                </tr>
                            </table>
                            @Html.HiddenFor(model => model.Calendar.CustomerId)
                            @Html.HiddenFor(model => model.Calendar.Id)
                            @Html.HiddenFor(model => model.Calendar.ChangedByUserId)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    function submitForm() {
        $("#WGsSelected option").attr("selected", "selected");
        $("#target").submit();
    }

    $("#addWGs").click(function () {
        $("#WGsAvailable option:selected").remove().appendTo("#WGsSelected");
        $("#WGsAvailable").get(0).selectedIndex = -1;
        $("#WGsSelected").get(0).selectedIndex = -1;
        return false;
    });

    $("#removeWGs").click(function () {
        $("#WGsSelected option:selected").remove().appendTo("#WGsAvailable");
        $("#WGsAvailable").get(0).selectedIndex = -1;
        $("#WGsAvailable").get(0).selectedIndex = -1;
        if ($("#WGsSelected option").length == 0) {
            $("#LimitWGs").attr("checked", false);
            $("#WGsAvailable").attr("disabled", true);
            $("#WGsSelected").attr("disabled", true);
            $("#WGsSelected").removeAttr('required');
            $("#WGsSelected").rules("remove");
        };
        return false;
    });

    $("#LimitWGs").change(function () {
        if ($("#LimitWGs").attr("checked")) {
            $("#WGsAvailable").attr("disabled", false);
            $("#WGsSelected").attr("disabled", false);
            $("#WGsSelected").rules("add", {
                required: true
            });
        } else {
            $("#WGsSelected option").remove().appendTo("#WGsAvailable");
            $("#WGsAvailable").attr("disabled", true);
            $("#WGsSelected").attr("disabled", true);

            $("#WGsSelected").removeAttr('required');
            $("#WGsSelected").rules("remove");
        }
    });

    if ($("#WGsSelected option").length > 0) {
        $("#LimitWGs").attr("checked", true)
        $("#WGsAvailable").attr("disabled", false);
        $("#WGsSelected").attr("disabled", false);
    } else {
        if ($("#LimitWGs").attr('checked')) {
            $("#WGsAvailable").attr("disabled", false);
            $("#WGsSelected").attr("disabled", false);
        }
        else {
            $("#WGsAvailable").attr("disabled", true);
            $("#WGsSelected").attr("disabled", true);
        }
    }
    $.validator.addMethod('dateGreaterThan', function (value, element, param) {
        var fromDate = $("#divCalendar_ShowFromDate").datepicker('getDate');
        var endDate = $("#divCalendar_ShowUntilDate").datepicker('getDate');
        if (Date.parse(endDate) >= Date.parse(fromDate)) {
            return isValid;
        }

    }, '@Translation.GetForJS("Var vänlig ange ett giltigt datum")');

    var validator = $("#target")
        .submit(function () {
            // update underlying textarea before submit validation
            tinyMCE.triggerSave();
        })
        .validate({
            ignore: "",
            rules: {
                "Calendar.Text": 'required',
                "Calendar.CalendarDate": {
                    'required': true,
                    'date': true
                },
                "Calendar.ShowFromDate": {
                    'required': true,
                    'date': true
                },
                "Calendar.ShowUntilDate": {
                    'required': true,
                    'date': true,
                    'dateGreaterThan': true
                },
                "WGsSelected": { 'required': $("#LimitWGs").attr('checked') == "checked" }
            },
            messages: {
                "Calendar.Text": {
                    required: "@Translation.GetForJS("Du måste ange en text", Enums.TranslationSource.TextTranslation)"
                },
                'Calendar.CalendarDate': {
                    required: '@( string.Format("{0} {1}", Translation.GetForJS("Du måste ange"), Translation.GetForJS("Skapad datum") ))',
                    date: '@Translation.GetForJS("Var vänlig ange ett giltigt datum")'
                },
                'Calendar.ShowFromDate': {
                    required: '@( string.Format("{0} {1}", Translation.GetForJS("Du måste ange"), Translation.GetForJS("Visa fr.o.m") ))',
                    date: '@Translation.GetForJS("Var vänlig ange ett giltigt datum")',
                },
                'Calendar.ShowUntilDate': {
                    required: '@( string.Format("{0} {1}", Translation.GetForJS("Du måste ange"), Translation.GetForJS("Visa t.o.m") ))',
                    date: '@Translation.GetForJS("Var vänlig ange ett giltigt datum")',
                    dateGreaterThan: '@Translation.GetForJS("Var vänlig ange ett giltigt datum")'
                },
                "WGsSelected": {
                    required: "@Translation.GetForJS("Du måste ange en driftgrupp", Enums.TranslationSource.TextTranslation)"
        }
    },
        errorPlacement: function (error, element) {
        if (element.is("textarea")) {
            element.parent().prepend(error);
        } else if (element.parent().hasClass('date')) {
            element.parent().append(error);
        } else {
            error.insertAfter(element);
        }
    },
    submitHandler: function (form) {
        form.submit();
    }
    });
    validator.focusInvalid = function() {
        // put focus on tinymce on submit validation
        if (this.settings.focusInvalid) {
            try {
                var toFocus = $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []);
                if (toFocus.is("textarea")) {
                    tinyMCE.get(toFocus.attr("id")).focus();
                } else {
                    toFocus.filter(":visible").focus();
                }
            } catch (e) {
                // ignore IE throwing errors when focusing hidden elements
            }
        }
    };
</script>

@using System.Text
@using DH.Helpdesk.Services.Response.Questionnaire
@using DH.Helpdesk.Web.Models.Questionnaire.Output
@model StatisticsViewModel    
@{
    bool isAnswersExists = Model.OptionResults.Any();
}

<div class="tab-content">
    <div class="tab-pane tab-pane-border active" id="fragment-1">
        <div class="container">
            <h3 style="color: gray">@Model.QuestionnaireOverview.Name</h3>
            <div class="row">
                <div class="span12">
                    @Model.QuestionnaireOverview.Description
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane tab-pane-border active" id="fragment-2">
        <div class="container">

            <table class="table table-striped table-bordered table-hover">
                @foreach (var question in Model.QuestionnaireOverview.Questions)
                {
                    List<OptionResult> values = Model.OptionResults.Where(x => question.Options.Select(y => y.Id).Contains(x.OptionId)).ToList();

                    <tr>
                        <td colspan="6" class="header">@question.Number. @question.Question (@Translation.GetCoreTextTranslation("Antal svar"): @values.Sum(x => x.Count))</td>
                    </tr>

                    foreach (var option in question.Options.OrderBy(x => x.Position))
                    {
                        OptionResult result = values.FirstOrDefault(x => x.OptionId == option.Id);
                        int count = result == null ? 0 : result.Count;

                        int percent = GetPercent(count, values.Select(x => x.Count).ToList());

                        var notes = string.Empty;
                        var hiddenNote = string.Empty;
                        if (result != null)
                        {
                            notes = string.Join(Environment.NewLine + Environment.NewLine, result.Notes.Where(x => !string.IsNullOrEmpty(x.NoteText)).Select(x => x.NoteText));
                            foreach (var optionNote in result.Notes)
                            {
                                if (!string.IsNullOrEmpty(optionNote.NoteText))
                                {
                                    var str = new StringBuilder();
                                    str.Append("<div class='brdbottom'>");
                                    str.Append("<label class='toplabel'>");
                                    str.Append(optionNote.NoteText);
                                    str.Append("</label>");
                                    str.Append("<label class='case-dropdown-div'>");
                                    str.Append(decimal.Round(optionNote.CaseId));
                                    str.Append("</label><br/></div>");
                                    hiddenNote = hiddenNote + str;
                                }
                            }
                        }
                        <tr>
                            <td style="width: 40%">
                                @option.Option
                            </td>
                            @if (isAnswersExists)
                            {
                                <td style="width: 30%">
                                    <div style="background: lightblue; width: @percent%; height: 20px;">
                                    </div>
                                </td>
                            }
                            <td style="width: 10%">
                                <div class='text-right'>@count</div>
                            </td>
                            <td style="width: 10%">
                                @Translation.GetCoreTextTranslation("svar")
                            </td>
                            <td style="width: 10%">@percent%
                            </td>
                            @if (!string.IsNullOrEmpty(notes))
                            {
                                <td style="width: 5%">
                                    <div style="width: 16px;" class="qn-div-data">
                                        <a href="#" class="questionnaireNote icon-comment" title="@notes"></a>
                                        @Html.Hidden("popupNote", hiddenNote)
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td style="width: 2%"></td>
                            }
                        </tr>
                    }
                }
            </table>
        </div>
    </div>
</div>

<div id="questionnaire_notes_popup" role="dialog" class="modal fade" aria-labelledby="questNote" aria-hidden="true" style="display: none;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h5>@Translation.GetCoreTextTranslation("Kommentarer")</h5>
            </div>
            <div class="overflow-visible">
                <div id="qn_comment_content"></div>
            </div>
            <div class="modal-body overflow-visible">
                <div>
                    <button type="button" id="btnCancel" class="btn btn-cancel btn-default" data-dismiss="modal">@Translation.GetCoreTextTranslation("OK")</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(function() {
        $('a.questionnaireNote.icon-comment').on("click", function() {
                    var $src = $(this);
                    var parentDiv = $(this).closest('.qn-div-data');
                    var popupNote = parentDiv.find("#popupNote").val();
                    var $target = $("#questionnaire_notes_popup");
                    $("#qn_comment_content").html(popupNote);
                    $target.attr("data-src", $src.attr("data-src"));
                    $target.modal("show");
                });
    });
</script>

@functions 
{
    private int GetPercent(int value, List<int> values)
    {
        if (!values.Any())
        {
            return 0;
        }

        int sum = values.Sum();

        int percent = value * 100 / sum;

        return percent;
    }

}
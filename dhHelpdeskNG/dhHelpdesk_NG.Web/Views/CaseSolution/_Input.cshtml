@model DH.Helpdesk.Web.Models.CaseSolution.CaseSolutionInputViewModel
@using System.Web.Optimization
@using System.Collections.Generic
@using DH.Helpdesk.BusinessData.OldComponents
@using DH.Helpdesk.Common.Enums.Settings
@using DH.Helpdesk.Common.Extensions.Integer
@using DH.Helpdesk.Web.Infrastructure
@using DH.Helpdesk.Web.Infrastructure.Extensions
@using DH.Helpdesk.Web.Infrastructure.Extensions.HtmlHelperExtensions
@using System.Web.Script.Serialization
@using DH.Helpdesk.Common.Enums.CaseSolution
@using DH.Helpdesk.BusinessData.Enums.Case.Fields
@using DH.Helpdesk.Web.Common.Enums.Case

@{
    var saveDropDownText = Html.Raw(Translation.Get("Spara", Enums.TranslationSource.TextTranslation) + " - " +
                                   Translation.Get("Spara och stäng", Enums.TranslationSource.TextTranslation));
    var jsSerializer = new JavaScriptSerializer();
    jsSerializer.MaxJsonLength = Int32.MaxValue;
}

<script type="text/javascript">
    window.params = {
        saveDropDownCaption: '@saveDropDownText',
        ruleModel : @Html.Raw(jsSerializer.Serialize(Model.RuleModel)),
        mandatoryText: '@Translation.GetForJS("Obligatorisk")',
        showOnSelfSeviceText: '@Translation.GetForJS("Visa på självservice")',
        willSetToText: '@Translation.GetForJS("Utan en mall, finns standard reglering för detta fält att uppdatera:")',
        mightSetText: '@Translation.GetForJS("kan styra")',
        willShowRelatedItemsText: '@Translation.GetForJS("visar värden relaterade till")',
        toText: '@Translation.GetForJS("till")',
        andText: '@Translation.GetForJS("och")'
    };
</script>

@Scripts.Render("~/bundles/casetemplates/edit")
@Scripts.Render("~/bundles/caserules/logic")

<div class="content">
    <div class="container">
        <ul class="nav nav-tabs" id="myTab">
            <li class="active"><a href="#fragment-1">@Translation.Get("Ärendemall", Enums.TranslationSource.TextTranslation)</a></li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane tab-pane-border active" id="fragment1">
                <div class="container">
                    @if (TempData["Error"] != null)
                    {
                        <div class="alert alert-error">
                            @Translation.GetCoreTextTranslation("Ärendemall")
                            @Translation.GetCoreTextTranslation("som används går inte att ta bort")
                        </div>
                    }
                    <h4>@Translation.Get("Allmänt", Enums.TranslationSource.TextTranslation)</h4>
                    <div class="row">
                        <div class="span12">
                            <table class="tableform" border="0">
                                @Html.HiddenFor(model => model.CaseSolution.TemplatePath)
                                @Html.HiddenFor(model => model.CaseSolution.ValidateOnChange)
                                @Html.HiddenFor(model => model.CaseSolution.NextStepState)

                                <tr>
                                    <td style="width:200px">
                                        @Translation.Get("Ärendemall", Enums.TranslationSource.TextTranslation)
                                        <span class="mandatorystar">*</span>
                                    </td>
                                    <td style="width:200px">
                                        @Html.TextBoxFor(model => model.CaseSolution.Name, new { id = "Name", maxlength = "50" })

                                    </td>
                                    <td>
                                        <div id="inputCopy" style="display: none">
                                            @Html.Label("Kopia", new { @id = "lblCopy", @Style = "color:red" })
                                        </div>
                                    </td>
                                </tr>
                            </table>
                            <table class="tableform" border="0">
                                <tr>
                                    <td style="width:200px">
                                        @Translation.Get("Kategori", Enums.TranslationSource.TextTranslation)
                                    </td>
                                    <td>
                                        @Html.DropDownListFor(model => model.CaseSolution.CaseSolutionCategory_Id, Model.CsCategories, "")
                                    </td>
                                </tr>
                                <tr>
                                    <td style="width: 200px">
                                        @Translation.GetCoreTextTranslation("Beskrivning")
                                    </td>
                                    <td>
                                        @Html.TextAreaFor(model => model.CaseSolution.CaseSolutionDescription, new { id = "CaseSolutionDescription", maxlength = "4000" })
                                    </td>
                                </tr>
                                <tr>
                                    <td style="width: 200px">
                                        @Translation.GetCoreTextTranslation("Kort beskrivning")
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(model => model.CaseSolution.ShortDescription, new { id = "ShortDescription", maxlength = "100" })
                                    </td>
                                </tr>
                                <tr>
                                    <td style="width: 200px">
                                        @Translation.GetCoreTextTranslation("Information")
                                    </td>
                                    <td>
                                        @Html.TextAreaFor(model => model.CaseSolution.Information, new { id = "Information", @class = "richtexteditor", style = "width:600px; height:250px" })
                                    </td>
                                </tr>
                                <tr></tr>

                                @*<tbody class="hideOnInsideCase" style="@(Model.CaseSolution.ShowInsideCase == 1 ? "" : "display:none")">*@



                                <tr>
                                    <td>
                                        @Translation.Get("Sorteringsordning", Enums.TranslationSource.TextTranslation)
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(model => model.CaseSolution.SortOrder, new { maxlength = "10", style = "width: 20px;" })
                                    </td>
                                </tr>
                                @*</tbody>*@

                                <tr>
                                    <td>
                                        @Translation.Get("Aktiv", Enums.TranslationSource.TextTranslation)
                                    </td>
                                    <td>
                                        <input type="checkbox" name="Casesolution.Status" @(Model.CaseSolution.Status != 0 ? "checked=checked" : "") value="1" class="switchcheckbox" />
                                        <input type="hidden" name="Casesolution.Status" value="0" />
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div class="notifier-block hideshow">
                        <h4>@Translation.Get("Visa", Enums.TranslationSource.TextTranslation)</h4>
                        <div class="row">
                            <div class="span12">
                                <table class="tableform" border="0">
                                    <tr>
                                        <td style="width:200px">
                                            @Translation.Get("Visa på självservice", Enums.TranslationSource.TextTranslation)
                                        </td>
                                        <td class="checkbox" style="padding-left: 20px">
                                            <input type="checkbox" name="Casesolution.ShowInSelfService" @(Model.CaseSolution.ShowInSelfService == true ? "checked=checked" : "") value="true" />
                                            <input type="hidden" name="Casesolution.ShowInSelfService" value="0" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Translation.Get("Visa på ärendeöversikten", Enums.TranslationSource.TextTranslation)
                                        </td>
                                        <td class="checkbox" style="padding-left: 20px">
                                            <input type="checkbox" name="Casesolution.ShowOnCaseOverview" @(Model.CaseSolution.ShowOnCaseOverview != 0 ? "checked=checked" : "") value="1" />
                                            <input type="hidden" name="Casesolution.ShowOnCaseOverview" value="0" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Translation.Get("Visa på ärende", Enums.TranslationSource.TextTranslation)
                                        </td>
                                        <td class="checkbox" style="padding-left: 20px;">
                                            <input type="checkbox" onclick="ShowHideCaseDiv(this)" name="Casesolution.ShowInsideCase" id="Casesolution_ShowInsideCase" @(Model.CaseSolution.ShowInsideCase != 0 ? "checked=checked" : "") value="1" style="margin-top: 8px" />
                                            <input type="hidden" name="Casesolution.ShowInsideCase" value="0" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>
                                            @Translation.Get("Visa på mobil", Enums.TranslationSource.TextTranslation)
                                        </td>
                                        <td class="checkbox" style="padding-left: 20px">
                                            <input type="checkbox" name="Casesolution.ShowOnMobile" @(Model.CaseSolution.ShowOnMobile != 0 ? "checked=checked" : "") value="1" />
                                            <input type="hidden" name="Casesolution.ShowOnMobile" value="0" />
                                        </td>
                                    </tr>
                                </table>
                                <div id="divShowCase" style="display:none; padding:0px;width:100%">
                                    <div class="row">
                                        <div class="span12">

                                            <table class="tableform" border="0">
                                                <tr>
                                                    <td style="width:200px;">
                                                        @Translation.Get("Koppla till åtgärd", Enums.TranslationSource.TextTranslation)
                                                    </td>
                                                    <td>
                                                        <select id="savaAndClose" name="CaseSolution.SaveAndClose" @(Model.CaseSolution.ShowInsideCase == 1 ? "" : "disabled='true'")>
                                                            @foreach (var action in Model.ActionList)
                                                            {
                                                                <option value="@action.Value" @(action.Selected ? "selected" : "")> @action.Text </option>
                                                            }

                                                            @if (Model.CaseSolution.ShowInsideCase != 1)
                                                            {
                                                                <option value="-2" selected> @saveDropDownText </option>
                                                            }
                                                        </select>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>
                                                        @Translation.Get("Koppla till", Enums.TranslationSource.TextTranslation)
                                                    </td>
                                                    <td>
                                                        @if (Model.CaseSolution.ShowInsideCase == 1)
                                                        {
                                                            @Html.DropDownListFor(model => model.CaseSolution.ConnectedButton, Model.ButtonList, "", new { @Id = "ConnectTo", @onchange = "GetSelectedTextValue(this)" })
                                                        }
                                                        else
                                                        {
                                                            @Html.DropDownListFor(model => model.CaseSolution.ConnectedButton, Model.ButtonList, "", new { @Id = "ConnectTo", disabled = "disabled", @onchange = "GetSelectedTextValue(this)" })
                                                        }

                                                    </td>
                                                </tr>
                                                @*Split selection*@
                                                @*// TODO: Use a enable button to show (and reset value if saved when disabled) of split to dropdown*@


                                                <tr>
                                                    <td>
                                                        @Translation.Get("Ärendemall för underärende", Enums.TranslationSource.TextTranslation)
                                                    </td>
                                                    <td>
                                                        @Html.DropDownListFor(model => model.CaseSolution.SplitToCaseSolution_Id,
                                                            Model.SplitToCaseSolutions.Select(o => new SelectListItem()
                                                            {
                                                                Text = o.Name + (string.IsNullOrEmpty(o.CategoryName) ? "" : " - " + o.CategoryName),
                                                                Value = o.CaseSolutionId.ToString()
                                                            }).ToList(), "")
                                                    </td>

                                                </tr>
                                                <tr>
                                                    <td>
                                                        @Translation.Get("Ersätt alltid befintliga värden", SessionFacade.CurrentLanguageId)
                                                    </td>
                                                    <td>
                                                        <input type="checkbox" name="CaseSolution.OverWritePopUp" @(Model.CaseSolution.OverWritePopUp == 1 ? "checked=checked" : "") value="1" class="switchcheckbox" />
                                                        <input type="hidden" name="CaseSolution.OverWritePopUp" value="0" />
                                                    </td>
                                                </tr>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    @{ Model.CaseSolution.DefaultTab = (string.IsNullOrEmpty(Model.CaseSolution.DefaultTab) ? "case-tab" : Model.CaseSolution.DefaultTab); }
                    @if (Model.CaseSolution.ExtendedCaseForms != null && Model.CaseSolution.ExtendedCaseForms.Any())
                    {
                        var extendedCaseForm = Model.CaseSolution.ExtendedCaseForms.FirstOrDefault();
                        var extendedCaseName = extendedCaseForm != null ? (extendedCaseForm.Name ?? "").Trim() : "";
                        var extendedCaseId = extendedCaseForm != null ? extendedCaseForm.Id : 0;

                        <div id="divExtendedCase" style="padding:0px;width:100%">
                            <h4>@Translation.Get("Utökat ärende")</h4>
                            <div class="row">
                                <div class="span12">
                                    <table class="tableform" border="0">
                                        <tr>
                                            <td style="width:200px; margin-bottom:5px;">@Translation.Get("Kopplat till utökat ärende")</td>
                                            <td style="width:300px; margin-bottom:5px;">@extendedCaseName</td>
                                            <td></td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Translation.Get("Aktiv flik Helpdesk")
                                            </td>
                                            <td>
                                                @*TODO: loop through all Extended Cases*@
                                                <select name="CaseSolution.DefaultTab">
                                                    <option value="case-tab" @(Model.CaseSolution.DefaultTab.ToLower() == "case-tab" ? "selected" : "")>@Translation.Get("Ärende")</option>
                                                    <option value="extendedcase-tab-@extendedCaseId" @(Model.CaseSolution.DefaultTab.ToLower() == "extendedcase-tab-" + extendedCaseId.ToString() ? "selected" : "")>@extendedCaseName<text></text></option>
                                                </select>

                                            </td>
                                            <td> <span title="" class="icon-info-sign tooltipType" data-original-title="<div align='left'>@Translation.Get("Välj den tab som ska vara aktiv när ett nytt ärende skapas utifrån den här ärendemallen") </div> <br />" data-html="true" rel="tooltip"></span> </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                @Translation.Get("Tillgängliga flikar Självservice")
                                            </td>
                                            <td>
                                                <select name="CaseSolution.AvailableTabsSelfsevice" id="availableTabs">
                                                    <option value="@Model.CaseSolution.DefaultTab.ToLower()" selected=@(Model.CaseSolution.AvailableTabsSelfsevice.ToLower() == "" ? "selected" : "")>
                                                        @{
                                                            var defaultValue = Model.CaseSolution.DefaultTab.ToLower();
                                                            if (defaultValue.StartsWith("case-tab"))
                                                            {
                                                                defaultValue = @Translation.Get("Ärende");
                                                            }
                                                            else
                                                            {
                                                                defaultValue = extendedCaseName;
                                                            }
                                                        }
                                                        @defaultValue
                                                    </option>
                                                    <option value="both" @(Model.CaseSolution.AvailableTabsSelfsevice.ToLower() == "both" ? "selected" : "")>@Translation.Get("Ärende")<text> + </text>@extendedCaseName</option>
                                                    <option value="case-tab" @(Model.CaseSolution.AvailableTabsSelfsevice.ToLower() == "case-tab" ? "selected" : "")>@Translation.Get("Ärende")</option>
                                                    <option value="extendedcase-tab-@extendedCaseId" @(Model.CaseSolution.AvailableTabsSelfsevice.ToLower() == "extendedcase-tab-" + extendedCaseId.ToString() ? "selected" : "")>@extendedCaseName<text></text></option>
                                                </select>
                                            </td>
                                            <td> <span title="" class="icon-info-sign tooltipType" data-original-title="<div align='left'>@Translation.Get("Välj vilken/vilka flikar som ska visas på Självservice") </div> <br />" data-html="true" rel="tooltip"></span> </td>
                                        </tr>
                                    </table>
                                    <div id="activeTabSelfservice">
                                    <table class="tableform" border="0">
                                        <tr>
                                            <td style="width:200px; margin-bottom:5px;">
                                                @Translation.Get("Aktiv flik Självservice")
                                            </td>
                                            <td style="width:300px; margin-bottom:5px;">
                                                <select name="CaseSolution.ActiveTabSelfservice" id="activeTab">
                                                    <option value="case-tab" @(Model.CaseSolution.ActiveTabSelfservice.ToLower() == "case-tab" ? "selected" : "")>@Translation.Get("Ärende")</option>
                                                    <option value="extendedcase-tab-@extendedCaseId" @(Model.CaseSolution.ActiveTabSelfservice.ToLower() == "extendedcase-tab-" + extendedCaseId.ToString() ? "selected" : "")>@extendedCaseName<text></text></option>
                                                </select>
                                            </td>
                                            <td> <span title="" class="icon-info-sign tooltipType" data-original-title="<div align='left'>@Translation.Get("Välj den tab som ska vara aktiv när ett ärende, skapat utifrån den här ärendemallen, öppnas") </div> <br />" data-html="true" rel="tooltip"></span> </td>
                                        </tr>
                                        </table>
                                    </div>
                                </div>                                
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.CaseSolution.DefaultTab) 
                        @Html.HiddenFor(model => model.CaseSolution.ActiveTabSelfservice) 
                        @Html.HiddenFor(model => model.CaseSolution.AvailableTabsSelfsevice)
                    }

                    @*TODO: Move to another page*@
                    @if (SessionFacade.CurrentUser.UserGroupId >= 3)
                    {
                        <div id="divSplitToCaseSolutions" style="padding:0px;width:100%">
                            <h4>@Translation.Get("Multiärende (vid spara)", Enums.TranslationSource.TextTranslation)</h4>
                            <table class="tableform" border="0">
                                <tr>
                                    <td style="width:200px">
                                        @Translation.Get("Typ av relation", Enums.TranslationSource.TextTranslation)
                                    </td>
                                    <td>
                                        <select id="Casesolution_CaseRelationType" name="Casesolution.CaseRelationType">
                                            <option @(Model.CaseSolution.CaseRelationType == CaseRelationType.None ? "selected" : "") value="0">&nbsp;</option>
                                            <option @(Model.CaseSolution.CaseRelationType == CaseRelationType.ParentAndChildren ? "selected" : "") value="1">@Translation.Get(CaseRelationType.ParentAndChildren.ToString(), Enums.TranslationSource.TextTranslation)</option>
                                            <option @(Model.CaseSolution.CaseRelationType == CaseRelationType.OnlyDescendants ? "selected" : "") value="2">@Translation.Get(CaseRelationType.OnlyDescendants.ToString(), Enums.TranslationSource.TextTranslation)</option>
                                            <option @(Model.CaseSolution.CaseRelationType == CaseRelationType.SelfAndDescendandts ? "selected" : "") value="3">@Translation.Get(CaseRelationType.SelfAndDescendandts.ToString(), Enums.TranslationSource.TextTranslation)</option>
                                        </select>
                                    </td>
                                </tr>
                            </table>
                            <div id="divSplitToAllCaseSolutions" class="hidden">
                                <table class="tableform" border="0">
                                    <tr>
                                        <td style="width:200px">@Translation.Get("Ärendemallar för underärenden", Enums.TranslationSource.TextTranslation)</td>
                                        <td>
                                            <select id="SplitToCaseSolutionIds" name="SplitToCaseSolutionIds" data-field="id" data-placeholder="@Translation.Get("Välj en eller flera", Enums.TranslationSource.TextTranslation)" multiple="multiple" class="chosen-select">
                                                @foreach (var a in Model.SplitToAllCaseSolutions)
                                                {
                                                    <option @(a.Selected ? " selected" : "") @(a.Disabled && a.Selected == false ? " disabled" : "") value="@a.Value">@a.Text</option>
                                                }
                                            </select>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.CaseSolution.CaseRelationType)

                        if (Model.SplitToCaseSolutionIds != null)
                        {
                            for (int i = 0; i < Model.SplitToCaseSolutionIds.Count(); i++)
                            {
                                @Html.HiddenFor(model => model.SplitToCaseSolutionIds[i])
                            }
                        }
                    }

                    <div id="divConditions" style="display: none" class="notifier-block hideshow">
                        <div id="divReplaceConditions">
                            @Html.Partial("_Conditions", Model)
                        </div>
                    </div>
                    <div style="@Model.displayUserInfoHtml()" class="notifier-block hideshow">
                        <h4>@Translation.Get("Användarinformation", Enums.TranslationSource.TextTranslation)</h4>
                        <div class="row">
                            <div class="span12">
                                <table class="tableform" border="0">
                                    <tr>
                                        <td style="min-width:200px"></td>
                                        <td style="width:300px"></td>
                                        <td style="width:300px">
                                            <table>
                                                <tr>
                                                    <td style="min-width:80px;text-align:center"> @Translation.GetCoreTextTranslation("Info") </td>
                                                    <td style="min-width:80px;text-align:center"> @Translation.GetCoreTextTranslation("Obligatorisk") </td>
                                                    <td style="min-width:80px;text-align:center"> @Translation.GetCoreTextTranslation("Självservice") </td>
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Translation.Get("Denna inställning gäller bara på nytt ärende", Enums.TranslationSource.TextTranslation)
                                        </td>
                                    </tr>
                                    <tr>
                                        @*<th colspan="3" class="header">@Translation.Get("Användarinformation")</th>*@
                                        @{ var myIndex = 0;
                                            var curId = "";
                                            foreach (var cs in Model.CaseSolutionSettingModels)
                                            {
                                                curId = "hide_" + cs.CaseSolutionField;
                                                <input type="hidden" name="CaseSolutionSettingModels[@myIndex].id" value="@cs.Id" />
                                                <input type="hidden" name="CaseSolutionSettingModels[@myIndex].CaseSolutionField" value="@cs.CaseSolutionField" />
                                                <input type="hidden" name="CaseSolutionSettingModels[@myIndex].CaseSolutionMode" value="@cs.CaseSolutionMode" id="@curId" />
                                                myIndex = myIndex + 1;
                                            }
                                        }
                                    </tr>

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.UserSearchCategory_Id.ToString())">
                                            <td>@Translation.GetForCase(GlobalEnums.TranslationCaseFields.UserSearchCategory_Id.ToString(), Model.CaseSolution.Customer_Id)</td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.UserSearchCategory_Id, Model.BuildComputerCategoriesSelectList(Model.CaseSolution.UserSearchCategory_Id), "",
                                                new
                                                {
                                                    id = "UserSearchCategory",
                                                         @class = "acceptRules",
                                                         standardId = GlobalEnums.TranslationCaseFields.UserSearchCategory_Id.ToString()
                                                })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.UserSearchCategory_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.UserSearchCategory_Id, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.UserSearchCategory_Id)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.ReportedBy.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.ReportedBy.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.ReportedBy, new { id = "ReportedBy", maxlength = "40", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.ReportedBy.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.ReportedBy.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.UserNumber, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.ReportedBy)
                                            </td>
                                        </tr>

                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Persons_Name.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Persons_Name.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.PersonsName, new { id = "PersonsName", maxlength = "40", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Persons_Name.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Persons_Name.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.PersonsName, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Persons_Name)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Persons_EMail.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Persons_EMail.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.PersonsEmail, new { id = "PersonsEmail", maxlength = "100", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Persons_EMail.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Persons_EMail.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.PersonsEmail, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Persons_EMail)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr>
                                            <td>
                                                @Translation.Get("Informera anmälaren", Enums.TranslationSource.TextTranslation)
                                            </td>
                                            <td class="checkbox" style="padding-left: 20px">
                                                <input type="checkbox" name="Casesolution.NoMailToNotifier" @(Model.CaseSolution.NoMailToNotifier == 1 ? "checked=checked" : "") value="1" class="acceptRules" standardId='@GlobalEnums.TranslationCaseFields.MailToNotifier.ToString()' />
                                                <input type="hidden" name="Casesolution.NoMailToNotifier" value="0" />
                                                &nbsp;@Translation.Get("Skicka mail till anmälaren", Enums.TranslationSource.TextTranslation)
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.MailToNotifier.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Email, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.MailToNotifier)
                                            </td>

                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Persons_Phone.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Persons_Phone.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.PersonsPhone, new { id = "Persons_Phone", maxlength = "40", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Persons_Phone.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Persons_Phone.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.PersonsPhone, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Persons_Phone)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.PersonsCellPhone, new { id = "PersonsCellPhone", maxlength = "40", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.PersonsCellPhone, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Persons_CellPhone)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Region_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Region_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.Region_Id, Model.Regions, "", new { id = "Region", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Region_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Region_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Region, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Region_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Department_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Department_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.Department_Id, Model.Departments, "", new { id = "Department", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Department_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Department_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Department, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Department_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.OU_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.OU_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.OU_Id, Model.OUs, "", new { id = "OU", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.OU_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.OU_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.OU, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.OU_Id)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.CostCentre.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.CostCentre.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.CostCentre, new { id = "CostCentre", maxlength = "50", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.CostCentre.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.CostCentre.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.CostCentre, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.CostCentre)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Place.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Place.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.Place, new { id = "Place", maxlength = "40", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Place.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Place.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Place, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Place)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.UserCode.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.UserCode.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.UserCode, new { id = "UserCode", maxlength = "50", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.UserCode.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.UserCode.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td class="span9">
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Usercode, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.UserCode)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.UpdateNotifierInformation.ToString())">
                                            <td>
                                                @Translation.Get("Spara användaruppgifter", SessionFacade.CurrentLanguageId)
                                            </td>
                                            <td>
                                                <input type="checkbox" name="CaseSolution.UpdateNotifierInformation" @(Model.CaseSolution.UpdateNotifierInformation == 1 ? "checked=checked" : "") value="1" class="switchcheckbox acceptRules" standardId='@GlobalEnums.TranslationCaseFields.UpdateNotifierInformation.ToString()' />
                                                <input type="hidden" name="CaseSolution.UpdateNotifierInformation" value="0" />
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.UpdateNotifierInformation.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.UpdateNotifierInformation, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.UpdateNotifierInformation)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.AddFollowersBtn.ToString())">
                                            <td>
                                                @Translation.GetCoreTextTranslation(FieldSettingsUiNames.Names[GlobalEnums.TranslationCaseFields.AddFollowersBtn.ToString()])
                                            </td>
                                            <td>
                                                <input type="hidden" name="CaseSolution.AddFollowersBtn" value="false" />
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.AddFollowersBtn.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.AddFollowersBtn, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.AddFollowersBtn)
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                    @*IsABout*@
                    <div style="@Model.displayAboutUserInfoHtml()" class="computer-block hideshow">
                        <h4>@Translation.Get("Angående", Enums.TranslationSource.TextTranslation)</h4>
                        <div class="row">
                            <div class="span12">
                                <table class="tableform" border="0">
                                    <tr>
                                        <td style="min-width:200px"></td>
                                        <td style="width:300px"></td>
                                        <td style="width:300px">
                                            <table>
                                                <tr>
                                                    <td style="min-width:80px;text-align:center"></td>
                                                    <td style="min-width:80px;text-align:center"></td>
                                                    <td style="min-width:80px;text-align:center"></td>
                                                </tr>
                                            </table>
                                        </td>
                                        <td></td>
                                    </tr>
                                    <tr></tr>
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_UserSearchCategory_Id.ToString())">
                                            <td>@Translation.GetForCase(GlobalEnums.TranslationCaseFields.IsAbout_UserSearchCategory_Id.ToString(), Model.CaseSolution.Customer_Id)</td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.IsAbout_UserSearchCategory_Id, Model.BuildComputerCategoriesSelectList(Model.CaseSolution.IsAbout_UserSearchCategory_Id), "",
                                                    new { id = "IsAbout_UserSearchCategory", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_UserSearchCategory_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_UserSearchCategory_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>

                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_UserSearchCategory_Id, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_UserSearchCategory_Id)
                                            </td>
                                        </tr>

                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_ReportedBy.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_ReportedBy.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.IsAbout_ReportedBy, new { id = "IsAbout_ReportedBy", maxlength = "40", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_ReportedBy.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_ReportedBy.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_ReportedBy, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_ReportedBy)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_Persons_Name.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_Persons_Name.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.IsAbout_PersonsName, new { id = "IsAbout_PersonsName", maxlength = "50", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_Persons_Name.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_Persons_Name.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_PersonsName, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_Persons_Name)
                                            </td>
                                        </tr>
                                    }


                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_Persons_EMail.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_Persons_EMail.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.IsAbout_PersonsEmail, new { id = "IsAbout_PersonsEmail", maxlength = "100", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_Persons_EMail.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_Persons_EMail.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_PersonsEmail, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_Persons_EMail)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_Persons_Phone.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_Persons_Phone.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.IsAbout_PersonsPhone, new { id = "IsAbout_PersonsPhone", maxlength = "50", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_Persons_Phone.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_Persons_Phone.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_PersonsPhone, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_Persons_Phone)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_Persons_CellPhone.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_Persons_CellPhone.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.IsAbout_PersonsCellPhone, new { id = "IsAbout_PersonsCellPhone", maxlength = "30", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_Persons_CellPhone.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_Persons_CellPhone.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_PersonsCellPhone, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_Persons_CellPhone)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_Region_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_Region_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => Model.CaseSolution.IsAbout_Region_Id, Model.IsAbout_Regions, "", new { id = "IsAbout_Region", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_Region_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_Region_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_Region_Id, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_Region_Id)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_Department_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_Department_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.IsAbout_Department_Id, Model.IsAbout_Departments, "", new { id = "IsAbout_Department", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_Department_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_Department_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_Department_Id, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_Department_Id)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_OU_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_OU_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.IsAbout_OU_Id, Model.IsAbout_OUs, "", new { id = "IsAbout_OU", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_OU_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_OU_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_OU_Id, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_OU_Id)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_Place.ToString())">
                                            <td>@Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_Place.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)</td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.IsAbout_Place, new { id = "IsAbout_Place", maxlength = "100", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_Place.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_Place.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_Place, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_Place)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_CostCentre.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_CostCentre.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.IsAbout_CostCentre, new { id = "IsAbout_CostCentre", maxlength = "50", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_CostCentre.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_CostCentre.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_CostCentre, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_CostCentre)
                                            </td>
                                        </tr>
                                    }

                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.IsAbout_UserCode.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.IsAbout_UserCode.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.IsAbout_UserCode, new { id = "IsAbout_UserCode", maxlength = "50", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.IsAbout_UserCode.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.IsAbout_UserCode.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.IsAbout_UserCode, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.IsAbout_UserCode)
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                    <div style="@Model.displayComputerInfoHtml()" class="computer-block hideshow">
                        <h4>@Translation.Get("Datorinformation", Enums.TranslationSource.TextTranslation)</h4>
                        <div class="row">
                            <div class="span12">
                                <table class="tableform" border="0">
                                    <tr>
                                        <td style="min-width:200px"></td>
                                        <td style="width:300px"></td>
                                        <td style="width:300px">
                                            <table>
                                                <tr>
                                                    <td style="min-width:80px;text-align:center">&nbsp;</td>
                                                    <td style="min-width:80px;text-align:center">&nbsp;</td>
                                                    <td style="min-width:80px;text-align:center">&nbsp;</td>
                                                </tr>
                                            </table>
                                        </td>
                                        <td></td>
                                    </tr>
                                    <tr></tr>
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.InventoryNumber.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.InventoryNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.InventoryNumber, new { id = "InventoryNumber", maxlength = "20", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.InventoryNumber.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.InventoryNumber.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.InventoryNumber, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.InventoryNumber)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.InventoryType, new { id = "InventoryType", maxlength = "250", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.InventoryType, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.ComputerType_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.InventoryLocation.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.InventoryLocation.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.InventoryLocation, new { id = "InventoryLocation", maxlength = "250", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.InventoryLocation.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.InventoryLocation.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.InventoryLocation, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.InventoryLocation)
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </div>
                        </div>
                    </div>
                    <div style="@Model.displayCaseInfoHtml()" class="caseinfo-block hideshow">
                        <h4>@Translation.Get("Ärendeinformation", Enums.TranslationSource.TextTranslation)</h4>
                        <div class="row">
                            <div class="span12">
                                <table class="tableform">
                                    <tr>
                                        <td style="min-width:200px"></td>
                                        <td style="width:300px"></td>
                                        <td style="width:300px">
                                            <table>
                                                <tr>
                                                    <td style="min-width:80px;text-align:center"></td>
                                                    <td style="min-width:80px;text-align:center"></td>
                                                    <td style="min-width:80px;text-align:center"></td>
                                                </tr>
                                            </table>
                                        </td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <td></td>
                                    </tr>
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.RegistrationSourceCustomer.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.RegistrationSourceCustomer.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.RegistrationSource, Model.RegistrationSources, "", new { id = "RegistrationSource", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.RegistrationSourceCustomer.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.RegistrationSourceCustomer.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.RegistrationSourceCustomer, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.RegistrationSourceCustomer)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.CaseType_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.CaseType_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                <div id="divCaseType" class="btn-group">
                                                    <div class="btn" id="divBreadcrumbs_CaseType">@Model.ParantPath_CaseType</div>
                                                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a href="#">@Translation.Get("--", Enums.TranslationSource.TextTranslation)</a></li>
                                                        @Html.CaseTypeDropdownButtonString(Model.CaseTypes)
                                                    </ul>
                                                    @Html.HiddenFor(model => model.CaseSolution.CaseType_Id, new { @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.CaseType_Id.ToString() })

                                                </div>
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.CaseType_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.CaseType, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.CaseType_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                <div id="divProductArea" class="btn-group">
                                                    <div class="btn" id="divBreadcrumbs_ProductArea">@Model.ParantPath_ProductArea</div>
                                                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu subddMenu parentddMenu">
                                                        <li><a href="#">@Translation.Get("--", Enums.TranslationSource.TextTranslation)</a></li>
                                                        @Html.ProductAreaDropdownButtonString(Model.ProductAreas)
                                                    </ul>
                                                    @Html.HiddenFor(model => model.CaseSolution.ProductArea_Id, new { @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString() })
                                                </div>
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.ProductArea, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.ProductArea_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.System_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.System_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.System_Id, Model.Systems, "", new { id = "System", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.System_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.System_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.System, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.System_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Urgency_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Urgency_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.Urgency_Id, Model.Urgencies, "", new { id = "Urgency", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Urgency_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Urgency_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Urgency, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Urgency_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Impact_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Impact_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.Impact_Id, Model.Impacts, "", new { id = "Impact", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Impact_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Impact_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Impact, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Impact_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Category_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Category_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                <div id="divCategory" class="btn-group">
                                                    <div class="btn" id="divBreadcrumbs_Category">@Model.ParantPath_Category</div>
                                                    <button class="btn dropdown-toggle" data-toggle="dropdown">
                                                        <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a href="#">@Translation.GetCoreTextTranslation("--")</a></li>
                                                        @Html.CategoryDropdownButtonString(Model.Categories)
                                                    </ul>
                                                    @Html.HiddenFor(model => model.CaseSolution.Category_Id, new { @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Category_Id.ToString() })
                                                </div>
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Category_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Category, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Category_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Supplier_Id.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Supplier_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.DropDownListFor(model => model.CaseSolution.Supplier_Id, Model.Suppliers, "", new { id = "Supplier", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Supplier_Id.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Supplier_Id.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Supplier, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Supplier_Id)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.InvoiceNumber, new { id = "InvoiceNumber", maxlength = "50", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.InvoiceNumber, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.InvoiceNumber)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.ReferenceNumber, new { id = "ReferenceNumber", maxlength = "200", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.ReferenceNumber, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.ReferenceNumber)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Caption.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Caption.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.Caption, new { id = "Caption", maxlength = "100", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Caption.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Caption.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Caption, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Caption)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Description.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Description.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextAreaFor(model => model.CaseSolution.Description, new { id = "Description", style = "height:100px;", maxlength = "2000", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Description.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Description.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Description, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Description)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Miscellaneous.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Miscellaneous.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextAreaFor(model => model.CaseSolution.Miscellaneous, new { id = "Miscellaneous", style = "height:100px;", maxlength = "2000", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Miscellaneous.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Miscellaneous.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Miscellaneous, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Miscellaneous)
                                            </td>
                                        </tr>
                                    }
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.ContactBeforeAction.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.ContactBeforeAction.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @*@if (Model.CaseSolution.ContactBeforeAction == 1)
                                {
                                            *@<input type="checkbox" name="CaseSolution.ContactBeforeAction" @(Model.CaseSolution.ContactBeforeAction == 1 ? "checked=checked" : "") value="1" class="switchcheckbox acceptRules" standardId='@GlobalEnums.TranslationCaseFields.ContactBeforeAction.ToString()' />
                                            <input type="hidden" name="CaseSolution.ContactBeforeAction" value="0" />
                                            @*}
                                else
                                {
                                    @Model.CaseSolution.ContactBeforeAction.IntToYES_NO()
                                    @Html.HiddenFor(model => model.CaseSolution.ContactBeforeAction)
                                }*@
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.ContactBeforeAction.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.ContactBeforeAction, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.ContactBeforeAction)
                                        </td>
                                    </tr>
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.SMS.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.SMS.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td class="checkbox" style="padding-left: 20px">
                                                <input type="checkbox" name="Casesolution.SMS" @(Model.CaseSolution.SMS == 1 ? "checked=checked" : "") value="1" class="acceptRules" standardId='@GlobalEnums.TranslationCaseFields.SMS.ToString()' />
                                                <input type="hidden" name="Casesolution.SMS" value="0" />
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.SMS.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.SMS, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.SMS)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.AgreedDate.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.AgreedDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.EditorFor(m => m.CaseSolution.AgreedDate, "DatePicker", new { id = "AgreedDate", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.AgreedDate.ToString() })
                                                @*                                                @Html.TextBoxFor(model => model.CaseSolution.AgreedDate, new {id = "AgreedDate", maxlength = "60", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.AgreedDate.ToString()})*@
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.AgreedDate.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.AgreedDate, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.AgreedDate)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Available.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Available.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @Html.TextBoxFor(model => model.CaseSolution.Available, new { id = "Available", maxlength = "60", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Available.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Available.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Available, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Available)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.CaseFieldSettings.Count() != 0)
                                    {
                                        <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Cost.ToString())">
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Cost.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                <table>
                                                    <tr>
                                                        <td>
                                                            @Translation.Get("Artikelkostnad", SessionFacade.CurrentLanguageId)<br />
                                                            @Html.TextBoxFor(model => model.CaseSolution.Cost, new { maxlength = "7", @class = "inputw50 acceptRules", standardId = GlobalEnums.TranslationCaseFields.Cost.ToString() })
                                                        </td>
                                                        <td>
                                                            @Translation.Get("Övrig kostnad", SessionFacade.CurrentLanguageId)<br />
                                                            @Html.TextBoxFor(model => model.CaseSolution.OtherCost, new { maxlength = "7", @class = "inputw50 acceptRules", standardId = "OtherCost" })
                                                        </td>
                                                        <td>
                                                            @Translation.Get("Valuta", SessionFacade.CurrentLanguageId)<br />
                                                            <select id="Casesolution.Currency" name="Casesolution.Currency" class="inputw100 acceptRules" standardId="Currency">
                                                                <option value="">&nbsp;</option>
                                                                @if (Model.currencies != null)
                                                                {
                                                                    foreach (var e in Model.currencies)
                                                                    {
                                                                        <option value="@e.Code" @e.Code.ValueIsSelected(Model.CaseSolution.Currency)>@e.Code</option>
                                                                    }
                                                                }
                                                            </select>
                                                        </td>
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Cost.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Cost, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Cost)
                                            </td>
                                        </tr>
                                    }
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Filename.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.Filename.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @if (Model.EditMode == AccessMode.FullAccess)
                                            {
                                                <a href="#upload_files_popup" role="button" class="btn acceptRules" data-toggle="modal" standardId='@GlobalEnums.TranslationCaseFields.Filename.ToString()'>@Translation.Get("Lägg till", SessionFacade.CurrentLanguageId)</a>
                                            }
                                            <div id="divCaseFiles">
                                                @*@Html.Partial("_CaseFiles", Model.CaseFilesModel)*@
                                            </div>
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Filename.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.FileName, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Filename)
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div style="@Model.displayCaseManagementInfoHtml()" class="casehandling-block hideshow">
                        <h4>@Translation.Get("Övrigt", Enums.TranslationSource.TextTranslation)</h4>
                        <div class="row">
                            <div class="span12">
                                <table class="tableform">
                                    <tr>
                                        <td style="min-width:200px"></td>
                                        <td style="width:300px"></td>
                                        <td style="width:300px">
                                            <table>
                                                <tr>
                                                    <td style="min-width:80px;text-align:center"></td>
                                                    <td style="min-width:80px;text-align:center"></td>
                                                    <td style="min-width:80px;text-align:center"></td>
                                                </tr>
                                            </table>
                                        </td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <td></td>
                                    </tr>
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.DropDownListFor(model => model.CaseSolution.CaseWorkingGroup_Id, Model.CaseWorkingGroups, "", new { id = "WorkingGroup", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString() })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.WorkingGroup, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.WorkingGroup_Id)
                                        </td>
                                    </tr>
                                    @*                                "Handläggare" aka Performer*@
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.DropDownListFor(model => model.CaseSolution.PerformerUser_Id, Model.PerformerUsers, new { id = "PerformerUser", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString() })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Administrator, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Performer_User_Id)
                                        </td>
                                    </tr>
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Priority_Id.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.Priority_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.DropDownListFor(model => model.CaseSolution.Priority_Id, Model.Priorities, "", new { id = "Priority", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Priority_Id.ToString() })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Priority_Id.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Priority, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Priority_Id)
                                        </td>
                                    </tr>
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Status_Id.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.Status_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.DropDownListFor(model => model.CaseSolution.Status_Id, Model.Status, "", new { id = "Status", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Status_Id.ToString() })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Status_Id.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Status, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Status_Id)
                                        </td>
                                    </tr>
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.DropDownListFor(model => model.CaseSolution.StateSecondary_Id, Model.StateSecondaries, "", new { id = "StateSecondary", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString() })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.StateSecondary, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.StateSecondary_Id)
                                        </td>
                                    </tr>
                                    @if (Model.projects != null)
                                    {
                                        <tr>
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Project.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @*<select id="Project" name="CaseSolution.Project_Id">
                                        <option value="">&nbsp;</option>
                                        @if (Model.Projects != null)
                                        {
                                            foreach (var e in Model.Projects)
                                            {
                                                <option value="@e.Id" @e.Id.IdIsSelected(Model.Projects.ToString())>@e.Name</option>
                                            }
                                        }
                                    </select>*@
                                                @Html.DropDownListFor(model => model.CaseSolution.Project_Id, Model.projects, "", new { id = "Project", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Project.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Project.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Project, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Project)
                                            </td>
                                        </tr>
                                    }
                                    @if (Model.problems != null)
                                    {
                                        <tr>
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Problem.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @*<select id="Problems" name="model.Problems">
                                        <option value="">&nbsp;</option>

                                            @foreach (var e in Model.Problems)
                                            {
                                                <option value="@e.Id" @e.Id.IdIsSelected(Model.Problems.ToString())>@e.Name</option>
                                            }

                                    </select>*@
                                                @Html.DropDownListFor(model => model.CaseSolution.Problem_Id, Model.problems, "", new { id = "Problem", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Problem.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Problem.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Problem, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Problem)
                                            </td>
                                        </tr>
                                    }
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.CausingPart.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.CausingPart.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            <select id="CausingPart" name="CaseSolution.CausingPartId" class='chosen-single-select acceptRules' standardId='@GlobalEnums.TranslationCaseFields.CausingPart.ToString()'>
                                                <option> &nbsp; </option>
                                                @if (Model.CausingParts != null)
                                                {
                                                    foreach (var causingPart in Model.CausingParts)
                                                    {
                                                        <option value="@causingPart.Value" @(causingPart.Selected ? "Selected" : "")> @causingPart.Text </option>
                                                    }
                                                }
                                            </select>

                                            @*@Html.DropDownListFor(model => model.CaseSolution.CausingPartId, Model.CausingParts, "", new { id = "CausingPart" })*@
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.CausingPart.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.CausingPart, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.CausingPart)
                                        </td>
                                    </tr>
                                    @if (Model.changes != null)
                                    {
                                        <tr>
                                            <td>
                                                @Translation.Get(GlobalEnums.TranslationCaseFields.Change.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                            </td>
                                            <td>
                                                @*<select id="changes" name="model.changes">
                                        <option value="">&nbsp;</option>

                                            @foreach (var e in Model.changes)
                                            {
                                                <option value="@e.Id" @e.Id.IdIsSelected(Model.changes.ToString())>@e.ChangeTitle</option>
                                            }

                                    </select>*@
                                                @Html.DropDownListFor(model => model.CaseSolution.Change_Id, Model.changes, "", new { id = "Change", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.Change.ToString() })
                                            </td>
                                            <td>
                                                <table>
                                                    <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Change.ToString()">
                                                        @*State icons will be added Here*@
                                                    </tr>
                                                </table>
                                            </td>
                                            <td>
                                                @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Change, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Change)
                                            </td>
                                        </tr>
                                    }
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.PlanDate.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.PlanDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.EditorFor(model => Model.CaseSolution.PlanDate, "DatePicker", new { id = "PlanDate", inputAttributes = new Dictionary<string, object> { { "class", "acceptRules" }, { "standardId", GlobalEnums.TranslationCaseFields.PlanDate.ToString() } } })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.PlanDate.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.PlanDate, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.PlanDate)
                                        </td>
                                    </tr>
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.WatchDate.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.WatchDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.EditorFor(model => Model.CaseSolution.WatchDate, "DatePicker", new { id = "WatchDate", inputAttributes = new Dictionary<string, object> { { "class", "acceptRules" }, { "standardId", GlobalEnums.TranslationCaseFields.WatchDate.ToString() } } })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.WatchDate.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.WatchDate, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.WatchDate)
                                        </td>
                                    </tr>
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.Verified.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.Verified.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td class="checkbox" style="padding-left: 20px">
                                            <input type="checkbox" name="Casesolution.Verified" @(Model.CaseSolution.Verified == 1 ? "checked=checked" : "") value="1" class="acceptRules" standardId='@GlobalEnums.TranslationCaseFields.Verified.ToString()' />
                                            <input type="hidden" name="Casesolution.Verified" value="0" />
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.Verified.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.Verified, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.Verified)
                                        </td>
                                    </tr>

                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.VerifiedDescription.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.VerifiedDescription.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(model => model.CaseSolution.VerifiedDescription, new { id = "VerifiedDescription", maxlength = "200", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.VerifiedDescription.ToString() })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.VerifiedDescription.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.VerifiedDescription, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.VerifiedDescription)
                                        </td>
                                    </tr>

                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.SolutionRate.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.SolutionRate.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            <select id="casesolution__SolutionRate" name="CaseSolution.SolutionRate" class="acceptRules" standardId='@GlobalEnums.TranslationCaseFields.Problem.ToString()'>
                                                <option value="">&nbsp;</option>
                                                @for (var i = 10; i < 110; i = i + 10)
                                                {
                                                    <option value="@i.ToString()" @i.IdIsSelected(Model.CaseSolution.SolutionRate)>@i.ToString()</option>
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.SolutionRate.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.SolutionRate, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.SolutionRate)
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                    <h4>@Translation.Get("Logg", Enums.TranslationSource.TextTranslation)</h4>
                    <div class="row">
                        <div class="span12">
                            <table class="tableform" border="0">
                                <tr>
                                    <td style="min-width:200px"></td>
                                    <td style="width:300px"></td>
                                    <td style="width:300px">
                                        <table>
                                            <tr>
                                                <td style="min-width:80px;text-align:center"></td>
                                                <td style="min-width:80px;text-align:center"></td>
                                                <td style="min-width:80px;text-align:center"></td>
                                            </tr>
                                        </table>
                                    </td>
                                    <td></td>
                                </tr>
                                <tr>
                                    <td></td>
                                </tr>
                                @if (Model.CaseFieldSettings.Count() != 0)
                                {
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.tblLog_Text_External.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.tblLog_Text_External.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.TextAreaFor(model => model.CaseSolution.Text_External, new { style = "height:100px;", maxlength = "3000", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.tblLog_Text_External.ToString() })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.tblLog_Text_External.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.ExternalLogNote, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.tblLog_Text_External)
                                        </td>
                                    </tr>
                                }
                                @if (Model.CaseFieldSettings.Count() != 0)
                                {
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.tblLog_Filename.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.tblLog_Filename.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td></td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.tblLog_Filename.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.LogFileName, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.tblLog_Filename)
                                        </td>
                                    </tr>

                                }

                                @if (Model.CaseFieldSettings.Count() != 0)
                                {
                                    <tr>
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.TextAreaFor(model => model.CaseSolution.Text_Internal, new { style = "height:100px;", maxlength = "3000", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.tblLog_Text_Internal.ToString() })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.tblLog_Text_Internal.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.InternalLogNote, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.tblLog_Text_Internal)
                                        </td>
                                    </tr>
                                }

                                @if (Model.CaseFieldSettings.Count() != 0)
                                {
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.tblLog_Filename_Internal.ToString())">
                                        <td>@Translation.Get(GlobalEnums.TranslationCaseFields.tblLog_Filename_Internal.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)</td>
                                        <td></td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.tblLog_Filename_Internal.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.LogFileName_Internal, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.tblLog_Filename_Internal)
                                        </td>
                                    </tr>
                                }

                                @if (Model.CaseFieldSettings.Count() != 0)
                                {
                                    <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.FinishingDescription.ToString())">
                                        <td>
                                            @Translation.Get(GlobalEnums.TranslationCaseFields.FinishingDescription.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                        </td>
                                        <td>
                                            @Html.TextAreaFor(model => model.CaseSolution.FinishingDescription, new { style = "height:100px;", maxlength = "1000", @class = "acceptRules", standardId = GlobalEnums.TranslationCaseFields.FinishingDescription.ToString() })
                                        </td>
                                        <td>
                                            <table>
                                                <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.FinishingDescription.ToString()">
                                                    @*State icons will be added Here*@
                                                </tr>
                                            </table>
                                        </td>
                                        <td>
                                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.FinishingDescription, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.FinishingDescription)
                                        </td>
                                    </tr>
                                }

                                <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.FinishingDate.ToString())">
                                    <td>
                                        @Translation.Get(GlobalEnums.TranslationCaseFields.FinishingDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                    </td>
                                    <td>
                                        @Html.EditorFor(model => Model.CaseSolution.FinishingDate, "DatePicker", new { id = "FinishingDate", inputAttributes = new Dictionary<string, object> { { "class", "acceptRules" }, { "standardId", GlobalEnums.TranslationCaseFields.FinishingDate.ToString() } } })
                                    </td>
                                    <td>
                                        <table>
                                            <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.FinishingDate.ToString()">
                                                @*State icons will be added Here*@
                                            </tr>
                                        </table>
                                    </td>
                                    <td>
                                        @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.FinishingDate, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.FinishingDate)
                                    </td>
                                </tr>

                                <tr style="@Model.CaseFieldSettings.displayHtml(GlobalEnums.TranslationCaseFields.ClosingReason.ToString())">
                                    <td>
                                        @Translation.Get(GlobalEnums.TranslationCaseFields.ClosingReason.ToString(), Enums.TranslationSource.CaseTranslation, Model.CaseSolution.Customer_Id)
                                    </td>
                                    <td>
                                        <div id="divFinishingCause" class="btn-group">
                                            <div class="btn acceptRules" id="divBreadcrumbs_FinishingCause" standardId='@GlobalEnums.TranslationCaseFields.ClosingReason.ToString()'>@Model.Finishing_Cause_Path</div>
                                            <button class="btn dropdown-toggle" data-toggle="dropdown">
                                                <span class="caret"></span>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li><a href="#" value="">@Translation.Get("--", Enums.TranslationSource.TextTranslation)</a></li>
                                                @Html.FinishingCauseDropdownButtonString(Model.FinishingCauses)
                                            </ul>
                                            @Html.HiddenFor(model => model.CaseSolution.FinishingCause_Id)
                                        </div>
                                    </td>
                                    <td>
                                        <table>
                                            <tr id="stateIconPlace_@GlobalEnums.TranslationCaseFields.ClosingReason.ToString()">
                                                @*State icons will be added Here*@
                                            </tr>
                                        </table>
                                    </td>
                                    <td>
                                        @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.FinishingCause, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.ClosingReason)
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    @*<h4>@Translation.Get("Ärendeinformation", Enums.TranslationSource.TextTranslation)</h4>
        <div class="row">
            <div class="span12">
                <table class="tableform">
                </table>
            </div>
        </div>
        <h4>@Translation.Get("Övrigt", Enums.TranslationSource.TextTranslation)</h4>
        <div class="row">
            <div class="span12">
                <table class="tableform">

                </table>
            </div>
        </div>
        <h4>@Translation.Get("Logg", Enums.TranslationSource.TextTranslation)</h4>
        <div class="row">
            <div class="span12">
                <table class="tableform">

                </table>
            </div>
        </div>*@
                    <h4>@Translation.Get("Säkerhet", Enums.TranslationSource.TextTranslation)</h4>
                    <div class="row">
                        <div class="span12">
                            <table class="tableform" border="0">
                                <tr>
                                    @Translation.Get("Ärendemallen är endast tillgänglig för", Enums.TranslationSource.TextTranslation)
                                    <td style="min-width:200px">
                                        <b>@Translation.Get("Driftgrupp", Enums.TranslationSource.TextTranslation)</b>
                                    </td>
                                    <td style="width:300px">
                                        @Html.DropDownListFor(model => model.CaseSolution.WorkingGroup_Id, Model.WorkingGroups, "")
                                    </td>
                                    <td style="width:300px"></td>
                                    <td style="min-width:200px"></td>
                                    @*<td class="span9">
                            @Html.CaseSolutionSettingsFor(x => x.CaseSolutionSettingModels, CaseSolutionFields.WorkingGroup, Model.CaseFieldSettings, GlobalEnums.TranslationCaseFields.WorkingGroup_Id)
                        </td>*@
                                </tr>
                            </table>
                        </div>
                    </div>
                    <h4>
                        <input type="checkbox" id="chkSchedule" name="Schedule" @(Model.Schedule.ToBool() ? "checked='checked'" : "") value="1" style="vertical-align:top" />
                        <input type="hidden" name="Schedule" value="0" />
                        @Translation.Get("Schema", Enums.TranslationSource.TextTranslation)
                    </h4>
                    <div class="row">
                        <div class="span12">
                            <table class="tableform" border="0">
                                <tr>
                                    <td class="span3"></td>

                                    @* <td class="span9">

                        </td>*@

                                </tr>
                                <tr id="scheduleOptions" style="@(Model.Schedule.ToBool() ? "display:block" : "display:none")">
                                    <td class="span3">
                                        <p>
                                            <label class="radio">
                                                <!-- This is for cell width -->
                                                <input type="radio" name="ScheduleType" @(Model.ScheduleType == 1 ? "checked='checked'" : "") id="optScheduleType1" value="1" />
                                                @Translation.Get("Varje dag", Enums.TranslationSource.TextTranslation)
                                            </label>
                                        </p>
                                        <p>
                                            <label class="radio">
                                                <input type="radio" name="ScheduleType" @(Model.ScheduleType == 2 ? "checked='checked'" : "") id="optScheduleType2" value="2" />
                                                @Translation.Get("Varje vecka", Enums.TranslationSource.TextTranslation)
                                            </label>
                                        </p>
                                        <p>
                                            <label class="radio">
                                                <input type="radio" name="ScheduleType" @(Model.ScheduleType == 3 ? "checked='checked'" : "") id="optScheduleType3" value="3" />
                                                @Translation.Get("Varje månad", Enums.TranslationSource.TextTranslation)
                                            </label>
                                        </p>
                                    </td>
                                    <!-- ******************************* DAY ************************************** -->
                                    <td id="chosenDay" class="chDay span3" style="display: none;">

                                        <!--This is for cell width -->
                                        @Translation.Get("Starttid", Enums.TranslationSource.TextTranslation):
                                        <select name="ScheduleTime" style="width: 80px;">
                                            @for (int i = 0; i < 24; i++)
                                            {
                                                <option @(Model.ScheduleTime == i ? "selected='selected'" : "") value="@i">@i.ToString().PadLeft(2, '0'):00</option>
                                            }
                                        </select>

                                        <br />
                                        @Translation.Get("Bevakningsdatum", Enums.TranslationSource.TextTranslation):
                                        <br />
                                        @Translation.Get("Datum", Enums.TranslationSource.TextTranslation)
                                        +
                                        <select name="ScheduleWatchDate" style="width: 80px;">
                                            @for (int i = 0; i <= 20; i++)
                                            {
                                                <option @(Model.ScheduleWatchDate == i ? "selected='selected'" : "") value="@i">@i</option>
                                            }
                                        </select>
                                        @Translation.Get("dagar", Enums.TranslationSource.TextTranslation)
                                    </td>
                                    <!-- ********************************* WEEK ************************************* -->
                                    <td id="chosenWeek" class="chWeek span6" style="display: none;">
                                        <!-- This is for cell width -->
                                        <label>
                                            @Translation.Get("Dagar i veckan", Enums.TranslationSource.TextTranslation):
                                        </label>
                                        <p>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleDay" @(Model.ScheduleDays.IndexOf(",1,") >= 0 ? "checked='checked'" : "") value="1" />
                                                @Translation.Get("Måndag", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleDay" @(Model.ScheduleDays.IndexOf(",2,") >= 0 ? "checked='checked'" : "") value="2" />
                                                @Translation.Get("Tisdag", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleDay" @(Model.ScheduleDays.IndexOf(",3,") >= 0 ? "checked='checked'" : "") value="3" />
                                                @Translation.Get("Onsdag", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleDay" @(Model.ScheduleDays.IndexOf(",4,") >= 0 ? "checked='checked'" : "") value="4" />
                                                @Translation.Get("Torsdag", Enums.TranslationSource.TextTranslation)
                                            </label>
                                        </p>
                                        <p>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleDay" @(Model.ScheduleDays.IndexOf(",5,") >= 0 ? "checked='checked'" : "") value="5" />
                                                @Translation.Get("Fredag", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleDay" @(Model.ScheduleDays.IndexOf(",6,") >= 0 ? "checked='checked'" : "") value="6" />
                                                @Translation.Get("Lördag", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleDay" @(Model.ScheduleDays.IndexOf(",7,") >= 0 ? "checked='checked'" : "") value="7" />
                                                @Translation.Get("Söndag", Enums.TranslationSource.TextTranslation)
                                            </label>
                                        </p>
                                    </td>
                                    <!-- ********************************* MONTH ************************************* -->
                                    <td id="chosenMonth" class="chMonth" style="display: none;">
                                        <p class="form-inline">
                                            <label class="radio">
                                                <!-- This is for cell width -->
                                                <input type="radio" name="ScheduleMonthly" @(Model.ScheduleMonthlyOrder == 0 ? "checked='checked'" : "") id="optday" value="1" style="vertical-align:top" />
                                                @Translation.Get("Dag", Enums.TranslationSource.TextTranslation):
                                            </label>
                                            <select name="ScheduleMonthlyDay" style="width: 85px;" id="cbo0">
                                                @for (int i = 1; i <= 31; i++)
                                                {
                                                    <option @(Model.ScheduleDays == i.ToString() ? "selected='selected'" : "") value="@i">@i</option>
                                                }
                                            </select>
                                        </p>
                                        <p class="form-inline">
                                            <label class="radio">
                                                <input type="radio" name="ScheduleMonthly" onchange="click()" @(Model.ScheduleMonthlyOrder != 0 ? "checked='checked'" : "") id="optthe" value="2" style="vertical-align:top" />
                                                @Translation.Get("Den", Enums.TranslationSource.TextTranslation):
                                            </label>
                                            <select name="ScheduleMonthlyOrder" style="width: 85px;" id="cbo1">
                                                <option value="1" @(Model.ScheduleMonthlyOrder == 1 ? "selected='selected'" : "")>@Translation.Get("första", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="2" @(Model.ScheduleMonthlyOrder == 2 ? "selected='selected'" : "")>@Translation.Get("andra", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="3" @(Model.ScheduleMonthlyOrder == 3 ? "selected='selected'" : "")>@Translation.Get("tredje", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="4" @(Model.ScheduleMonthlyOrder == 4 ? "selected='selected'" : "")>@Translation.Get("fjärde", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="5" @(Model.ScheduleMonthlyOrder == 5 ? "selected='selected'" : "")>@Translation.Get("sista", Enums.TranslationSource.TextTranslation)</option>
                                            </select>
                                            <select name="ScheduleMonthlyWeekday" style="width: 110px;" id="cbo2">
                                                <option value="1" @(Model.ScheduleMonthlyWeekday == 1 ? "selected='selected'" : "")>@Translation.Get("Måndagen", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="2" @(Model.ScheduleMonthlyWeekday == 2 ? "selected='selected'" : "")>@Translation.Get("Tisdagen", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="3" @(Model.ScheduleMonthlyWeekday == 3 ? "selected='selected'" : "")>@Translation.Get("Onsdagen", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="4" @(Model.ScheduleMonthlyWeekday == 4 ? "selected='selected'" : "")>@Translation.Get("Torsdagen", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="5" @(Model.ScheduleMonthlyWeekday == 5 ? "selected='selected'" : "")>@Translation.Get("Fredagen", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="6" @(Model.ScheduleMonthlyWeekday == 6 ? "selected='selected'" : "")>@Translation.Get("Lördagen", Enums.TranslationSource.TextTranslation)</option>
                                                <option value="7" @(Model.ScheduleMonthlyWeekday == 7 ? "selected='selected'" : "")>@Translation.Get("Söndagen", Enums.TranslationSource.TextTranslation)</option>
                                            </select>
                                        </p>
                                        <p>
                                            <label>
                                                @Translation.Get("Månader", Enums.TranslationSource.TextTranslation):
                                            </label>
                                        </p>
                                        <p>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",1,") >= 0 ? "checked='checked'" : "") value="1" />
                                                @Translation.Get("Januari", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",2,") >= 0 ? "checked='checked'" : "") value="2" />
                                                @Translation.Get("Februari", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",3,") >= 0 ? "checked='checked'" : "") value="3" />
                                                @Translation.Get("Mars", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",4,") >= 0 ? "checked='checked'" : "") value="4" />
                                                @Translation.Get("April", Enums.TranslationSource.TextTranslation)
                                            </label>
                                        </p>
                                        <p>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",5,") >= 0 ? "checked='checked'" : "") value="5" />
                                                @Translation.Get("Maj", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",6,") >= 0 ? "checked='checked'" : "") value="6" />
                                                @Translation.Get("Juni", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",7,") >= 0 ? "checked='checked'" : "") value="7" />
                                                @Translation.Get("Juli", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",8,") >= 0 ? "checked='checked'" : "") value="8" />
                                                @Translation.Get("Augusti", Enums.TranslationSource.TextTranslation)
                                            </label>
                                        </p>
                                        <p>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",9,") >= 0 ? "checked='checked'" : "") value="9" />
                                                @Translation.Get("September", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",10,") >= 0 ? "checked='checked'" : "") value="10" />
                                                @Translation.Get("Oktober", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",11,") >= 0 ? "checked='checked'" : "") value="11" />
                                                @Translation.Get("November", Enums.TranslationSource.TextTranslation)
                                            </label>
                                            <label class="checkbox inline">
                                                <input type="checkbox" name="ScheduleMonth" @(Model.ScheduleMonths.IndexOf(",12,") >= 0 ? "checked='checked'" : "") value="12" />
                                                @Translation.Get("December", Enums.TranslationSource.TextTranslation)
                                            </label>
                                        </p>
                                    </td>
                                </tr>
                            </table>
                            @Html.HiddenFor(model => model.CaseSolution.Customer_Id)
                            @Html.HiddenFor(model => model.CaseSolution.Id, new { id = "hidId" })

                            @Html.HiddenFor(model => model.CaseSolution.FormGUID)
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<script type="text/javascript">

    var validator = $("#target").validate({
        ignore: "",
        rules: {
            "CaseSolution.Name": {
                required: true
            }

            //"CaseSolution.Text_External": {
            //    maxlength: 3000
            //}
        },

        messages: {
            "CaseSolution.Name": {
                required: "@Translation.GetForJS("Du måste ange ett namn på ärendemallen", Enums.TranslationSource.TextTranslation)"
            }
        },
        submitHandler: function (form) {

            setHiddenField();
            //var id=document.getElementById('CaseSolution_Id').value;
            //if (id==0)
            //{
            //    var form = $("#target").serialize();
            //    $.ajax({
            //        type: 'POST',
            //        url: "/CaseSolution/NewAndEdit",
            //        data: form,
            //        success: function (data) {

            //            $('#divReplaceConditions').html($(data));
            //        },
            //        error: function (result) {

            //        }
            //    });
            //}
            form.submit();
        }
    });
</script>
<script>
    
    function checkVisibility()
    {
        var $elementChosen = $('#SplitToCaseSolutionIds');
        var $elementDiv = $('#divSplitToAllCaseSolutions');

        var $element = $('#Casesolution_CaseRelationType');
        if ($element.val() == '0')
        {
            $elementChosen.val('');
            $elementChosen.trigger("chosen:updated"); 


            if (!$elementDiv.hasClass('hidden'))
            {
                $elementDiv.addClass('hidden');
            }
        }
        else
        {
            if ($elementDiv.hasClass('hidden'))
            {
                $elementDiv.removeClass('hidden');
            }
        }
    }
    
    $('#Casesolution_CaseRelationType').change(function () {
        checkVisibility();
    });
    
    $('#CaseSolution_Text_External').on('onchange', function () {
        checkLength(this);
    });

    $('#CaseSolution_Text_External').on('onkeyup', function () {
        checkLength(this);
    });

    $('#CaseSolution_Text_External').on('onpaste', function () {
        checkLength(this);
    });

    $('#CaseSolution_Text_Internal').on('onchange', function () {
        checkLength(this);
    });

    $('#CaseSolution_Text_Internal').on('onkeyup', function () {
        checkLength(this);
    });

    $('#CaseSolution_Text_Internal').on('onpaste', function () {
        checkLength(this);
    });

    var maxLength = 3000;
    function checkLength(el) {
        if (el.value.length > maxLength) {
            el.value = el.value.substring(0, maxLength);
        }
    }

    $(function () {

        checkVisibility();

        $('#CaseSolution_Text_External').resizable();
        $('#CaseSolution_Text_Internal').resizable();

        $('#SaveCaseSolution').on('click', function () {
            var t = $('#target').valid();

            if (t == true){
                $('.secnav li a').addClass("disabled");
                $('.secnav li a').css("pointer-events", "none");
            };

            $('#target').submit();
        })


        $('#CopyCaseSolution').on('click', function () {

            var t = document.getElementById('inputCopy');
            document.getElementById('hidId').value=0;
            t.style.display = 'block';

        })
    });

    $(document).ready(function () {
        var SelectedValue = $('#availableTabs').val();
        var $activeTabSelfservice = $('#activeTabSelfservice');
        if (SelectedValue != 'both') {
            $activeTabSelfservice.addClass('hidden');
        }
        else {
            if ($activeTabSelfservice.hasClass('hidden')) {
                $activeTabSelfservice.removeClass('hidden');
            }
        }
    });

    $('#availableTabs').change(function () {

        var SelectedValue = $(this).val();
        var $activeTabSelfservice = $('#activeTabSelfservice');

        if (SelectedValue == 'both') {
            if ($activeTabSelfservice.hasClass('hidden')) {
                $activeTabSelfservice.removeClass('hidden');
            }          
        }
        else {
            $activeTabSelfservice.addClass('hidden');
        }

    });



    function setHiddenField()
    {

        var i, e, d;
        var name='';
        var value='';
        var final='';

        var ancestor = document.getElementById('divReplaceConditions'),
            descendents = ancestor.getElementsByTagName('*');

        for (i = 0; i < descendents.length; ++i) {

            e = descendents[i];


            if (e.id.toString().substring(0,3)=='lst')
            {

                name=e.id.replace('lst','');

                //alert(name);

                if (name!='AddFieldSettings' && name!='AddFieldSettings_chosen')
                {
                    var pos=0;
                    pos=name.indexOf('chosen');

                    if (pos<0)
                    {

                        value = $(e).val();

                        if (final=='')
                        {
                            final=name + ':' + value;
                        }
                        else
                        {
                            final=final + '~' + name + ':' + value;
                        }
                    }
                }
            }
        }

        var h=document.getElementById('selectedValues');
        h.value=final;
    }

 

    function RemoveCondition (v)
    {
        var t=v.id.toString().replace('btn_','');
        var id=document.getElementById('CaseSolution_Id').value;

        if (id!=0 && t != '')
        {
            var url = "/CaseSolution/RemoveCondition/";
            $.post(url, { condition: t.toString(), casesolutionid: id.toString() })
                 .done(function (response) {

                     $("#divReplaceConditions").html(response);
                 });
        }

    }



    function AddCondition()
    {
        var id=document.getElementById('CaseSolution_Id').value;
        var e = document.getElementById("lstAddFieldSettings");
        var value = e.options[e.selectedIndex].value;

        if (id!=0 && value != 0)
        {


            $.post("/CaseSolution/AddCondition/", { conditionid: "'" + value.toString() + "'", casesolutionid: "'" + id.toString() + "'" }, function (returnHtml) {
                //alert(returnHtml);
                $('#divReplaceConditions').html($(returnHtml));
                //$('#divConditions').html($(returnHtml));

            });



        }
        else
        {

            var form = $("#target").serialize();
            $.ajax({
                type: 'POST',
                url: "/CaseSolution/NewAndEdit",
                data: form,
                success: function (data) {

                    $('#divReplaceConditions').html($(data));
                },
                error: function (result) {

                }
            });



        }


    }

    function GetSelectedTextValue(ddl) {
        var selectedValue = ddl.value;
        if (selectedValue==0 && selectedValue!='')
        {
            document.getElementById('divConditions').style.display = 'block';
        }
        else
        {
            document.getElementById('divConditions').style.display = 'none';
        }
    }


    function ShowHideCaseDiv(chk) {

        if (document.getElementById('Casesolution_ShowInsideCase').checked==true)
        {
            document.getElementById('divShowCase').style.display = 'block';
            if(document.getElementById('ConnectTo').value==0  && document.getElementById('ConnectTo').value!='')
            {
                document.getElementById('divConditions').style.display = 'block';
            }
        }
        else
        {
            document.getElementById('divConditions').style.display = 'none';
            document.getElementById('divShowCase').style.display = 'none';
        }

    }

    $( document ).ready(function() {

        if (document.getElementById('Casesolution_ShowInsideCase').checked)
        {
            if(document.getElementById('ConnectTo').value==0  && document.getElementById('ConnectTo').value!='')
            {
                document.getElementById('divConditions').style.display = 'block';
            }


            document.getElementById('divShowCase').style.display = 'block';
        }
        else
        {
            document.getElementById('divConditions').style.display = 'none';
            document.getElementById('divShowCase').style.display = 'none';
        }




    });
</script>
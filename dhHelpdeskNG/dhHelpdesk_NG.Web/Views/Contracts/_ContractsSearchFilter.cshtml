@using DH.Helpdesk.BusinessData.Enums.Contracts
@using DH.Helpdesk.Common.Enums
@using DH.Helpdesk.Web.Models.Contract
@model DH.Helpdesk.Web.Models.Contract.ContractIndexViewModel

@functions {
    private string getFieldName(ContractsSettingRowViewModel field, string defaultName)
    {
        var name = "";
        if (SessionFacade.CurrentLanguageId == LanguageIds.English)
            name = field.ContractFieldLabel_Eng;
        else if (SessionFacade.CurrentLanguageId == LanguageIds.Swedish)
            name = field.ContractFieldLabel;
        else
            name = Translation.GetCoreTextTranslation(defaultName);

        return name;
    }

}

@{
    var placeholder = Translation.GetCoreTextTranslation("Välj en eller flera");
}

<div class="span8">
    <table class="tableform">
        @{
            var field = Model.Setting.SettingRows.FirstOrDefault(sr => sr.ContractField == EnumContractFieldSettings.Category);
        }
        @if (field != null && field.Show)
        {
            <tr>
                <td>@getFieldName(field, "Kategori")</td>
                <td>
                    @Html.DropDownListFor(m => m.SearchFilterModel.SelectedContractCategories, Model.SearchFilterModel.ContractCategories,
                        new {id = "lstContractCategories", @data_placeholder = @placeholder, multiple = "multiple", @class = "chosen-select"})
                </td>
            </tr>
        }
        @{
            field = Model.Setting.SettingRows.FirstOrDefault(sr => sr.ContractField == EnumContractFieldSettings.Supplier);
        }
        @if (field != null && field.Show)
        {
            <tr>
                <td>@getFieldName(field, "Leverantör")</td>
                <td>
                    @Html.DropDownListFor(m => m.SearchFilterModel.SelectedSuppliers,
                        Model.SearchFilterModel.Suppliers,
                        new {id = "lstSuppliers", @data_placeholder = @placeholder, multiple = "multiple", @class = "chosen-select"})
                </td>
            </tr>
        }
        @{
            field = Model.Setting.SettingRows.FirstOrDefault(sr => sr.ContractField == EnumContractFieldSettings.ResponsibleUser);
        }
        @if (field != null && field.Show)
        {
            <tr>
                <td>@getFieldName(field, "Ansvarig")</td>
                <td>
                    @Html.DropDownListFor(m => m.SearchFilterModel.SelectedResponsibleUsers,
                        Model.SearchFilterModel.ResponsibleUsers,
                        new {id = "lstResponsible", @data_placeholder = @placeholder, multiple = "multiple", @class = "chosen-select"})
                </td>
            </tr>
        }
        @{
            field = Model.Setting.SettingRows.FirstOrDefault(sr => sr.ContractField == EnumContractFieldSettings.ResponsibleFollowUp);
        }
        @if (field != null && field.Show)
        {
            <tr>
                <td>@getFieldName(field, "Ansvarig uppföljning")</td>
                <td>
                    @Html.DropDownListFor(m => m.SearchFilterModel.SelectedResponsibleFollowUpUsers,
                        Model.SearchFilterModel.ResponsibleUsers,
                        new {id = "lstResponsibleFollowUpUsers", @data_placeholder = @placeholder, multiple = "multiple", @class = "chosen-select"})
                </td>
            </tr>
        }
        @{
            field = Model.Setting.SettingRows.FirstOrDefault(sr => sr.ContractField == EnumContractFieldSettings.Department);
        }
        @if (field != null && field.Show)
        {
            <tr>
                <td>@getFieldName(field, "Avdelning")</td>
                <td>
                    @Html.DropDownListFor(m => m.SearchFilterModel.SelectedDepartments,
                        Model.SearchFilterModel.Departments,
                        new {id = "lstDepartment", @data_placeholder = @placeholder, multiple = "multiple", @class = "chosen-select"})
                </td>
            </tr>
        }
        <tr>
            <td>@Translation.GetCoreTextTranslation("Visa")</td>
            <td>
                @Html.DropDownListFor(m => m.SearchFilterModel.SelectedState,
                    Model.SearchFilterModel.ShowContracts,
                    new {id = "lstShow", @data_placeholder = @Translation.GetCoreTextTranslation("Välj"), @class = "inputw300"})
            </td>
        </tr>
        <tr>
            <td class="span3">@Translation.GetCoreTextTranslation("Sök")</td>
            <td>
                @Html.TextBoxFor(m => m.SearchFilterModel.SearchText, new { style = "width:285px", id = "txtSearch" })
                <input type="submit" class="btn" id="searchQueryBtn" value="@Translation.GetCoreTextTranslation("Sök")" />
            </td>
        </tr>
        <tr>
            <td colspan="2">
                &nbsp;
            </td>
        </tr>
    </table>
</div>
<div class="span6">
    <table class="tableform">
        @{
            field = Model.Setting.SettingRows.FirstOrDefault(sr => sr.ContractField == EnumContractFieldSettings.StartDate);
        }
        @if (field != null && field.Show)
        {
        <tr class="date-block">
            <td>@getFieldName(field, ContractFieldLabels.ContractStartDate)</td>
            <td>
                @Html.EditorFor(m => Model.SearchFilterModel.StartDateFrom, "DatePicker", new { id = "divSearch_StartDateFrom" })
                @Html.EditorFor(m => Model.SearchFilterModel.StartDateTo, "DatePicker", new { id = "divSearch_StartDateTo" })
            </td>
        </tr>
        }
        @{
            field = Model.Setting.SettingRows.FirstOrDefault(sr => sr.ContractField == EnumContractFieldSettings.EndDate);
        }
        @if (field != null && field.Show)
        {
            <tr class="date-block">
                <td>@getFieldName(field, ContractFieldLabels.ContractEndDate)</td>
                <td>
                    @Html.EditorFor(m => Model.SearchFilterModel.EndDateFrom, "DatePicker", new { id = "divSearch_EndDateFrom" })
                    @Html.EditorFor(m => Model.SearchFilterModel.EndDateTo, "DatePicker", new { id = "divSearch_EndDateTo" })
                </td>
            </tr>
        }
        @{
            field = Model.Setting.SettingRows.FirstOrDefault(sr => sr.ContractField == EnumContractFieldSettings.NoticeDate);
        }
        @if (field != null && field.Show)
        {
            <tr class="date-block">
                <td>@getFieldName(field, ContractFieldLabels.Noticedate)</td>
                <td>
                    @Html.EditorFor(m => Model.SearchFilterModel.NoticeDateFrom, "DatePicker", new { id = "divSearch_NoticeDateFrom" })
                    @Html.EditorFor(m => Model.SearchFilterModel.NoticeDateTo, "DatePicker", new { id = "divSearch_NoticeDateTo" })
                </td>
            </tr>
        }
    </table>
</div>

<script type="text/javascript">
    $(function () {
        BindChosenSelect('lstContractCategories', @Model.SearchFilterModel.SelectedContractCategories.ToJavaScriptObject());
        BindChosenSelect('lstSuppliers', @Model.SearchFilterModel.SelectedSuppliers.ToJavaScriptObject());
        BindChosenSelect('lstResponsible', @Model.SearchFilterModel.SelectedResponsibleUsers.ToJavaScriptObject());
        BindChosenSelect('lstResponsibleFollowUpUsers', @Model.SearchFilterModel.SelectedResponsibleFollowUpUsers.ToJavaScriptObject());
        BindChosenSelect('lstDepartment', @Model.SearchFilterModel.SelectedDepartments.ToJavaScriptObject());
    });

    function BindChosenSelect(controlId, items) {
        var chosen$ = $("#" + controlId);
        if (items && items.length) {
            chosen$.val(items);
            chosen$.trigger("chosen:updated");
        }
    }
</script>

@using DH.Helpdesk.BusinessData.Enums.Changes
@using DH.Helpdesk.BusinessData.Enums.Changes.Fields
@using DH.Helpdesk.Common.Enums
@using DH.Helpdesk.Services.DisplayValues.Changes
@model DH.Helpdesk.Web.Models.Changes.ChangesGrid.ChangesGridModel

@Translation.Get("Changes found: ")
@Model.ChangesFound

<table id="Change_Table" class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            @foreach (var header in Model.Headers)
            {
                if (!IsStatusField(header.FieldName))
                {
                    continue;
                }                
                <th><a title="@header.Caption"><i class="icon-thumbs-up"></i></a></th>                
            }
            <th onclick=" sortGrid('@OtherField.Id') " class="thpointer">@Translation.Get("Ändring")</th>
            @foreach (var header in Model.Headers)
            {
                if (IsStatusField(header.FieldName))
                {
                    continue;
                }
                
                <th onclick=" sortGrid('@header.FieldName') " class="thpointer">@Translation.Get(header.Caption)
                    @if (Model.SortField != null && header.FieldName == Model.SortField.Name)
                    {
                        switch (Model.SortField.SortBy)
                        {
                            case SortBy.Ascending:
                                <i class="icon-chevron-up"></i>
                                break;
                            case SortBy.Descending:
                                <i class="icon-chevron-down"></i>
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    }
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var change in Model.Changes)
        {
            <tr onclick=" window.location.href = '@Url.Action("Edit", new RouteValueDictionary { { "id", change.Id } })' ">
                @for (var i = 0; i < change.FieldValues.Count; i++)
                {
                    var changeField = Model.Headers[i];
                    var changeFieldValue = change.FieldValues.FirstOrDefault(v => v.FieldName == changeField.FieldName);
                    if (changeFieldValue == null)
                    {
                        continue;
                    }

                    var status = changeFieldValue.Value as StepStatusDisplayValue;
                    
                    if (status == null)
                    {
                        continue;
                    }

                    <td class="tdpointer">
                        @switch (status.Value)
                        {
                            case StepStatus.Approved:
                                <i class="icon-thumbs-up icon-green"></i>
                                break;
                            case StepStatus.Rejected:
                                <i class="icon-thumbs-down icon-red"></i>
                                break;
                            case StepStatus.None:
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    </td>                                        
                }
                <td class="tdpointer">
                    @("#" + change.Id)
                </td>
                @for (var i = 0; i < change.FieldValues.Count; i++)
                {
                    var changeField = Model.Headers[i];
                    var changeFieldValue = change.FieldValues.FirstOrDefault(v => v.FieldName == changeField.FieldName);
                    if (changeFieldValue == null)
                    {
                        continue;
                    }

                    if (changeFieldValue.Value is StepStatusDisplayValue)
                    {
                        continue;
                    }
                    
                    <td class="tdpointer">@changeFieldValue.Value.GetDisplayValue()</td>
                }
            </tr>
        }
    </tbody>
</table>
@functions    {

    private bool IsStatusField(string fieldName)
    {
        if (string.IsNullOrEmpty(fieldName))
        {
            return false;
        }

        return fieldName == RegistrationField.Approval || 
            fieldName == AnalyzeField.Approval ||
            fieldName == ImplementationField.ImplementationReady ||
            fieldName == EvaluationField.EvaluationReady;
    }    

}

<script type="text/javascript" src="@Url.Content("~/Content/js/dhHelpdesk.js")"></script>

<script>

    //$(document).ready(function () {
    //    InitDataTable("Change_Table");
    //});

</script>
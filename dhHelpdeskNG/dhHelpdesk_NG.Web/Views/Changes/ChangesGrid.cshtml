
@using DH.Helpdesk.BusinessData.Enums.Changes
@using DH.Helpdesk.Common.Enums
@model DH.Helpdesk.Web.Models.Changes.ChangesGrid.ChangesGridModel

@Translation.Get("Changes found: ")
@Model.ChangesFound

<table class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            <th><i class="icon-thumbs-up"></i></th>
            <th><i class="icon-thumbs-up"></i></th>
            <th><i class="icon-thumbs-up"></i></th>
            <th><i class="icon-thumbs-up"></i></th>
            @foreach (var header in Model.Headers)
            {
                <th onclick=" sortGrid('@header.FieldName') " class="thpointer">@Translation.Get(header.Caption)
                    @if (Model.SortField != null && header.FieldName == Model.SortField.Name)
                    {
                        switch (Model.SortField.SortBy)
                        {
                            case SortBy.Ascending:
                                <i class="icon-chevron-up"></i>
                                break;
                            case SortBy.Descending:
                                <i class="icon-chevron-down"></i>
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                    }
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var change in Model.Changes)
        {
            <tr onclick=" window.location.href = '@Url.Action("Edit", new RouteValueDictionary { { "id", change.Id } })' ">
                <td class="tdpointer">
                    @switch (change.RegistrationStepStatus)
                    {
                        case StepStatus.Approved:
                            <i class="icon-thumbs-up icon-green"></i>
                            break;
                        case StepStatus.Rejected:
                            <i class="icon-thumbs-down icon-red"></i>
                            break;
                        case StepStatus.None:
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </td>
                <td class="tdpointer">
                    @switch (change.AnalyzeStepStatus)
                    {
                        case StepStatus.Approved:
                            <i class="icon-thumbs-up icon-green"></i>
                            break;
                        case StepStatus.Rejected:
                            <i class="icon-thumbs-down icon-red"></i>
                            break;
                        case StepStatus.None:
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </td>
                <td class="tdpointer">
                    @switch (change.ImplementationStepStatus)
                    {
                        case StepStatus.Approved:
                            <i class="icon-thumbs-up icon-green"></i>
                            break;
                        case StepStatus.Rejected:
                            <i class="icon-thumbs-down icon-red"></i>
                            break;
                        case StepStatus.None:
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </td>
                <td class="tdpointer">
                    @switch (change.EvaluationStepStatus)
                    {
                        case StepStatus.Approved:
                            <i class="icon-thumbs-up icon-green"></i>
                            break;
                        case StepStatus.Rejected:
                            <i class="icon-thumbs-down icon-red"></i>
                            break;
                        case StepStatus.None:
                            break;
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                </td>

                @for (var i = 0; i < change.FieldValues.Count; i++)
                {
                    var changeField = Model.Headers[i];
                    var changeFieldValue = change.FieldValues.Single(v => v.FieldName == changeField.FieldName);

                    <td class="tdpointer">@changeFieldValue.Value.GetDisplayValue()</td>
                }
            </tr>
        }
    </tbody>
</table>
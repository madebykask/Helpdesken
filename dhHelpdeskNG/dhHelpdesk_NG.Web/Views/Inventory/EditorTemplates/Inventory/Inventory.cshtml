@using DH.Helpdesk.Web.Models.Inventory.EditModel.Inventory
@model InventoryEditViewModel
<script type="text/javascript" src="@Url.Content("~/Content/js/Inventory/place-cascading.js")"></script>

<script>
    $(function () {
        var parameters = {
            floorsSearchUrl: '@Url.Action("SearchFloorsByBuildingId")',
            roomsSearchUrl: '@Url.Action("SearchRoomsByFloorId")'
        };

        applyCascadingBehivarior(parameters);
    });
</script>
<table class="tableform">
    @if (Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.DepartmentId.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Name.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Model.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Manufacturer.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.SerialNumber.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.TheftMark.Show)
    {
        <tr>
            <th colspan="2" class="header">@Translation.Get("Allmänt")</th>
        </tr>
    }
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.DepartmentId, "CustomTypesFields/List", new { Source = Model.InventoryViewModel.DefaultFieldsViewModel.Departments })
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Name, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Model, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Manufacturer, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.SerialNumber, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.TheftMark, "CustomTypesFields/Text")


    @if (Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.BarCode.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.PurchaseDate.Show)
    {
        <tr>
            <th colspan="2" class="header">@Translation.Get("Inventering")</th>
        </tr>
    }
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.BarCode, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.PurchaseDate, "CustomTypesFields/Date", new { id = "inventory_edit_purchasedate_date_datepicker" })
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Info, "CustomTypesFields/WideText")

    @if (Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId.Show)
    {
        <tr>
            <th colspan="2" class="header">@Translation.Get("Placering")</th>
        </tr>
        <tr>
            <td class="span3">
                <label>@Translation.Get("Byggnad")</label>
            </td>
            <td class="span9">
                @Html.DropDownListFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.BuildingId, Model.InventoryViewModel.DefaultFieldsViewModel.Buildings, string.Empty, new { id = "buildings_dropdown" })
            </td>
        </tr>
        <tr>
            <td class="span3">
                <label>@Translation.Get("Våning")</label>
            </td>
            <td class="span9">
                @Html.DropDownListFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.FloorId, Model.InventoryViewModel.DefaultFieldsViewModel.Floors, string.Empty, new { id = "floors_dropdown" })
            </td>
        </tr>
        <tr>
            @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId, "CustomTypesFields/List", new { Source = Model.InventoryViewModel.DefaultFieldsViewModel.Rooms, id = "rooms_dropdown" })
        </tr>
    }
    @{
        var groups = Model.TypeGroupModels.OrderBy(x => x.SortOrder);

        foreach (var group in groups)
        {
            int id = group.Id;
            var dynamicFieldModels = Model.DynamicFieldModels.Where(x => x.GroupId == id).OrderBy(x => x.Position).ToList();

            if (!dynamicFieldModels.Any())
            {
                continue;
            }

            <tr>
                <th colspan="2" class="header">@Html.DisplayFor(m => group.Name)</th>
            </tr>

            for (int i = 0; i < dynamicFieldModels.Count; i++)
            {
                @Html.EditorFor(m => dynamicFieldModels[i], "DynamicFieldModel", new { Id = i })
            }
        }
    }
</table>

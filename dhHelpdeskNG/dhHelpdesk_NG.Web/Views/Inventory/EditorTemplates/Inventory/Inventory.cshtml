@using DH.Helpdesk.BusinessData.Models.Inventory.Edit.Settings
@using DH.Helpdesk.Web.Models.Inventory.EditModel.Inventory
@model InventoryEditViewModel
<table class="tableform">
    @if (Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.DepartmentId.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Name.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Model.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Manufacturer.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.SerialNumber.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.TheftMark.Show)
    {
        <tr>
            <th colspan="2" class="header">@Translation.Get("Allmänt")</th>
        </tr>
    }
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.DepartmentId, "CustomTypesFields/List", new { Source = Model.InventoryViewModel.DefaultFieldsViewModel.Departments })
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Name, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Model, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Manufacturer, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.SerialNumber, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.TheftMark, "CustomTypesFields/Text")


    @if (Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.BarCode.Show
         || Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.PurchaseDate.Show)
    {
        <tr>
            <th colspan="2" class="header">@Translation.Get("Inventering")</th>
        </tr>
    }
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.BarCode, "CustomTypesFields/Text")
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.PurchaseDate, "CustomTypesFields/Date", new { id = "inventory_edit_purchasedate_date_datepicker" })
    @Html.EditorFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.Info, "CustomTypesFields/WideText")

    @if (Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId.Show)
    {
        <tr>
            <th colspan="2" class="header">@Translation.Get("Placering")</th>
        </tr>
        <tr>
            <td class="span3">
                <label>@Translation.Get("Byggnad")</label>
            </td>
            <td class="span9">
                @Html.DropDownListFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.BuildingId, Model.InventoryViewModel.DefaultFieldsViewModel.Buildings);
            </td>
        </tr>
        <tr>
            <td class="span3">
                <label>@Translation.Get("Våning")</label>
            </td>
            <td class="span9">
                @Html.DropDownListFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.FloorId, Model.InventoryViewModel.DefaultFieldsViewModel.Floors);
            </td>
        </tr>
        <tr>
            <td class="span3">
                <label>@Translation.Get(Model.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId.Caption)</label>
            </td>
            <td class="span9">
                @Html.DropDownListFor(m => m.InventoryViewModel.DefaultFieldsViewModel.DefaultFieldsModel.RoomId, Model.InventoryViewModel.DefaultFieldsViewModel.Rooms);
            </td>
        </tr>
    }
    @{
        var groups = Model.TypeGroupModels.OrderBy(x => x.SortOrder);

        foreach (var group in groups)
        {
            int id = group.Id;
            var itemsInGroup = Model.DynamicFieldModels.Where(x => x.GroupId == id).OrderBy(x => x.Position).ToList();

            if (!itemsInGroup.Any())
            {
                continue;
            }

        <tr>
            <th colspan="2" class="header">@Html.DisplayFor(m => group.Name)</th>
        </tr>

            foreach (var item in itemsInGroup)
            {
                // todo
        <tr>
            <td class="span3">
                <label>@Html.DisplayFor(m => item.Caption)</label>
            </td>
            <td class="span9">
                @switch (item.FieldTypes)
                {
                    case FieldTypes.Bool:
                        var boolValue = !string.IsNullOrWhiteSpace(item.Value) && item.Value == DynamicFieldModel.True;
                    @Html.CheckBoxFor(m => boolValue)
                        break;
                    case FieldTypes.Date:
                        var dateValue = !string.IsNullOrWhiteSpace(item.Value) ? (DateTime?)DateTime.Parse(item.Value) : null;
                    @Html.EditorFor(m => dateValue, "DatePicker", new { id = "general_finishing_date_datepicker" })
                        break;
                    case FieldTypes.Text:
                        var textValue = new DynamicFieldStringValue(item.Value, item.MaxSize);
                    @Html.EditorFor(m => textValue)
                        break;
                    case FieldTypes.Numeric:
                        var intValue = !string.IsNullOrWhiteSpace(item.Value) ? (int?)int.Parse(item.Value) : null;
                    @Html.EditorFor(m => intValue)
                        break;
                    default:
                    @Html.EditorFor(m => item.Value)
                        break;
                }
            </td>
        </tr>
            }
        }
    }
</table>
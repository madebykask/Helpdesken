@using DH.Helpdesk.BusinessData.Models.Logs.Output
@using DH.Helpdesk.Common.Enums.Logs
@model DH.Helpdesk.Web.Models.Case.LogNoteFilesViewModel

@{ var currentLog = Model.CurrentLog; }

@functions
{
    string BuildCaseFileLinkVD(string fileName)
    {
        return Model.FilesUrlBuilder.BuildCaseFileLinkVD(Model.CaseNumber, fileName);
    }

    string BuildLogFileLinkVD(int logId, string fileName, LogFileType logType)
    {
        return Model.FilesUrlBuilder.BuildLogFileLinkVD(logId,  fileName, logType);
    }

    string GetFileIcon(LogFileOverview logFile)
    {
        if (Model.IsTwoAttachmentsMode)
        {
            return logFile.LogType == LogFileType.External ? "fa sm-fa fa-file-o" : "fa sm-fa fa-file";
        }
        return "icon-file";
    }

    string GetLogTypeText(LogFileOverview logFile)
    {
        if (Model.IsTwoAttachmentsMode)
        {
            return logFile.LogType == LogFileType.External ? Translation.GetCoreTextTranslation("Extern bifogad fil") : Translation.GetCoreTextTranslation("Intern bifogad fil");
        }
        return string.Empty;

    }
}

@if (currentLog.LogFiles != null)
{
    foreach (var l in currentLog.LogFiles)
    {
        <div>
            <p>
                @if (l.CaseId.HasValue)
                {
                    <a target="_blank" class="isExisted" 
                       onclick="window.dhHelpdesk.logFileAccess(@l.CaseId, '@l.FileName', @((int)CaseFileType.CaseFile))" 
                       href="@BuildCaseFileLinkVD(l.FileName)"><i class="icon- attachedFile"></i>@l.FileName</a>
                }
                else
                {
                    if (l.LogId.HasValue)
                    {
                        <a target="_blank" class="isExisted"
                           onclick="window.dhHelpdesk.logFileAccess(@currentLog.CaseId, '@l.FileName', @(l.LogType == LogFileType.Internal ? (int)CaseFileType.LogInternal : (int)CaseFileType.LogExternal), @l.LogId.Value)"
                           href="@BuildLogFileLinkVD(l.LogId.Value, l.FileName, l.LogType)"><i class="icon- attachedFile"></i> @l.FileName</a>
                    }
                    else
                    {
                        if (Model.CaseFiles.VirtualDirectory)
                        {
                            <a target="_blank" class="isExisted" 
                               onclick="window.dhHelpdesk.logFileAccess(@currentLog.CaseId, '@l.FileName', @(l.LogType == LogFileType.Internal ? (int)CaseFileType.LogInternal : (int)CaseFileType.LogExternal), @currentLog.Id)"
                               href="@BuildLogFileLinkVD(currentLog.Id, l.FileName, l.LogType)"
                                data-toggle="tooltip" rel="tooltip" data-placement="top" title="@(GetLogTypeText(l))"><i class="@(GetFileIcon(l))"></i> @l.FileName</a>
                        }
                        else
                        {
                            <a target="_blank" class="isExisted"  href="@Url.Action("DownloadLogFile", new { id = currentLog.Id, fileName = l.FileName, logType = (int)l.LogType })"
                                data-toggle="tooltip" rel="tooltip" data-placement="top" title="@(GetLogTypeText(l))"><i class="@(GetFileIcon(l))"></i> @l.FileName</a>
                        }
                    }
                }
            </p>
        </div>
    }
}

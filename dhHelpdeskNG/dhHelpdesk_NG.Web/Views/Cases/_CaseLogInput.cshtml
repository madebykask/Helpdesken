@model DH.Helpdesk.Web.Models.Case.CaseInputViewModel 
@using System.Web.Optimization
@using System.Linq;
@using DH.Helpdesk.BusinessData.OldComponents
@using DH.Helpdesk.Common.Enums.Settings
@using DH.Helpdesk.Web.Infrastructure.Extensions
@using DH.Helpdesk.Web.Infrastructure.Extensions.HtmlHelperExtensions

@Scripts.Render("~/bundles/Cases/_CaseLogInput")
@{ 
    var readonlyMode = false;
    if ((ViewData.Keys.Any() && ViewData.Keys.Contains("readonlyLog")) || Model.EditMode == Enums.AccessMode.ReadOnly)
    {
        readonlyMode = Convert.ToBoolean(ViewData["readonlyLog"]);
    }
}
 
<h4 style="@Model.displayLogInfoHtml()">    
    @if (Model.case_.CaseNumber > 0)
    {
        @Translation.Get("Ärende") <span>@Model.case_.CaseNumber - </span>
    }

    @Translation.Get("Kommunikation")    
</h4>
@if (Model.templateistrue != 1 && !readonlyMode)
{
    <div class="secnavs secnavmarg">
        <div class="pull-left">
            <ul class="secnav">
                @if (Model.CustomerSettings.ModuleFaq == true && Model.customerUserSetting.User.FAQPermission == 1)
                {
                    <li><a href="#" id="AddFAQ" class="btn">@Translation.Get("Ny FAQ", Enums.TranslationSource.TextTranslation)</a></li>
                    <li class="secspace"></li>
                }
                <li>
                    <div class="checkbox">
                        @if (Model.Disable_SendMailAboutCaseToNotifier || Model.EditMode == Enums.AccessMode.ReadOnly)
                        {                        
                            @Html.CheckBoxFor(model => model.CaseLog.SendMailAboutCaseToNotifier,
                                new { @disabled = "disabled", InformNotifierBehavior = Model.InformNotifierBehavior.ToJavaScriptBool() })
                        }
                        else
                        {
                            @Html.CheckBoxFor(model => model.CaseLog.SendMailAboutCaseToNotifier,
                                new { InformNotifierBehavior = Model.InformNotifierBehavior.ToJavaScriptBool() }) 
                        }
                        <span class="lbl">@Translation.Get("Informera anmälaren om åtgärden", SessionFacade.CurrentCaseLanguageId) </span>
                    </div>
                </li>
                <li class="secspace"></li>
                <li>
                    <div class="checkbox">
                        @if (Model.EditMode == Enums.AccessMode.ReadOnly)
                        {
                            @Html.CheckBoxFor(model => model.CaseLog.HighPriority, new { @disabled = true })
                        }
                        else
                        {
                            @Html.CheckBoxFor(model => model.CaseLog.HighPriority)
                        }
                        <span class="lbl">@Translation.Get("Hög prioritet", SessionFacade.CurrentCaseLanguageId) </span>
                    </div>
                </li>
                @if (Model.CaseLog.Id == 0)
                {
                    if (Model.standardTexts != null)
                    {
                        if (Model.standardTexts.Any())
                        {                        
                    <li class="secspace"></li>
                    <li>
                        @Translation.Get("Standardtext", SessionFacade.CurrentCaseLanguageId)&nbsp;
                            <select id="lstStandarTexts" style="max-width: 220px;">
                                <option>&nbsp;</option>
                                @foreach (var e in Model.standardTexts.Where(e => e.IsActive == 1))
                                {
                                    <option value="@e.Id">@e.Name</option>
                                }
                            </select>
                    </li>
                        }
                    }
                }
            </ul>
        </div>
    </div>
}
<div class="row">
    <div class="span12">
        <table class="tableform">
            @if (TempData["PreventError"] != null)
            {
                var msg = (string)TempData["PreventError"];
                <div class="alert alert-error">
                    @msg
                </div>   
            }
            <thead>
                <tr>
                    <th class="span3"></th>
                    <th class="span4"></th>
                    <th class="span5"></th>
                </tr>
            </thead>
            <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.tblLog_Text_External, CaseSolutionFields.ExternalLogNote)">
                <td>
                    @CaseFieldCaption(GlobalEnums.TranslationCaseFields.tblLog_Text_External, "Extern notering")
                </td>
                <td>
                    @if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_External, CaseSolutionFields.ExternalLogNote) && !readonlyMode)
                    {
                        @Html.TextAreaFor(model => Model.CaseLog.TextExternal, new { style = "height:105px;", maxlength = "3000" })
                    }
                    else
                    {
                        @Html.TextAreaFor(model => model.CaseLog.TextExternal, new { style = "height:105px;", @readonly = true })
                    }
                </td>
                <td>
                    @Html.HiddenFor(model => model.CaseLog.RegUser)
                    @Html.HiddenFor(model => model.CaseLog.LogType)
                    @Html.HiddenFor(model => model.CaseLog.UserId)
                    @Html.HiddenFor(model => model.CaseLog.Id)
                    @Html.HiddenFor(model => model.CaseLog.CaseId)
                    @Html.HiddenFor(model => model.CaseLog.LogGuid)
                    @Html.HiddenFor(model => model.LogKey)
                </td>
            </tr>

            <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote)">
                <td>
                    @CaseFieldCaption(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, "Intern notering")
                </td>
                <td>
                    @if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote) && !readonlyMode)
                    {
                        @Html.TextAreaFor(model => Model.CaseLog.TextInternal, new { style = "height:105px;", maxlength = "3000" })
                    }
                    else
                    {
                        @Html.TextAreaFor(model => model.CaseLog.TextInternal, new { style = "height:105px;", @readonly = true })
                    }
                </td>
                
                    <td>
                        <div class="checkbox">
                            @*@if (Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote))
                            {
                                @Html.CheckBoxFor(model => model.CaseLog.SendMailAboutLog, new { @disabled = true})
                            }
                            else
                            {
                                @Html.CheckBoxFor(model => model.CaseLog.SendMailAboutLog)
                            }*@
                            @Html.CheckBoxFor(model => model.CaseLog.SendMailAboutLog)
                            <span class="lbl">@Translation.Get("Skicka intern loggpost till", SessionFacade.CurrentCaseLanguageId)</span>
                            @if (Model.templateistrue != 1 && !readonlyMode)
                            {
                                if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote))
                                {
                                    if (Model.IsItParentCase() || Model.IsItChildCase())
                                    {
                                        <br/>@Html.CheckBox("CaseLog.SendLogToParentChildLog")
                                        if (Model.IsItParentCase())
                                        {
                                            <span class="lbl">@Translation.Get("Skicka intern loggpost till underärenden", SessionFacade.CurrentCaseLanguageId)</span>
                                        }
                                        else
                                        {
                                            <span class="lbl">@Translation.Get("Skicka intern loggpost till huvudärende", SessionFacade.CurrentCaseLanguageId)</span>
                                        }
                                    }
                                }
                            }
                        </div>
                        <div id="divEmailRecepientsInternalLog" style="display: none">
                            @Html.TextAreaFor(model => model.CaseLog.EmailRecepientsInternalLog, new { @readonly = "readonly" })
                        </div>
                    </td>
             
            </tr>
            @*@if (Model.templateistrue != 1)
            {*@
                @if (Model.CaseLog.Id == 0)
                {                                        
                    <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.tblLog_Filename, CaseSolutionFields.LogFileName)">
                        <td>
                            @CaseFieldCaption(GlobalEnums.TranslationCaseFields.tblLog_Filename, "Bifogad fil")
                        </td>
                        <td>
                            @if (Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote))
                            {
                                <a href="#upload_logfiles_popup" role="button" class="btn disabled" disabled="true" data-toggle="modal">@Translation.Get("Lägg till", SessionFacade.CurrentCaseLanguageId)</a>
                            }
                            else
                            {
                                <a href="#upload_logfiles_popup" role="button" class="btn" data-toggle="modal">@Translation.Get("Lägg till", SessionFacade.CurrentCaseLanguageId)</a>
                                <a href="#upload_clipboard_file_popup" role="button" class="btn" data-src="log">@Translation.Get("Lägg till från Urklipp", SessionFacade.CurrentLanguageId)</a>
                            }
                        </td>
                    </tr>                
                }            
                <tr>
                    <td class="span3"></td>
                    <td>
                        <div id="divCaseLogFiles">       
                            @Html.HiddenFor(model => Model.LogFileNames)                     
                            @Html.Partial("_CaseLogFiles", Model.LogFilesModel)
                        </div>
                    </td>
                </tr>
               @if (SessionFacade.CurrentUser.CloseCasePermission == 1)
               {
                <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.FinishingDescription, CaseSolutionFields.FinishingDescription)">
                    <td>
                         @CaseFieldCaption(GlobalEnums.TranslationCaseFields.FinishingDescription, "Avslutsbeskrivning")
                         @if (Model.caseFieldSettings.getCaseSettingsValue(GlobalEnums.TranslationCaseFields.FinishingDescription.ToString()).Required == 1)
                         {
                             <span class="mandatorystar">*</span>
                         }
                     </td>                                             
                     <td>
                         @if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.FinishingDescription, CaseSolutionFields.FinishingDescription) && !readonlyMode)
                         {
                            @Html.TextAreaFor(model => model.case_.FinishingDescription, new { maxlength = "200" })                                  
                         }
                         else
                         {
                            @Html.TextAreaFor(model => model.case_.FinishingDescription, new { maxlength = "200", @readonly = true })
                         }                        
                     </td>
                </tr>
               <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.ClosingReason, CaseSolutionFields.FinishingCause)">
                    <td>
                        @CaseFieldCaption(GlobalEnums.TranslationCaseFields.ClosingReason, "Avslutsorsak")
                    </td>
                    <td>
                        <div id="divFinishingType" class="btn-group">
                             @{
                         string disabled = Model.GetDisabledString(GlobalEnums.TranslationCaseFields.ClosingReason, CaseSolutionFields.FinishingCause);
                         if (readonlyMode || (Model.IsItParentCase() && Model.IsAnyNotClosedChild()))
                         {
                             disabled = "disabled";
                         }
                              }
                             <div class="btn @disabled" id="divBreadcrumbs_FinishingType">
                                
                                 @(string.IsNullOrEmpty(Model.FinishingCause) ? Translation.Get("--") : Model.FinishingCause)
                             </div>
                             <button class="btn dropdown-toggle" data-toggle="dropdown" @disabled>
                                 <span class="caret"></span>
                             </button>
                             <ul class="dropdown-menu dropup">
                                 <li><a href="#">@Translation.Get("--")</a></li>
                                 @Html.FinishingCauseDropdownButtonString(Model.finishingCauses)
                             </ul>
                             @Html.HiddenFor(model => Model.CaseLog.FinishingType)
                        </div>
                    </td>
                </tr>
                <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.FinishingDate, CaseSolutionFields.FinishingDate)">
                    <td>
                        @CaseFieldCaption(GlobalEnums.TranslationCaseFields.FinishingDate, "Avslutsdatum")
                    </td>
                    <td>
                        @if (!(Model.IsReadOnly(GlobalEnums.TranslationCaseFields.FinishingDate, CaseSolutionFields.FinishingDate)
                            || readonlyMode
                            || (Model.IsItParentCase() && Model.IsAnyNotClosedChild())))
                        {
                            if (Model.Setting.DisableCaseEndDate == 0)
                            {
                                @Html.EditorFor(m => m.CaseLog.FinishingDate, "DatePickerLocalTZ", new { id = "divCaseLog_FinishingDate" })
                            }
                            else
                            {                            
                                @Html.EditorFor(m => m.CaseLog.FinishingDate, "DateReadOnlyLocalTz", new { id = "divCaseLog_FinishingDate" })                             
                            }
                        }
                        else
                        {
                            @Html.EditorFor(m => m.case_.FinishingDate, "DateReadOnlyLocalTz")
                        }
                    </td>
                </tr>
               }
           @* }*@
        </table>
    </div>
</div>
<div id="divInvoice" style="@Model.ShowInvoiceFields.displayHtml()">
    <h4>
        @Translation.Get("Fakturering")
    </h4>
    <div class="row">
        <div class="span12">
            <table class="tableform">
                <thead>
                    <tr>
                        <th class="span3"></th>
                        <th class="span4"></th>
                        <th class="span5"></th>
                    </tr>
                </thead>
                <tr>
                    <td>
                        @Translation.Get("Tidsåtgång", SessionFacade.CurrentCaseLanguageId)
                    </td>
                    <td>
                        <select id="CaseLog_WorkingTimeHour" name="CaseLog.WorkingTimeHour" class="inputw100">
                            @for (var i = 0; i < 100; i++)
                            {
                                <option value="@i.ToString()" @i.IdIsSelected(Model.CaseLog.WorkingTimeHour.ToString()) >@i.ToString()</option>
                            }
                        </select>&nbsp;@Translation.Get("Tim")&nbsp; 

                        <select id="CaseLog_WorkingTimeMinute" name="CaseLog.WorkingTimeMinute" class="inputw100">
                            @for (var i = 0; i < 59; i = i + Model.MinWorkingTime)
                            {
                                <option value="@i.ToString()" @i.IdIsSelected(Model.CaseLog.WorkingTimeMinute.ToString()) >@i.ToString()</option>
                            }
                        </select>&nbsp;@Translation.Get("Min", SessionFacade.CurrentCaseLanguageId)
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td>
                        @Translation.Get("Material", SessionFacade.CurrentCaseLanguageId)
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.CaseLog.EquipmentPrice, new { maxlength = "12" })
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td>
                        @Translation.Get("Pris", SessionFacade.CurrentCaseLanguageId)
                    </td>
                    <td>
                        @Html.TextBoxFor(model => model.CaseLog.Price, new { maxlength = "8" })
                    </td>
                    <td></td>
                </tr>
                <tr>
                    <td>
                        @Translation.Get("Debitering", SessionFacade.CurrentCaseLanguageId)
                    </td>
                    <td>
                        <div class="checkbox">
                            <label>
                                <input name="form-field-checkbox" type="checkbox" />
                                @Html.CheckBoxFor(model => Model.CaseLog.Charge)
                                <span class="lbl">@Translation.Get("Debitera kunden för genomförd åtgärd", SessionFacade.CurrentCaseLanguageId)</span>
                            </label>
                        </div>
                    </td>
                    <td></td>
                </tr>
            </table>
        </div>
    </div>
</div>

@Html.Partial("_SendToDialog", Model.SendToDialogModel)
@*<div id="divNewFAQ" role="dialog" class="modal hide fade" aria-labelledby="myModalLabel" aria-hidden="true" >
    @Html.Partial("_NewFAQ", Model.EditFaqModel)
</div>*@

@functions    {

    private MvcHtmlString CaseFieldCaption(GlobalEnums.TranslationCaseFields field, string defaultCaption = "")
    {
        return Html.CaseFieldCaption(
                    Model.caseFieldSettings,
                    Model.CaseFieldSettingWithLangauges,
                    field,
                    Model.case_.Customer_Id,
                    SessionFacade.CurrentCaseLanguageId,
                    defaultCaption);
    }    

}

<script>
    $('#CaseLog_TextExternal').on('onchange', function () {
        checkLength(this);
    });

    $('#CaseLog_TextExternal').on('onkeyup', function () {
        checkLength(this);
    });

    $('#CaseLog_TextExternal').on('onpaste', function () {
        checkLength(this);
    });

    $('#CaseLog_TextInternal').on('onchange', function () {
        checkLength(this);
    });

    $('#CaseLog_TextInternal').on('onkeyup', function () {
        checkLength(this);
    });

    $('#CaseLog_TextInternal').on('onpaste', function () {
        checkLength(this);
    });

    var maxLength = 3000;
    function checkLength(el) {
        if (el.value.length > maxLength) {
            el.value = el.value.substring(0, maxLength);
        }
    }

    $(function () {
        $('#CaseLog_TextExternal').resizable();
        $('#CaseLog_TextInternal').resizable();
    });

</script>
@model DH.Helpdesk.Web.Models.Case.CaseInputViewModel
@using System.Linq;
@using DH.Helpdesk.BusinessData.OldComponents
@using DH.Helpdesk.Common.Constants
@using DH.Helpdesk.Common.Enums.Cases
@using DH.Helpdesk.Common.Enums.Settings
@using DH.Helpdesk.Domain.Invoice
@using DH.Helpdesk.Web.Infrastructure.Extensions
@using DH.Helpdesk.Common.Extensions.Boolean
@using DH.Helpdesk.Web.Common.Enums.Case
@using DH.Helpdesk.Web.Infrastructure.Extensions.HtmlHelperExtensions

@Scripts.Render("~/bundles/Cases/_CaseLogInput")
@{
    var readonlyMode = false;

    var hasReadonlyLog = (ViewData.Keys.Any() && ViewData.Keys.Contains("readonlyLog"));

    if (hasReadonlyLog || Model.EditMode == AccessMode.ReadOnly)
    {
        readonlyMode = Convert.ToBoolean(ViewData["readonlyLog"]);
    }

    var translation = Translation.GetForJS("Till");
    var btnToLabel = translation.First().ToString().ToUpper() + translation.Substring(1);
}

<div class="section-block">
    <h4 style="@Model.displayLogInfoHtml()">
        <a href="#" class="showbtn"><i class="icon-plus-sign"></i></a>
        <a href="#" class="hidebtn"><i class="icon-minus-sign"></i></a>
        @if (Model.case_.CaseNumber > 0)
        {
            @Translation.GetCoreTextTranslation("Ärende")
            <span>@Model.case_.CaseNumber - </span>
        }
        @Model.getSectionHeader(CaseSectionType.Communication, CaseSections.CommunicationHeader) @Model.getSectionHeaderFields(CaseSectionType.Communication)
    </h4>
    @if (Model.templateistrue != 1 && !readonlyMode)
    {
        <div class="secnavs secnavmarg">
            <div class="pull-left">
                <ul class="secnav">
                    @if (!hasReadonlyLog)
                    {
                        if (Model.CustomerSettings.ModuleFaq == true && Model.customerUserSetting.User.FAQPermission == 1)
                        {
                            <li><a href="#" id="AddFAQ" class="btn">@Translation.GetCoreTextTranslation("Ny FAQ")</a></li>
                            <li class="secspace"></li>
                        }
                        if (Model.CaseLog.Id == 0)
                        {
                            if (Model.standardTexts != null)
                            {
                                if (Model.standardTexts.Any())
                                {
                                    <li>
                                        <div class="btn-group" id="standardtextDropdownMenu">
                                            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                                @Translation.GetCoreTextTranslation("Standardtext")&nbsp;<span class="caret"></span>
                                            </button>
                                            <ul class="dropdown-menu case-standardText-keep-open" role="menu">
                                                <li>
                                                    <div id="standardTextAccordion" class="case-div-standardtext-accordion">
                                                        @foreach (var e in Model.standardTexts.Where(e => e.IsActive == 1))
                                                        {
                                                            <h3>
                                                                <div id="stHeader_@e.Id" class="case-standardtext-space standardtext-header">@Html.Raw(e.StandardTextName)</div>
                                                            </h3>
                                                            <div class="case-div-standardtext case-standardtext-space"><span id="stText_@e.Id">@Html.Raw(e.Text)</span></div>
                                                        }
                                                    </div>
                                                </li>
                                            </ul>
                                        </div>
                                    </li>
                                    <li class="secspace"></li>
                                }
                            }
                        }
                        <li>
                            <div class="checkbox">
                                @if (Model.EditMode == AccessMode.ReadOnly)
                                {
                                    @Html.CheckBoxFor(model => model.CaseLog.HighPriority, new { @disabled = true })
                                }
                                else
                                {
                                    @Html.CheckBoxFor(model => model.CaseLog.HighPriority)
                                }
                                <span class="lbl">@Translation.GetCoreTextTranslation("Hög prioritet") </span>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
    <div class="row">
        <div class="span12">
            @if (TempData["PreventError"] != null)
            {
                var msg = (string)TempData["PreventError"];
                <div class="alert alert-error">@msg</div>
            }
            <table class="tableform">
                <thead>
                    <tr>
                        <th class="span3"></th>
                        <th class="span4"></th>
                        <th class="span5"></th>
                    </tr>
                </thead>
                <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.tblLog_Text_External, CaseSolutionFields.ExternalLogNote)">
                    <td>@CaseFieldCaption(GlobalEnums.TranslationCaseFields.tblLog_Text_External, "Extern notering")</td>
                    <td>
                        @if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_External, CaseSolutionFields.ExternalLogNote) && !readonlyMode)
                        {
                            @Html.TextAreaFor(model => Model.CaseLog.TextExternal, new { style = "height:105px;", @class = "log-field" })
                        }
                        else
                        {
                            @Html.TextAreaFor(model => model.CaseLog.TextExternal, new { style = "height:105px;", @readonly = true, @class = "log-field" })
                        }
                    </td>
                    <td>
                        <div class="checkbox commun">
                            @if (Model.Disable_SendMailAboutCaseToNotifier || Model.EditMode == AccessMode.ReadOnly)
                            {
                                @Html.CheckBoxFor(model => model.CaseLog.SendMailAboutCaseToNotifier,
                                    new { @disabled = "disabled", InformNotifierBehavior = Model.InformNotifierBehavior.ToJavaScriptBool() })
                            }
                            else
                            {
                                @Html.CheckBoxFor(model => model.CaseLog.SendMailAboutCaseToNotifier,
                                    new { InformNotifierBehavior = Model.InformNotifierBehavior.ToJavaScriptBool(), id = "SendMailAboutCaseToNotifier", onclick= "valueChanged()" })
                            }
                            <span class="lbl">@Translation.GetCoreTextTranslation("Informera anmälare och följare om åtgärder") </span><br />
                            <span id="emailsTo"style="display: none;">
                                @Translation.ToTitleCase(@Translation.GetCoreTextTranslation("Till")): @Html.DisplayFor(model => model.case_.PersonsEmail)<br />

                                <span id="ccTitle">@Translation.GetCoreTextTranslation("Kopia"): </span><span id="extraEmailsInputShow" style="white-space: break-spaces;"></span>
                            </span>
                        </div>
                        @Html.HiddenFor(model => model.CaseLog.RegUser)
                        @Html.HiddenFor(model => model.CaseLog.LogType)
                        @Html.HiddenFor(model => model.CaseLog.UserId)
                        @Html.HiddenFor(model => model.CaseLog.Id)
                        @Html.HiddenFor(model => model.CaseLog.CaseId)
                        @Html.HiddenFor(model => model.CaseLog.LogGuid)
                        @Html.HiddenFor(model => model.LogKey)
                        @Html.HiddenFor(model => model.CaseLog.OldLog_Id)
                    </td>
                </tr>
                <!-- EXTERNAL Log note Attachments: If 2attachments feature is disabled it should be displayed as default  -->
                @Html.Partial("_CaseLogInputFilesAttachment",
                    Model.CreateLogInputFilesAttachmentViewModel(
                        true,// external
                        CaseFieldCaption(GlobalEnums.TranslationCaseFields.tblLog_Filename, "Bifogad fil").ToString(),
                        Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.tblLog_Filename, CaseSolutionFields.LogFileName),
                        Model.CaseLog.Id == 0 && !Model.newLog,
                                @* TODO: check why internal log note check was used! *@
Model.EnableTwoAttachments
? Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_External, CaseSolutionFields.ExternalLogNote)
: Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote),
Model.EnableTwoAttachments))

                @if (Model.CaseInternalLogAccess)
                {
                    <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote)">
                        <td>@CaseFieldCaption(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, "Intern notering")<span id="internalNoteRequired" class="mandatorystar" style="display:none"> * </span></td>
                        <td>
                            @if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote) && !readonlyMode)
                            {
                                @Html.TextAreaFor(model => Model.CaseLog.TextInternal, new { style = "height:105px;", @class = "log-field" })
                            }
                            else
                            {
                                @Html.TextAreaFor(model => model.CaseLog.TextInternal, new { style = "height:105px;", @readonly = true, @class = "log-field" })
                            }
                        </td>

                        <td>
                            <div class="checkbox">
                                <div>
                                    @Html.HiddenFor(model => model.CaseLog.EmailRecepientsInternalLogTo, new { id = "caseLog_EmailRecepientsInternalLogTo", @readonly = "true" })

                                    <div class="checkbox commun">

                                        @Html.CheckBoxFor(model => model.CaseLog.SendMailAboutCaseToPerformer,
                                            new { InformPerformerBehavior = Model.InformPerformerBehavior.ToJavaScriptBool() })

                                        <span class="inline-block-span lbl">
                                            @Translation.GetCoreTextTranslation("Informera handläggare")
                                            <span id="txtInformPerformer" style="display: none">
                                                @Html.Raw("(")<span id="selected-performer-email">@{
                                                        var selectedPerformer = Model.PerformersToSearch.FirstOrDefault(p => p.UserId == Model.Performer_Id);
                                                        if (selectedPerformer != null)
                                                        {
                                                            @Model.PerformersToSearch.Where(p => p.UserId == Model.Performer_Id).FirstOrDefault().Email
                                                        }
                                                    }</span>@Html.Raw(")")
                                                </span>
                                            </span>
                                    </div>

                                    @if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote) && !readonlyMode)
                                    {
                                        <a href="#case_internal_log_to_btn" role="button" class="btn case-usersearch-btn" data-src="case" data-toggle="modal">@btnToLabel</a>
                                        <div id="fake_CaseLog_EmailRecepientsInternalLogTo" contenteditable="true" style="z-index: 2" class="case-send-emails-div case-usersearch-textarea @Model.getSearchEmailClass(CaseSectionType.Communication)"></div>
                                    }
                                    else
                                    {
                                        <a href="#" role="button" class="btn case-usersearch-btn disabled" data-src="case" data-toggle="modal">@btnToLabel</a>
                                        <div id="fake_CaseLog_EmailRecepientsInternalLogTo" contenteditable="false" style="z-index: 2; background-color:#eeeeee;" class="case-send-emails-div case-usersearch-textarea @Model.getSearchEmailClass(CaseSectionType.Communication) disabled"></div>
                                    }
                                </div>
                                <div>
                                    @Html.HiddenFor(model => model.CaseLog.EmailRecepientsInternalLogCc, new { id = "caseLog_EmailRecepientsInternalLogCc", @readonly = "true" })
                                    @if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote) && !readonlyMode)
                                    {
                                        <a href="#case_internal_log_cc_btn" role="button" class="btn case-usersearch-btn" data-src="case" data-toggle="modal">@Translation.GetForJS("Kopia")</a>
                                        <div id="fake_CaseLog_EmailRecepientsInternalLogCc" contenteditable="true" style="z-index: 1;" class="case-send-emails-div case-usersearch-textarea @Model.getSearchEmailClass(CaseSectionType.Communication)"></div>
                                    }
                                    else
                                    {
                                        <a href="#" role="button" class="btn case-usersearch-btn disabled" data-src="case" data-toggle="modal">@Translation.GetForJS("Kopia")</a>
                                        <div id="fake_CaseLog_EmailRecepientsInternalLogCc" contenteditable="false" style="z-index: 1; background-color:#eeeeee;" class="case-send-emails-div case-usersearch-textarea @Model.getSearchEmailClass(CaseSectionType.Communication)"></div>
                                    }
                                </div>
                            </div>
                            <div class="checkbox commun">
                                @if (Model.templateistrue != 1 && !readonlyMode)
                                {
                                    if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote))
                                    {
                                        if (Model.IsItParentCase() || Model.IsItChildCase())
                                        {
                                            @Html.CheckBox("CaseLog.SendLogToParentChildLog")
                                            if (Model.IsItParentCase())
                                            {
                                                <span class="lbl">@Translation.Get("Skicka intern loggpost till underärenden", SessionFacade.CurrentCaseLanguageId)</span>
                                            }
                                            else
                                            {
                                                <span class="lbl">@Translation.Get("Skicka intern loggpost till huvudärende", SessionFacade.CurrentCaseLanguageId)</span>
                                            }
                                        }
                                    }
                                }
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    <tr style="display:none;" class="hidden">
                        <td></td>
                        <td>@Html.HiddenFor(model => model.CaseLog.TextInternal, new { value = "" })</td>
                    </tr>
                }

                <!-- INTERNAL LOG NOTE Attachments: -->
                @* TODO: check log edit mode - should be hidden. Add field styles!!! *@
                @if (Model.EnableTwoAttachments && Model.CaseInternalLogAccess)
                {
                    @Html.Partial("_CaseLogInputFilesAttachment",
                        Model.CreateLogInputFilesAttachmentViewModel(
                            false,// internal
                            CaseFieldCaption(GlobalEnums.TranslationCaseFields.tblLog_Filename_Internal, "Intern bifogad fil").ToHtmlString(),
                            Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.tblLog_Filename_Internal, CaseSolutionFields.LogFileName_Internal),
                            Model.CaseLog.Id == 0 && !Model.newLog,
                            Model.IsReadOnly(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal, CaseSolutionFields.InternalLogNote),
                            Model.EnableTwoAttachments))
                }

                @if (Model.newLog || Model.editLog)
                {
                    <tr class="displaytr" style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.StateSecondary_Id, CaseSolutionFields.StateSecondary)">
                        <td>
                            @CaseFieldCaption(GlobalEnums.TranslationCaseFields.StateSecondary_Id, "Understatus")
                        </td>
                        <td>
                            @if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.StateSecondary_Id, CaseSolutionFields.StateSecondary) && !readonlyMode)
                            {
                                <select id="case__StateSecondary_Id" @Model.case_.Id.HtmlReadOnlyFlag(Model.customerUserSetting.StateSecondaryPermission) name="case_.StateSecondary_Id">
                                    <option value="">&nbsp;</option>
                                    @if (Model.stateSecondaries != null)
                                    {
                                        foreach (var e in Model.stateSecondaries.Where(e => e.IsActive == 1 || Model.case_.StateSecondary_Id == e.Id))
                                        {
                                            <option value="@e.Id" @e.Id.IdIsSelected(Model.case_.StateSecondary_Id.ToString())>@Translation.Get(e.Name)</option>
                                        }
                                    }
                                </select>
                                if (Model.customerUserSetting.StateSecondaryPermission == 0)
                                {
                                    @Html.HiddenFor(x => x.case_.StateSecondary_Id, new { @class = "readonlySubstate" })
                                }
                            }
                            else
                            {
                                if (!Model.case_.StateSecondary_Id.HasValue)
                                {
                                    @Html.TextBoxFor(m => m.case_.StateSecondary_Id, new { @readonly = true })
                                }
                                else
                                {
                                    @Html.TextBoxFor(m => m.stateSecondaries.SingleOrDefault(x => x.Id == Model.case_.StateSecondary_Id).Name, new { @readonly = true })
                                    @Html.HiddenFor(x => x.case_.StateSecondary_Id)
                                }
                            }
                        </td>
                    </tr>
                }
                @if (SessionFacade.CurrentUser.CloseCasePermission == 1 && !Model.newLog)
                {
                    <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.FinishingDescription, CaseSolutionFields.FinishingDescription)">
                        <td>
                            @CaseFieldCaption(GlobalEnums.TranslationCaseFields.FinishingDescription, "Avslutsbeskrivning")
                            @if (Model.caseFieldSettings.getCaseSettingsValue(GlobalEnums.TranslationCaseFields.FinishingDescription.ToString()).Required == 1)
                            {
                                <span class="mandatorystar">*</span>
                            }
                        </td>
                        <td>
                            @if (!Model.IsReadOnly(GlobalEnums.TranslationCaseFields.FinishingDescription, CaseSolutionFields.FinishingDescription) && !readonlyMode)
                            {
                                @Html.TextAreaFor(model => model.case_.FinishingDescription, new { maxlength = "300" })
                            }
                            else
                            {
                                @Html.TextAreaFor(model => model.case_.FinishingDescription, new { maxlength = "300", @readonly = true })
                            }
                        </td>
                    </tr>
                }
                @if (SessionFacade.CurrentUser.CloseCasePermission == 1)
                {
                    <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.ClosingReason, CaseSolutionFields.FinishingCause)">
                        <td>
                            @CaseFieldCaption(GlobalEnums.TranslationCaseFields.ClosingReason, "Avslutsorsak")
                        </td>
                        <td>
                            <div id="divFinishingType" class="btn-group dropdown-menu-parent">
                                @{
                                    string disabled = Model.GetDisabledString(GlobalEnums.TranslationCaseFields.ClosingReason, CaseSolutionFields.FinishingCause);
                                    if (readonlyMode || (Model.IsItParentCase() && Model.IsAnyNotClosedChild(true)))
                                    {
                                        disabled = "disabled";
                                    }
                                }
                                <div class="btn @disabled" id="divBreadcrumbs_FinishingType">

                                    @(string.IsNullOrEmpty(Model.FinishingCause) ? Translation.Get("--") : Model.FinishingCause)
                                </div>
                                <button class="btn dropdown-toggle" data-toggle="dropdown" @disabled>
                                    <span class="caret"></span>
                                </button>
                                <ul class="dropdown-menu subddMenu parentddMenu" style="z-index:99999999999;">
                                    <li><a href="#">@Translation.Get("--")</a></li>
                                    @Html.FinishingCauseDropdownButtonString(Model.finishingCauses)
                                </ul>
                                @Html.HiddenFor(model => Model.CaseLog.FinishingType)
                            </div>
                        </td>
                    </tr>
                    <tr style="@Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.FinishingDate, CaseSolutionFields.FinishingDate)">
                        <td>
                            @CaseFieldCaption(GlobalEnums.TranslationCaseFields.FinishingDate, "Avslutsdatum")
                        </td>
                        <td>
                            @if (!(Model.IsReadOnly(GlobalEnums.TranslationCaseFields.FinishingDate, CaseSolutionFields.FinishingDate)
                                || readonlyMode || (Model.IsItParentCase() && Model.IsAnyNotClosedChild(true))))
                            {
                                if (Model.Setting.DisableCaseEndDate == 0)
                                {
                                    @Html.EditorFor(m => m.CaseLog.FinishingDate, "DatePicker", new { id = "divCaseLog_FinishingDate" })
                                }
                                else
                                {
                                    @Html.EditorFor(m => m.CaseLog.FinishingDate, "DateReadOnlyLocalTz", new { id = "divCaseLog_FinishingDate" })
                                }
                            }
                            else
                            {
                                @Html.EditorFor(m => m.case_.FinishingDate, "DateReadOnlyLocalTz")
                            }
                        </td>
                    </tr>
                }
                @* }*@
            </table>
            @* TODO: move to dialogs section ? Should be unique? *@
            <div id="attached_files_view">
                @Html.Partial("ModalDialogs/_CaseAttachExistFile")
            </div>
        </div>
    </div>
</div>
@if (Model.CustomerSettings.ModuleInvoice)
{
    <div id="divInvoice" style="@Model.ShowInvoiceFields.displayHtml()">
        <h4>
            @Model.getSectionHeader(CaseSectionType.Invoicing, CaseSections.InvoicingHeader)
        </h4>
        @if (Model.templateistrue != 1 && !readonlyMode)
        {
            <div class="secnavs secnavmarg">
                <div class="pull-left">
                    <ul class="secnav">
                        <li><input type="button" id="btnCaseCharge" class="btn" style="@Model.ShowInvoiceFields.displayHtml()" value="@Translation.GetCoreTextTranslation("Debitering")" /></li>
                    </ul>
                </div>
            </div>
        }
        @{
            var invoiceClaimed = Model.CaseLog.InvoiceRow != null
                                && Model.CaseLog.InvoiceRow.Status.HasValue
                                && (Model.CaseLog.InvoiceRow.Status.Value == InvoiceStatus.Invoiced || Model.CaseLog.InvoiceRow.Status.Value == InvoiceStatus.NotInvoiced);
        }
        <div class="row">
            <div class="span6">
                <table class="tableform">
                    <thead>
                        <tr>
                            <th class="span3"></th>
                            <th class="span4"></th>
                            <th class="span5"></th>
                        </tr>
                    </thead>

                    <tr id="invoiceField-Time">
                        <td>
                            @Translation.Get("Tidsåtgång", SessionFacade.CurrentCaseLanguageId)
                        </td>
                        <td>
                            <select id="CaseLog_WorkingTimeHour" name="CaseLog.WorkingTimeHour" class="inputw100 time-field" @((Model.EditMode == AccessMode.ReadOnly || invoiceClaimed) ? "disabled=\"disabled\"" : "")>
                                @for (var i = 0; i < 100; i++)
                                {
                                    <option value="@(i == 0 ? "" : i.ToString())" @i.IdIsSelected(Model.CaseLog.WorkingTimeHour.ToString())>@i.ToString()</option>
                                }
                            </select>&nbsp;@Translation.Get("Tim")&nbsp;
                            <select id="CaseLog_WorkingTimeMinute" name="CaseLog.WorkingTimeMinute" class="inputw100 time-field" @((Model.EditMode == AccessMode.ReadOnly || invoiceClaimed) ? "disabled=\"disabled\"" : "")>
                                @for (var i = 0; i < 59; i = i + Model.MinWorkingTime)
                                {
                                    <option value="@(i == 0 ? "" : i.ToString())" @i.IdIsSelected(Model.CaseLog.WorkingTimeMinute.ToString())>@i.ToString()</option>
                                }
                            </select>&nbsp;@Translation.Get("Min", SessionFacade.CurrentCaseLanguageId)
                        </td>
                        <td></td>
                    </tr>
                    <tr id="invoiceField-Overtime">
                        <td>
                            @Translation.Get("Övertid", SessionFacade.CurrentCaseLanguageId)
                        </td>
                        <td>
                            <select id="CaseLog_OvertimeHour" name="CaseLog.OvertimeHour" class="inputw100 time-field" @((Model.EditMode == AccessMode.ReadOnly || invoiceClaimed) ? "disabled=\"disabled\"" : "")>
                                @for (var i = 0; i < 100; i++)
                                {
                                    <option value="@(i == 0 ? "" : i.ToString())" @i.IdIsSelected(Model.CaseLog.OvertimeHour.ToString())>@i.ToString()</option>
                                }
                            </select>&nbsp;@Translation.Get("Tim")&nbsp;
                            <select id="CaseLog_OvertimeMinute" name="CaseLog.OvertimeMinute" class="inputw100 time-field" @((Model.EditMode == AccessMode.ReadOnly || invoiceClaimed) ? "disabled=\"disabled\"" : "")>
                                @for (var i = 0; i < 59; i = i + Model.MinWorkingTime)
                                {
                                    <option value="@(i == 0 ? "" : i.ToString())" @i.IdIsSelected(Model.CaseLog.OvertimeMinute.ToString())>@i.ToString()</option>
                                }
                            </select>&nbsp;@Translation.Get("Min", SessionFacade.CurrentCaseLanguageId)
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td id="timeValidationMessage"></td>
                        <td></td>
                    </tr>
                    <tr id="invoiceField-Material">
                        <td>
                            @Translation.Get("Material", SessionFacade.CurrentCaseLanguageId)
                        </td>
                        <td>
                            @{
                                //var attribsEquipmentPrice = new Dictionary<string, string> { { "maxlength", "12" } };
                                if (Model.EditMode == AccessMode.ReadOnly || invoiceClaimed)
                                {
                                    @Html.TextBoxFor(model => model.CaseLog.EquipmentPrice, new { disabled = "disabled", @readonly = "readonly", maxlength = 12 })
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.CaseLog.EquipmentPrice, new { maxlength = 12 })
                                }

                            }
                        </td>
                        <td></td>
                    </tr>
                    <tr id="invoiceField-Price">
                        <td>
                            @Translation.Get("Pris", SessionFacade.CurrentCaseLanguageId)
                        </td>
                        <td>
                            @{
                                var attribsPrice = new Dictionary<string, string> { { "maxlength", "8" } };
                                if (Model.EditMode == AccessMode.ReadOnly || invoiceClaimed)
                                {
                                    @Html.TextBoxFor(model => model.CaseLog.Price, new { disabled = "disabled", @readonly = "readonly", maxlength = 8 });
                                }
                                else
                                {
                                    @Html.TextBoxFor(model => model.CaseLog.Price, new { maxlength = 8 });
                                }

                            }
                        </td>

                        <td></td>
                    </tr>
                    <tr>
                        <td>
                            @Translation.Get("Debitering", SessionFacade.CurrentCaseLanguageId)
                        </td>
                        <td>
                            <div class="checkbox">
                                <label>
                                    <input name="form-field-checkbox" type="checkbox" />
                                    @Html.CheckBoxFor(model => Model.CaseLog.Charge, (Model.EditMode == AccessMode.ReadOnly || invoiceClaimed) ? new { disabled = "disabled" } : null)
                                    <span class="lbl">@Translation.Get("Debitera kunden för genomförd åtgärd", SessionFacade.CurrentCaseLanguageId)</span>
                                </label>
                            </div>
                        </td>
                        <td></td>
                    </tr>
                </table>
            </div>
            <div class="span6">
                <table id="tblCaseChargeSummary" style="@Model.ShowInvoiceFields.displayHtml()">
                    <tbody>
                        @if (Model.case_.Department != null && Model.Logs != null)
                        {
                            if (Model.case_.Department.ShowInvoiceTime)
                            {
                                <tr>
                                    <td>@Translation.GetCoreTextTranslation("Totalt") @Translation.GetCoreTextTranslation("Arbete"):</td>
                                    <td id="totalWorkingTime">
                                        @(Model.Logs.Sum(x => x.WorkingTime) / 60) @Translation.GetCoreTextTranslation("Tim")
                                        @(Model.Logs.Sum(x => x.WorkingTime) % 60) @Translation.GetCoreTextTranslation("Min")
                                    </td>
                                </tr>
                            }
                            if (Model.case_.Department.ShowInvoiceOvertime)
                            {
                                <tr>
                                    <td>@Translation.GetCoreTextTranslation("Totalt") @Translation.GetCoreTextTranslation("Övertid"):</td>
                                    <td id="totalOvertime">
                                        @(Model.Logs.Sum(x => x.OverTime) / 60) @Translation.GetCoreTextTranslation("Tim")
                                        @(Model.Logs.Sum(x => x.OverTime) % 60) @Translation.GetCoreTextTranslation("Min")
                                    </td>
                                </tr>
                            }
                            if (Model.case_.Department.ShowInvoiceMaterial)
                            {
                                <tr>
                                    <td>@Translation.GetCoreTextTranslation("Totalt") @Translation.GetCoreTextTranslation("Material"):</td>
                                    <td id="totalMaterial">
                                        @Model.Logs.Sum(x => x.EquipmentPrice).ToString("0.00")
                                    </td>
                                </tr>
                            }
                            if (Model.case_.Department.ShowInvoicePrice)
                            {
                                <tr>
                                    <td>@Translation.GetCoreTextTranslation("Totalt") @Translation.GetCoreTextTranslation("Pris"):</td>
                                    <td id="totalPrice">
                                        @Model.Logs.Sum(x => x.Price).ToString("0.00")
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
@Html.Partial("ModalDialogs/_SendIntLogToDiallog", Model.SendToDialogModel)
@if (Model.CustomerSettings.ModuleInvoice)
{
    @Html.Partial("ModalDialogs/_CaseCharge", Model)
}
@*<div id="divNewFAQ" role="dialog" class="modal hide fade" aria-labelledby="myModalLabel" aria-hidden="true" >
        @Html.Partial("_NewFAQ", Model.EditFaqModel)
    </div>*@

@functions    {

    private MvcHtmlString CaseFieldCaption(GlobalEnums.TranslationCaseFields field, string defaultCaption = "")
    {
        return Html.CaseFieldCaption(
            Model.caseFieldSettings,
            Model.CaseFieldSettingWithLangauges,
            field,
            Model.case_.Customer_Id,
            Model.IsCaseReopened,
            SessionFacade.CurrentCaseLanguageId,
            defaultCaption);
    }

}

<script>

    $(document)
        .on('change'
            , "#" + "@Html.IdFor(x => x.CaseLog.WorkingTimeHour)" +
            ", #" + "@Html.IdFor(x => x.CaseLog.WorkingTimeMinute)" +
            ", #" + "@Html.IdFor(x => x.CaseLog.OvertimeHour)" +
            ", #" + "@Html.IdFor(x => x.CaseLog.OvertimeMinute)"
            , function () {
                $("#" + "@Html.IdFor(x => x.CaseLog.Charge)").attr("checked", "checked");
            });

    $(document)
        .on('keyup'
            , "#" + "@Html.IdFor(x => x.CaseLog.Price)" +
            ", #" + "@Html.IdFor(x => x.CaseLog.EquipmentPrice)" +
            ", [id^='ExternalInvoices['][id$='].Amount']"
            , function () {
                var val = $(this).val();
                if (val && val !== "0")
                    $("#" + "@Html.IdFor(x => x.CaseLog.Charge)").attr("checked", "checked");
            });

    $(document)
        .on('keyup'
            , "[id^='ExternalInvoices['][id$='].Name']"
            , function () {
                var val = $(this).val();
                if (val)
                    $("#" + "@Html.IdFor(x => x.CaseLog.Charge)").attr("checked", "checked");
            });


    var maxLength = 3000;
    function checkLength(el) {
        if (el.value.length > maxLength) {
            el.value = el.value.substring(0, maxLength);
        }
    }

    $(function () {
        $('#CaseLog_TextExternal').resizable();
        $('#CaseLog_TextInternal').resizable();
    });

    $(".hidebtn").on("click", function (e) {
        e.preventDefault();
        $(this).parents(".section-block").addClass("hideshow");
    });
    $(".showbtn").on("click", function (e) {
        e.preventDefault();
        $(this).parents(".section-block").removeClass("hideshow");
    });
    function valueChanged() {
        
        if ($('#SendMailAboutCaseToNotifier').is(":checked")) {
            $("#emailsTo").show();
            var existingText = $('#extraEmailsInputShow').text();
            //.replaceAll(";", "\r\n")
            var extras = $("#extraEmailsInput").val().replaceAll(";", " ");
            
            if (extras != "") {
                console.log(existingText);
                $('#extraEmailsInputShow').text(extras);
                $('#extraEmailsInputShow').show();
                $("#ccTitle").show();
            }

        }

        else {
            $("#emailsTo").hide();
            $("#ccTitle").hide();
            $('#extraEmailsInputShow').hide();
        }

    }

    $("#Performer_Id").on("change", function (e) {
        e.preventDefault();
        let performerId = $("#Performer_Id").val();
            $.ajax({
                url: "/users/GetEmailById",
                type: "GET",
                data: { id: performerId, }
                })
                .done(function (result) {
                    $("#selected-performer-email").html(result);
                });
            });

</script>


@if (Model.editLog || Model.newLog)
{
    @Html.Partial("~/Views/Cases/_CaseValidation.cshtml", Model)

    <div id="hiddenCaseFields" style="display: none !important">
        @Html.HiddenFor(m => m.case_.ReportedBy)
        @Html.HiddenFor(m => m.case_.PersonsName)
        @Html.HiddenFor(m => m.case_.PersonsEmail)
        @Html.HiddenFor(m => m.case_.PersonsPhone)
        @Html.HiddenFor(m => m.case_.PersonsCellphone)
        @Html.HiddenFor(m => m.case_.Region_Id)
        @Html.HiddenFor(m => m.case_.Department_Id)
        @Html.HiddenFor(m => m.case_.OU_Id)
        @Html.HiddenFor(m => m.case_.CostCentre)
        @Html.HiddenFor(m => m.case_.Place)
        @Html.HiddenFor(m => m.case_.UserCode)

        @Html.HiddenFor(m => m.case_.InventoryNumber)
        @Html.HiddenFor(m => m.case_.InventoryType)
        @Html.HiddenFor(m => m.case_.InventoryLocation)

        @Html.HiddenFor(m => m.CustomerRegistrationSourceId)
        @Html.HiddenFor(m => m.case_.ProductArea_Id)
        @Html.HiddenFor(m => m.case_.System_Id)
        @Html.HiddenFor(m => m.case_.Urgency_Id)
        @Html.HiddenFor(m => m.case_.Impact_Id)
        @Html.HiddenFor(m => m.case_.Category_Id)
        @Html.HiddenFor(m => m.case_.Supplier_Id)
        @Html.HiddenFor(m => m.case_.InvoiceNumber)
        @Html.HiddenFor(m => m.case_.ReferenceNumber)
        @Html.HiddenFor(m => m.case_.Caption)
        @Html.HiddenFor(m => m.case_.Description)
        @Html.HiddenFor(m => m.case_.Miscellaneous)
        @Html.HiddenFor(m => m.case_.AgreedDate)
        @Html.HiddenFor(m => m.case_.Available)
        @Html.HiddenFor(m => m.case_.Cost)
        @Html.HiddenFor(m => m.case_.OtherCost)
        @Html.HiddenFor(m => m.case_.Currency)

        @Html.HiddenFor(m => m.case_.WorkingGroup_Id)
        @Html.HiddenFor(m => m.ResponsibleUser_Id)
        @Html.HiddenFor(m => m.Performer_Id)
        @Html.HiddenFor(m => m.case_.Priority_Id)
        @Html.HiddenFor(m => m.case_.Status_Id)
        @Html.HiddenFor(m => m.case_.StateSecondary_Id)
        @Html.HiddenFor(m => m.case_.Project_Id)
        @Html.HiddenFor(m => m.case_.Problem_Id)
        @Html.HiddenFor(m => m.case_.CausingPartId)
        @Html.HiddenFor(m => m.case_.PlanDate)
        @Html.HiddenFor(m => m.case_.WatchDate)
        @Html.HiddenFor(m => m.case_.VerifiedDescription)
        @Html.HiddenFor(m => m.case_.SolutionRate)
    </div>
}

@model DH.Helpdesk.Web.Models.Case.CaseInputViewModel
@using DH.Helpdesk.BusinessData.OldComponents
@using DH.Helpdesk.Common.Enums
@using DH.Helpdesk.Common.Enums.Settings
@using DH.Helpdesk.Common.Extensions.Boolean
@using DH.Helpdesk.Common.Extensions.Lists

<script type="text/javascript">
    window.parameters = {
        isCaseLocked: '@Model.CaseLock.IsLocked',
        currentCaseId: '@Model.case_.Id',
        currentCaseGuid: '@Model.case_.CaseGUID',
        currentCaseNumber: '@Model.case_.CaseNumber',
        customerId: '@Model.case_.Customer_Id',
        parentCaseId: '@(Model.ParentCaseInfo != null ? Model.ParentCaseInfo.ParentId.ToString() : "null")',
        whiteFilesList: @Html.Raw(Json.Encode(Model.WhiteFilesList)),
        maxFileSize: @Model.MaxFileSize,
        isAnyNotClosedChild: '@Model.IsAnyNotClosedNonIndependentChild().ToString()',
        backUrl: '@Model.BackUrl',
        productAreaErrorMessage:
            '@Html.Raw(Translation.GetForJS("Ärendet kunde inte sparas då den lägsta möjliga nivån på fält") + " [" +
                                   Translation.GetForJS(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) + "] " +
                                   Translation.GetForJS("inte har valts. Vänligen kontrollera ärendet."))',
        finishingTypeErrorMessage:
            '@Html.Raw(Translation.GetForJS("Ärendet kunde inte sparas då den lägsta möjliga nivån på fält") + " [" +
                            Translation.GetForJS(GlobalEnums.TranslationCaseFields.ClosingReason.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) + "] " +
                            Translation.GetForJS("inte har valts. Vänligen kontrollera ärendet."))',
        caseLockGuid: '@Model.CaseLock.LockGUID',
        caseChangedTime: '@Model.case_.ChangeTime',
        userCaseLocker: '@Model.CaseLock.UserId',
        extendValue: '@Model.CaseLock.ExtendValue',
        timerInterval: '@Model.CaseLock.TimerInterval',
        departmentInvoiceMandatory: @Model.TimeRequired.ToJavaScriptBool(),
        showInvoiceTime: @((Model.case_.Department != null && Model.case_.Department.ShowInvoiceTime).ToJavaScriptBool()),
        showInvoiceOvertime: @((Model.case_.Department != null && Model.case_.Department.ShowInvoiceOvertime).ToJavaScriptBool()),
        invoicePreventsToCloseCaseMessage:'@Translation.GetForJS("Du kan inte avsluta ärendet eftersom det finns öppna order.")',
        editCaseUrl: '@Url.Action("Edit", "Cases")',
        caseLockChecker: '@Url.Action("IsCaseAvailable", "Cases")',
        caseLockExtender: '@Url.Action("ReExtendCaseLock", "Cases")',
        caseActiveDataChecker: '@Url.Action("CheckCaseForActiveData", "Cases")',
        getTokenUrl: '@Url.Action("GetToken", "Cases")',
        markAsUnreadUrl: '@Url.Action("markasunread", "Cases")',
        unlockCaseByCaseIdUrl: '@Url.Action("UnLockCaseByCaseId", "Cases")',
        unlockCaseUrl:'@Url.Action("UnLockCase", "Cases")',
        moveCaseToExternalCustomerUrl: '@Url.Action("MoveCaseToExternalCustomer", "Cases")',
        preventToSaveCaseWithInactiveValue: '@Model.Setting.PreventToSaveCaseWithInactiveValue',
        caseUnlockErrorMessage: '@Translation.GetForJS("Ett fel inträffade när ärendet skulle låsas upp automatiskt. Var vänlig kontakta systemadministratören.")',
        caseMarkedAsUnreadMessage: '@Translation.GetForJS("Ärendet har markerats som oläst")',
        caseOpenedByOtherUserMessage: '@Translation.GetForJS("Ärendet kan inte ändras då det är öppet hos en annan användare.")',
        saveLockedCaseMessage: '@Translation.GetForJS("Ärendet har blivit sparat eller upplåst efter att du öppnade det. Stäng ärendet och försök igen.")',
        deleteLockedCaseMessage: '@Translation.GetForJS("Ärendet har blivit sparat eller upplåst efter att du öppnade det. Stäng ärendet och försök igen.")',
        moveLockedCaseMessage: '@Translation.GetForJS("Ärendet har blivit sparat eller upplåst efter att du öppnade det. Stäng ärendet och försök igen.")',
        lostChangesConfirmation: '@Html.Raw(Translation.GetForJS("Dina ändringar har inte sparats. Fortsätt?"))',
        finishingDateMessage: '@Html.Raw(Translation.GetForJS(GlobalEnums.TranslationCaseFields.FinishingDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) + " " + Translation.Get("kan inte vara tidigare än registreringsdatum."))',
        finishingDateMessage2: '@Html.Raw(Translation.GetForJS(GlobalEnums.TranslationCaseFields.FinishingDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) + " " + Translation.Get("kan inte vara tidigare än senast sparat datum. (Se historik fliken)"))',
        checkInactiveDataErrorMessage: '@Html.Raw(Translation.GetForJS("Problem med kommunikation med servern."))',
        productAreaChangeMessage: '@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id)' + " " + '@Translation.GetForJS("kan inte ändra eftersom det finns order som inte är skickade.")',
        caseTemplateChangeMessage: '@Translation.GetForJS("Du kan inte använda ärendemall eftersom det finns order som inte är skickade.")',
        caseRegDate: '@Model.case_.RegTime',
        isCaseFileMandatory: '@Model.caseFieldSettings.getRequired(GlobalEnums.TranslationCaseFields.Filename.ToString())',
        isCaseFileMandatoryOnReOpen: '@Model.caseFieldSettings.getRequiredIfReopened(GlobalEnums.TranslationCaseFields.Filename.ToString())',
        isCaseReOpen: '@Model.IsCaseReopened',
        caseFileCaption: '@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Filename.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id)',
        closeBtn: '@Html.Raw(Translation.GetForJS("Stäng"))',
        selectedLabel: '@Translation.GetForJS("vald")',
        noResultLabel: '@Translation.GetForJS("Inga resultat matchar")',
        isRelated: '@Model.IsRelatedCase.ToJavaScriptBool()',
        fileNameError: '@Translation.GetForJS("Filnamn är inte giltigt. Special tecken (!@#=$&?*) är inte tillåtna")',
        containsExtendedCase: '@Model.ContainsExtendedCase',
        hasExtendedComputerUsers: '@Model.HasExtendedComputerUsers',
        containsEForm: '@(Model.DynamicCase != null && Model.DynamicCase.ViewMode == 0)',
        extendedCaseFormId: '@(Model.ContainsExtendedCase ? Model.ExtendedCases.First().Id.ToString() : "" )',
        extendedCaseGuid: '@(Model.ContainsExtendedCase ? Model.ExtendedCases.First().ExtendedCaseGuid.ToString() : "" )',
        extendedCaseLanguageId: '@(Model.ContainsExtendedCase ? Model.ExtendedCases.First().LanguageId.ToString() : "" )',
        extendedCasePath: '@(Model.ContainsExtendedCase ? Model.ExtendedCases.First().Path.ToString() : "" )',
        extendedSections: @Html.Raw(Model.ExtendedSectionsToJS()),
        extendedCaseInvalidMessage: '@Translation.GetForJS("Utökat ärende är inte giltigt")',
        computerUserCategories: @Html.Raw(Json.Encode(Model.ComputerUserCategories != null ? Model.ComputerUserCategories.Select(o => new { o.Name, o.IsReadOnly, o.Id }).ToDictionary(o => o.Id.ToString(), o => o) : null)),
        fileExistError: '@Translation.GetForJS("Bifogad fil är borttagen från ärendet")',
        currentUserName: '@Model.CurrentUserName',
        applicationType: '@ApplicationTypes.Helpdesk',
        caseLockedByLabel: '@Translation.GetForJS("Låsningen av ärendet bröts. Användare <name> har låst ärendet. Dina ändringar kan inte sparas. Stäng ärendet och försök att öppna det igen senare.")',
        caseCanNotCloseDueToBusinessRules: '@Translation.GetForJS("Ärendet uppfyller inte villkoren i business rules.")',
        caseFieldIds: {
            Caption: "case__Caption",
            CaseId: "case__Id",
            CustomerId: "case__Customer_Id",
            RegionId: "case__Region_Id",
            RegionName: "RegionName",
            DepartmentId: "case__Department_Id",
            DepartmentName: "DepartmentName",
            OUId: "case__Ou_Id",
            OUName: "OuName",
            SourceId: "CustomerRegistrationSourceId",
            CaseTypeId: "case__CaseType_Id",
            ProductAreaId: "case__ProductArea_Id",
            SystemId: "case__System_Id",
            CategoryId: "case__Category_Id",
            SupplierId: "case__Supplier_Id",
            WorkingGroupId: "case__WorkingGroup_Id",
            WorkingGroupName: "workingGroup_Name",
            ResponsibleId: "ResponsibleUser_Id",
            AdministratorId: "Performer_Id",
            PriorityId: "case__Priority_Id",
            PriorityName: "priority_Name",
            StatusId: "case__Status_Id",
            StatusName: "statusName",
            SubStatusId: "case__StateSecondary_Id",
            SubStatusName: "subStateName",
            CausingPartId: "case__CausingPartId",
            ClosingReasonId: "CaseLog_FinishingType",
            FinishingDate: "CaseLog_FinishingDate",
            UserCode: "case__UserCode",
            ReportedBy: "case__ReportedBy",
            Cost: "case__Cost",
            CaseLanguageId: "case__RegLanguage_Id",
            PersonsName: "case__PersonsName",
            PersonsPhone: "case__PersonsPhone",
            PersonsEmail: "case__PersonsEmail",
            PersonsCellphone: "case__PersonsCellphone",
            PlanDate: "case__PlanDate",
            Place: "case__Place",
            WatchDate: "case__WatchDate",
            log_InternalText: "CaseLog_TextInternal",
            CaseRelationType: "CaseRelationType",
            ExtendedInitiatiorGUID: "ExtendedInitiatorGUID",
            CostCentre: "case__CostCentre",
            InitiatorCategory: "InitiatorCategory",
            InventoryType: "case__InventoryType",
            InventoryLocation: "case__InventoryLocation"
        },

        caseInitValues: {
            AdministratorId: '@Model.Performer_Id',
            CaseId: '@Model.case_.Id',
            CaseGuid: '@Model.case_.CaseGUID.ToString()',
            CaseKey: '@Model.CaseKey',
            CustomerId: '@Model.case_.Customer_Id',
            ReportedBy: @Html.Raw(Json.Encode(Model.case_.ReportedBy)),
            Cost: @Html.Raw(Json.Encode(Model.case_.Cost)),
            PersonsName: @Html.Raw(Json.Encode(Model.case_.PersonsName)),
            PersonsPhone: @Html.Raw(Json.Encode(Model.case_.PersonsPhone)),
            UserCode: @Html.Raw(Json.Encode(Model.case_.UserCode)),
            RegionId: '@Model.case_.Region_Id',
            DepartmentId: '@Model.case_.Department_Id',
            ParentOUId: '@(Model.case_.Ou != null && Model.case_.Ou.Parent_OU_Id != null ? Model.case_.Ou.Parent_OU_Id : null)',
            ChildOUId: '@Model.case_.OU_Id',
            ProductAreaId: '@Model.case_.ProductArea_Id',
            StatusId: '@Model.case_.Status_Id',
            SubStatusId: '@Model.case_.StateSecondary_Id',
            PlanDate: '@(Model.case_.PlanDate != null ? Model.case_.PlanDate.Value.ToString() : "" )',
            WatchDate: '@(Model.case_.WatchDate != null ? Model.case_.WatchDate.Value.ToString() : "" )',
            PriorityId: '@Model.case_.Priority_Id',
            CaseRelationType: '@Model.CaseRelationType()',
            PersonsEmail: @Html.Raw(Json.Encode(Model.case_.PersonsEmail)),
            PersonsCellphone: @Html.Raw(Json.Encode(Model.case_.PersonsCellphone)),
            Place: @Html.Raw(Json.Encode(Model.case_.Place)),
            CostCentre: '@Html.Raw(Json.Encode(Model.case_.CostCentre))',
            Caption: '@Html.Raw(Json.Encode(Model.case_.Caption))',
            InventoryType: @Html.Raw(Json.Encode(Model.case_.InventoryType)),
            InventoryLocation: @Html.Raw(Json.Encode(Model.case_.InventoryLocation)),
            CaseFiles: '@Html.Raw(Model.CaseFilesModel != null && Model.CaseFilesModel.Files != null ? Json.Encode(Model.CaseFilesModel.Files.Select(f => new { f.Id, f.FileName })) : "")'
        },

        casesScopeInitParameters: {
            requiredFieldsMessage: '@Translation.GetForJS("Ärendet kunde inte sparas då det saknas data i ett eller flera obligatoriska fält. Var vänlig kontrollera i ärendet.")',
            getDepartmentsUrl: '@Url.Action("GetDepartments", "Ajax")',
            getDepartmentUsersUrl: '@Url.Action("GetDepartmentUsers", "Ajax")',
            relatedCasesUrl: '@Url.Action("RelatedCasesFull", "Cases")',
            relatedInventoryUrl: '@Url.Action("RelatedInventoryFull", "Workstation", new { area = "Inventory" })',
            relatedCasesCountUrl: '@Url.Action("RelatedCasesCount", "Cases")',
            relatedInventoryCountUrl: '@Url.Action("RelatedInventoryCount", "Cases")',
            getDepartmentOusUrl: '@Url.Action("ChangeDepartment", "Cases")',
            deleteCaseFileConfirmMessage: '@Translation.GetForJS("Är du säker på att du vill ta bort bifogad fil")' + '?',
            okText: '@Translation.GetForJS("OK")',
            cancelText: '@Translation.GetForJS("Avbryt")',
            yesText: '@Translation.GetForJS("Ja")',
            noText: '@Translation.GetForJS("Nej")',
            validationMessages: ['@Html.Raw(Translation.GetForJS("måste anges"))'],
            mandatoryFieldsText: '@Translation.GetForJS("Obligatoriska fält")',
            formatFieldsText: '@Translation.GetForJS("Giltiga Format är")',
            descriptionText: '@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Description.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id)',
            getInventoryUrl: '@Url.Action("GetInventoryUrlByName", "InventoryRouting", new { area = "Inventory" })',
            initiatorDetailsUrl: '@Url.Action("NotifierPopup", "Notifiers")',
            checkInitiatorUrl: '@Url.Action("GetNotifierInfo", "Notifiers")',
        },

        user: {
            hasInventoryViewPermission: '@Model.UserHasInventoryViewPermission'
        }
    };

    function getRules() {


        var rules = {
            "case_.ReportedBy": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.ReportedBy.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.PersonsName": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_Name.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.PersonsEmail": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_EMail.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.ContactBeforeAction": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.ContactBeforeAction.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.PersonsPhone": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_Phone.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.PersonsCellphone": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Region_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Region_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Department_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Department_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Project_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Project.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Problem_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Problem.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Change_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Change.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.OU_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.OU_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.CostCentre":{
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.CostCentre.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Verified":{
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Verified.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.VerifiedDescription":{
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.VerifiedDescription.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.SolutionRate":{
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.SolutionRate.ToString(), Model.IsCaseReopened)"); }
            },
            "CustomerRegistrationSourceId": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.RegistrationSourceCustomer.ToString(), Model.IsCaseReopened)"); }
            },
            "InitiatorCategory": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.UserSearchCategory_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Place": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Place.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.UserCode": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.UserCode.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.InventoryNumber": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.InventoryNumber.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.InventoryType": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.InventoryLocation": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.InventoryLocation.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.ComputerType_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.ProductArea_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.CaseType_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.CaseType_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.System_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.System_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Urgency_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Urgency_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Impact_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Impact_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Category_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Category_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Supplier_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Supplier_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.InvoiceNumber": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.ReferenceNumber": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Caption": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Caption.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Description": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Description.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Miscellaneous": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Miscellaneous.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.AgreedDate": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.AgreedDate.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Available": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Available.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.WorkingGroup_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.CausingPartId": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.CausingPart.ToString(), Model.IsCaseReopened)"); }
            },
            "ResponsibleUser_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.CaseResponsibleUser_Id.ToString(), Model.IsCaseReopened)"); }
           },
            "Performer_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Priority_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Priority_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.Status_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Status_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.StateSecondary_Id": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.PlanDate": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.PlanDate.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.WatchDate": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.WatchDate.ToString(), Model.IsCaseReopened)"); }
            },
            "case_.FinishingDescription": {
                required: function() { return FieldIsRequired("@Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.FinishingDescription.ToString(), Model.IsCaseReopened)"); }
            },

            "CaseLog.FinishingType": {
                required: function () {
                    if ($('#CaseLog_FinishingDate').closest('tr').css('display') !== 'none' && $('#CaseLog_FinishingType').closest('tr').css('display') !== 'none') {
                        if (($('#CaseLog_FinishingDate').val() == "" || $('#CaseLog_FinishingDate').val() == null) && @Json.Encode(@Model.IsRequired(GlobalEnums.TranslationCaseFields.FinishingDate, CaseSolutionFields.FinishingDate)) == false) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                    else {
                        return false;
                    }
                }
            },
            "CaseLog.FinishingDate": {
                required: function()
                {
                    if ($('#CaseLog_FinishingType').closest('tr').css('display') != 'none' && $('#CaseLog_FinishingDate').closest('tr').css('display') != 'none')
                    {
                        if ($('#CaseLog_FinishingType').val() == "" && @Json.Encode(@Model.IsRequired(GlobalEnums.TranslationCaseFields.ClosingReason, CaseSolutionFields.FinishingCause)) == false)
                        {
                            return false;
                        }
                        else{
                            return true;
                        }
                    }
                    else{
                        return false;
                    }
                }
            },
            "CaseLog.TextExternal": {
/*                maxlength: 3000,*/
                required: function() {
                    return $('#divCaseLogFiles.externalLog-files tr').length > 0;
                },
                @if (Model.CustomerSettings.ModuleInvoice)
                {
                        <text>
                        require_from_group: {
                            param: [1, ".log-field"],
                            depends: function (element) {

                                var logPopulated = $("#" + "@Html.IdFor(x => x.CaseLog.TextInternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== ""
                                    || $("#" + "@Html.IdFor(x => x.CaseLog.TextExternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== "";


                                var timeSpentHour = $("#CaseLog_WorkingTimeHour").val().replace(/\r/g, "") !== "";
                                var timeSpentMin = $("#CaseLog_WorkingTimeMinute").val().replace(/\r/g, "") !== "";
                                var overTimeHour = $("#CaseLog_OvertimeHour").val().replace(/\r/g, "") !== "";
                                var overTimeMin = $("#CaseLog_OvertimeMinute").val().replace(/\r/g, "") !== "";
                                var material = $("#" + "@Html.IdFor(x => x.CaseLog.EquipmentPrice)").val().replace(/\r/g, "") !== "0"
                                    && $("#" + "@Html.IdFor(x => x.CaseLog.EquipmentPrice)").val().replace(/\r/g, "") !== "";
                                var price = $("#" + "@Html.IdFor(x => x.CaseLog.Price)").val().replace(/\r/g, "") !== "0"
                                    && $("#" + "@Html.IdFor(x => x.CaseLog.Price)").val().replace(/\r/g, "") !== "";


                                return (timeSpentHour || timeSpentMin || overTimeHour || overTimeMin || material || price) && !logPopulated;
                            }
                        }
                        </text>
                }
                },
                "CaseLog.TextInternal": {
/*                    maxlength: 3000,*/
                    @if (Model.CustomerSettings.ModuleInvoice)
                    {
                            <text>
                            require_from_group: {
                            param: [1, ".log-field"],
                            depends: function (element) {

                                var logPopulated = $("#" + "@Html.IdFor(x => x.CaseLog.TextInternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== ""
                                    || $("#" + "@Html.IdFor(x => x.CaseLog.TextExternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== "";

                                    var timeSpentHour = $("#CaseLog_WorkingTimeHour").val().replace(/\r/g, "") !== "";
                                    var timeSpentMin = $("#CaseLog_WorkingTimeMinute").val().replace(/\r/g, "") !== "";
                                    var overTimeHour = $("#CaseLog_OvertimeHour").val().replace(/\r/g, "") !== "";
                                    var overTimeMin = $("#CaseLog_OvertimeMinute").val().replace(/\r/g, "") !== "";
                                    var material = $("#" + "@Html.IdFor(x => x.CaseLog.EquipmentPrice)").val().replace(/\r/g, "") !== "0"
                                        && $("#" + "@Html.IdFor(x => x.CaseLog.EquipmentPrice)").val().replace(/\r/g, "") !== "";
                                    var price = $("#" + "@Html.IdFor(x => x.CaseLog.Price)").val().replace(/\r/g, "") !== "0"
                                    && $("#" + "@Html.IdFor(x => x.CaseLog.Price)").val().replace(/\r/g, "") !== "";

                                    return (timeSpentHour || timeSpentMin || overTimeHour || overTimeMin || material || price) && !logPopulated;
                                }
                            }
                            </text>
                    }
                    },
                    "CaseLog.WorkingTimeHour": {
                        require_from_group: {
                            param: [1, ".time-field"],
                            depends: function(element) {
                                var setting = window.parameters.departmentInvoiceMandatory && window.parameters.showInvoiceTime;

                                var logPopulated = $("#" + "@Html.IdFor(x => x.CaseLog.TextInternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== ""
                                    || $("#" + "@Html.IdFor(x => x.CaseLog.TextExternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== "";

                                return setting && logPopulated;
                            }
                        }
                    },
                    "CaseLog.WorkingTimeMinute": {
                        require_from_group: {
                            param: [1, ".time-field"],
                            depends: function(element) {
                                var setting = window.parameters.departmentInvoiceMandatory && window.parameters.showInvoiceTime;
                                var logPopulated = $("#" + "@Html.IdFor(x => x.CaseLog.TextInternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== ""
                                    || $("#" + "@Html.IdFor(x => x.CaseLog.TextExternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== "";

                                return setting && logPopulated;
                            }
                        }
                    },
                    "CaseLog.OvertimeHour": {
                        require_from_group: {
                            param: [1, ".time-field"],
                            depends: function(element) {
                                var setting = window.parameters.departmentInvoiceMandatory && window.parameters.showInvoiceOvertime;
                                var logPopulated = $("#" + "@Html.IdFor(x => x.CaseLog.TextInternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== ""
                                    || $("#" + "@Html.IdFor(x => x.CaseLog.TextExternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== "";

                                return setting && logPopulated;
                            }
                        }
                    },
                    "CaseLog.OvertimeMinute": {
                        require_from_group: {
                            param: [1, ".time-field"],
                            depends: function(element) {
                                var setting = window.parameters.departmentInvoiceMandatory && window.parameters.showInvoiceOvertime;
                                var logPopulated = $("#" + "@Html.IdFor(x => x.CaseLog.TextInternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== ""
                                    || $("#" + "@Html.IdFor(x => x.CaseLog.TextExternal)").val().replace(/\r/g, "").replace(/<[^>]*>/g, "") !== "";

                                return setting && logPopulated;
                            }
                        }
                    }
            }

            //Cost special
            @{
            var costFlag = Model.caseFieldSettings.CaseFieldSettingRequiredCheck(GlobalEnums.TranslationCaseFields.Cost.ToString(), Model.IsCaseReopened);
            }

            rules["@Html.NameFor(m => m.case_.Cost)"] = {
                    require_from_group: {
                        param: [3, ".cost-field"],
                        depends: function(element) {

                            return FieldIsRequired("@costFlag");

                        }
                    }
            }

            rules["@Html.NameFor(m => m.case_.OtherCost)"] = {
                    require_from_group: {
                        param: [3, ".cost-field"],
                        depends: function(element) {

                            return FieldIsRequired("@costFlag");

                        }
                    }
            }

            rules["@Html.NameFor(m => m.case_.Currency)"] = {
                    require_from_group: {
                        param: [3, ".cost-field"],
                        depends: function(element) {

                            return FieldIsRequired("@costFlag");

                        }
                    }
        }

            return rules;
    }


    var validator = $("#target").validate({
        ignore: ".note-editor *",
        rules: getRules(),
        groups: {
            time: "CaseLog.WorkingTimeHour CaseLog.WorkingTimeMinute CaseLog.OvertimeHour CaseLog.OvertimeMinute",
            logInput: "CaseLog.TextExternal CaseLog.TextInternal"
        },
        errorPlacement: function (error, element) {


            if (element.hasClass("time-field")) {
                $("#timeValidationMessage").html(error);
            } else if (element.hasClass("cost-field")) {
                $("#costValidationMessage").html(error);
            } else if (element.hasClass("summernoteinternal") || element.hasClass("summernotedesc") || element.hasClass("summernoteexternal")) {

                error.insertAfter(element.siblings(".note-editor"));

            } else {
                if (element.is("select.chosen-single-select")) {
                    error.insertAfter($("#" + element.attr("id") + "_chosen"));
                    error.css("width","315px");
                } else if (element.parent().hasClass('date')) {
                    element.parent().append(error);
                } else {
                    error.insertAfter(element);
                }
            }
        },
        highlight: function (element, errorClass, validClass) {

            if ($(element).hasClass("summernoteinternal") || $(element).hasClass("summernotedesc") || $(element).hasClass("summernoteexternal")) {

                $(element).siblings(".note-editor").addClass("error")

            } else {

                $(element).addClass("error");
            }
        },
        unhighlight: function (element, errorClass, validClass) {

            if ($(element).hasClass("summernoteinternal") || $(element).hasClass("summernotedesc") || $(element).hasClass("summernoteexternal")) {

                $(element).siblings(".note-editor").removeClass("error")

            } else {
                $(element).removeClass("error");
            }
        },
        messages: {
            "case_.ReportedBy": {
                required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ReportedBy.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.PersonsName": {
                required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Persons_Name.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.PersonsEmail": {
                required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Persons_EMail.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.PersonsPhone": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Persons_Phone.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.ContactBeforeAction": {
               required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ContactBeforeAction.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.PersonsCellphone": {
                required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Persons_CellPhone.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Region_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Region_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Department_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Department_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Project_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Project.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Problem_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Problem.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Change_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Change.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.OU_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.OU_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "@Html.NameFor(m => m.case_.Cost)":{
                require_from_group: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Cost.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "@Html.NameFor(m => m.case_.OtherCost)":{
                require_from_group: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Cost.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "@Html.NameFor(m => m.case_.Currency)":{
                require_from_group: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Cost.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.CostCentre":{
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.CostCentre.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Verified":{
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Verified.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.VerifiedDescription":{
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.VerifiedDescription.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.SolutionRate":{
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.SolutionRate.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "InitiatorCategory": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.UserSearchCategory_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "CustomerRegistrationSourceId": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.RegistrationSourceCustomer.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Place": {
            required:"@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Place.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.UserCode": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.UserCode.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.InventoryNumber": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.InventoryNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.InventoryType": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.InventoryLocation": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.InventoryLocation.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.ComputerType_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ComputerType_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.ProductArea_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ProductArea_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.CaseType_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.CaseType_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.System_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.System_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Urgency_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Urgency_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Impact_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Impact_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Category_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Category_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Supplier_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Supplier_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.InvoiceNumber": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.InvoiceNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.ReferenceNumber": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ReferenceNumber.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Caption": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Caption.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Description": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Description.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Miscellaneous": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Miscellaneous.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.AgreedDate": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.AgreedDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Available": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Available.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.WorkingGroup_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.WorkingGroup_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.CausingPartId": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.CausingPart.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "Performer_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Performer_User_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "ResponsibleUser_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.CaseResponsibleUser_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Priority_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Priority_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.Status_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.Status_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.StateSecondary_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.StateSecondary_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.PlanDate": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.PlanDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.WatchDate": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.WatchDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.FinishingDescription": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.FinishingDescription.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "CaseLog.FinishingType": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.ClosingReason.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "CaseLog.FinishingDate": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.FinishingDate.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "case_.IsAbout.Department_Id": {
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.IsAbout_Department_Id.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")"
            },
            "CaseLog.TextInternal": {
            @*maxlength: "@Translation.GetForJS("Ange inte mer än 3000 tecken", Enums.TranslationSource.TextTranslation)",*@
            required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")",
            require_from_group: "@Translation.GetForJS("Något av följande fält måste fyllas i")"
            },
            "CaseLog.TextExternal": {
                @*maxlength: "@Translation.GetForJS("Ange inte mer än 3000 tecken", Enums.TranslationSource.TextTranslation)",*@
                required: "@Translation.GetForJS(GlobalEnums.TranslationCaseFields.tblLog_Text_External.ToString(), Enums.TranslationSource.CaseTranslation, Model.case_.Customer_Id) @Translation.Get("måste anges")",
                require_from_group: "@Translation.GetForJS("Något av följande fält måste fyllas i")"
            },
            "CaseLog.WorkingTimeHour": { require_from_group: "@Translation.GetForJS("Välj en eller flera")" },
            "CaseLog.WorkingTimeMinute": { require_from_group: "@Translation.GetForJS("Välj en eller flera")" },
            "CaseLog.OvertimeHour": { require_from_group: "@Translation.GetForJS("Välj en eller flera")" },
            "CaseLog.OvertimeMinute": { require_from_group: "@Translation.GetForJS("Välj en eller flera")" }
    }
    });

    function isProductAreaValid() {
        var ret = true;
        var res = $("#ProductAreaHasChild").val();
        if (res == '1') {
            ret = false;
            document.getElementById('divProductArea').classList.add("error");
            ShowToastMessage(window.parameters.productAreaErrorMessage, "error", true);
        }
        return ret;
    }

    function isFinishingTypeValid() {
        var ret = true;
        var res = $("#FinishingCauseHasChild").val();
        if (res == '1') {
            ret = false;
            document.getElementById('divFinishingType').classList.add("error");
            ShowToastMessage(window.parameters.finishingTypeErrorMessage, "error", true);
        }
        return ret;
    }

    function FieldIsRequired(value) {

        var ret = false;
        if (value == '1') {
            ret = true;
        }
        if (value == '2'){
            var finnishDateValue = $("#CaseLog_FinishingDate").val();
            var hasCloseDate = finnishDateValue != undefined && finnishDateValue.length > 0;
            if (hasCloseDate)
                ret = true;
            else
                ret = false;
        }
        return ret;
    }


    @if (Model.newLog || Model.editLog)
    {
        <text>
        var utils = {
            okText: '',
            cancelText: '',
            yesText: '',
            noText: '',

            init: function(okText, cancelText, yesText, noText) {
                utils.okText = okText;
                utils.cancelText = cancelText;
                utils.yesText = yesText;
                utils.noText = noText;
            },

            showMessage: function (message, type) {

                $().toastmessage('showToast',
                {
                    text: utils.replaceAll(message, '|', '<br />'),
                    sticky: false,
                    position: 'top-center',
                    type: type || 'notice',
                    closeText: '',
                    stayTime: 10000,
                    inEffectDuration: 1000,
                    width: 700
                });
            },

            showWarning: function(message) {
                utils.showMessage(message, 'warning');
            },

            showError: function(message) {
                utils.showMessage(message, 'error');
            },

            replaceAll: function(string, omit, place, prevstring) {
                if (prevstring && string === prevstring)
                    return string;
                prevstring = string.replace(omit, place);
                return utils.replaceAll(prevstring, omit, place, string);
            }
        }

        var $form = $('#target');

    var getValidationErrorMessage = function (extraMessage) {


            var validationMessages = window.parameters.casesScopeInitParameters.validationMessages || '';
            var requiredFieldsMessage = window.parameters.casesScopeInitParameters.requiredFieldsMessage || '';
            var mandatoryFieldsText = window.parameters.casesScopeInitParameters.mandatoryFieldsText || '';
            var messages = [requiredFieldsMessage, '<br />', mandatoryFieldsText, ':'];
            $("label.error").each(function(key, el) {
                if ($(el).css('display') === 'none') {
                    return true;
                }
                var errorText = $(el).text();
                $.each(validationMessages,
                    function(index, validationMessage) {
                        errorText = '<br />' + '[' + utils.replaceAll(errorText, validationMessage, '').trim() + ']';
                    });
                messages.push(errorText);
            });

            messages.push(extraMessage);

            return messages.join('');
        };

    var isFormValid = function () {


            if (!$form.valid()) {
                utils.showError(getValidationErrorMessage());
                return false;
            }
            return true;
        };

        $('#log-action-save').on('click', function(e) {
            isFormValid();
        });
    </text>
    }

    $("#case__Description-error").live("click", function () {
        $(".summernotedesc").summernote("focus");
    });


</script>

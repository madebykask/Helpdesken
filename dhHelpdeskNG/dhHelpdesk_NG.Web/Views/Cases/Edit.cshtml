@model DH.Helpdesk.Web.Models.Case.CaseInputViewModel
@using DH.Helpdesk.Common.Extensions.Boolean
@using DH.Helpdesk.Web
@using DH.Helpdesk.Web.Common.Enums.Case

@{
    var t = new ViewDataDictionary { { "isJS", "true" } };
}

@if (TempData["NotFound"] != null)
{
    <div id="caseContainer">
        <div class="secnavs fixed">
            <div class="pull-left">
                <ul class="secnav">
                    <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Stäng"), "Index", new { customerId = SessionFacade.CurrentCustomer.Id }, new { @class = "btn", id = "case-action-close" })</li>
                </ul>
            </div>
        </div>
        <div class="content onemenu editcase" style="text-align: center;height: 80vh;">
            @TempData["NotFound"]
        </div>
    </div>
    return;
}

@section Styles
{
    @if (Model.DynamicCase != null && Model.DynamicCase.ExternalPage)
    {
        @Styles.Render("~/cases/dynamic-cases")
    }
}

@section Scripts
{
    @if (Model.DynamicCase != null || Model.ContainsExtendedCase || Model.HasExtendedComputerUsers)
    {
        @Scripts.Render("~/Content/js/iframeResizer")
    }

    @if (Model.DynamicCase != null && Model.DynamicCase.ExternalPage)
    {
        @Scripts.Render(BundleConfig.ScriptNames.DynamicCase)
    }

    @Scripts.Render("~/bundles/cases/edit")

    <script type="text/javascript">

        $(function () {

            var opt = {
                twoAttacmentsMode: @(Model.EnableTwoAttachments.ToJavaScriptBool()),
                fileUploadWhiteList: []
            }
                
                @if(Model.HasFileUploadWhiteList)
                {
                    foreach(var fileExtension in Model.FileUploadWhiteList)
                    {
                        @:opt.fileUploadWhiteList.push('@fileExtension');
                    }
                }
                else
                {
                    @:opt.fileUploadWhiteList = null;
                }

                CaseInitForm(opt);

                var dc = function(text) {
                    return $("<div>" + text + "<div>");
                };

                var confirmDialog = function(d, onOk, onCancel) {
                    return d.dialog({
                        title: '@Translation.GetForJS("Meddelande")',
                    buttons: [
                            {
                            text: '@Translation.GetForJS("OK")',
                            click: function() {
                                onOk();
                                d.dialog("close");
                            }
                        },
                        {
                            text: '@Translation.GetForJS("Avbryt")',
                            click: function() {
                                onCancel();
                                d.dialog("close");
                            }
                        }
                    ],
                    modal: true
                    });
                };

                var messageDialog = function(d) {
                    return d.dialog({
                        title: '@Translation.GetForJS("Meddelande")',
                    buttons: [
                            {
                            text: '@Translation.GetForJS("Stäng")',
                            click: function() {
                                d.dialog("close");
                            }
                        }
                    ],
                    modal: true
                    });
                };

                var emptyFn = function() {};

            $("#case-action-save").click(function(e) {
                    e.preventDefault();
                //$('#case__StateSecondary_Id').removeAttr('disabled');
                $('#ButtonClick').val('save');
                });

            $("#case-action-save-and-close").click(function(e) {
                    e.preventDefault();
                //$('#case__StateSecondary_Id').removeAttr('disabled');

                $('#ButtonClick').val('save');
                });

            $("#case-action-save-and-new").click(function(e) {

                    e.preventDefault();
                $('#ButtonClick').val('save');
                    //$('#case__StateSecondary_Id').removeAttr('disabled');
                });

            $("#case-action-close").click(function(e) {
                    e.preventDefault();

                $('#ButtonClick').val('save');

                    var targetUrl = $(this).attr("href");
                    UnLockCase('@Model.CaseLock.LockGUID', targetUrl);
                });

            $("#case-action-save-close-and-split").click(function(e) {
                    e.preventDefault();
                    //$('#case__StateSecondary_Id').removeAttr('disabled');

                    //$('#ButtonClick').val('save');

                    // Todo set new url
                });

            @*$("#case-action-delete").click(function (e) {
                if (hasNotInvoicedArticles()) {
                    messageDialog(dc('@Translation.GetForJS("Du får inte ta bort ett ärende som har invalda men ofakturerade artiklar.")'));
                    return false;
                }
                return true;
            })*@
        });

        function MakeAsUnread() {
            window.page.markAsUnread();
        };

        function UnLockCase(lockGuid, url) {
            window.page.unlockCase(lockGuid, url);
        };

        function UnLockCaseById(caseId, url) {
            window.page.unlockCaseById(caseId, url);
        };

        //HIDE SHOW
        $(".hidebtn").on("click", function (e) {
            e.preventDefault();
            $(this).parents(".section-block").addClass("hideshow");
            $(this).parent().parent().find("#fakeCaseFollowerUsersInput").addClass("hidefollowers");
            $(this).parent().parent().find("#fake_CaseLog_EmailRecepientsInternalLogTo").addClass("hidefollowers");
            $(this).parent().parent().find("#fake_CaseLog_EmailRecepientsInternalLogCc").addClass("hidefollowers");
        });
        $(".showbtn").on("click", function (e) {
            e.preventDefault();
            $(this).parents(".section-block").removeClass("hideshow");
            $(this).parent().parent().find("#fakeCaseFollowerUsersInput").removeClass("hidefollowers");
            $(this).parent().parent().find("#fake_CaseLog_EmailRecepientsInternalLogTo").removeClass("hidefollowers");
            $(this).parent().parent().find("#fake_CaseLog_EmailRecepientsInternalLogCc").removeClass("hidefollowers");
        });
    </script>

    @if (Model.DynamicCase != null && Model.DynamicCase.ExternalPage)
    {
        <script type="text/javascript">
            $(function () {
                var currentpage = new dhform({
                    url: '@Model.DynamicCase.BuildUrl()',
                    modal: '@Model.DynamicCase.ViewMode'
                });
            });
        </script>
    }
}
<div id="caseContainer">

    @Html.Partial("_Plupload")

    @if (Html.MasterModel() != null && SessionFacade.CurrentUser != null && Model != null)
    {
        using (Html.BeginForm("edit", "cases", null, FormMethod.Post, new { id = "target" }))
        {
            @Html.HiddenFor(m => m.BackUrl)

            <div class="secnavs fixed">
                <div class="pull-left">
                    <ul class="secnav">
                        @if (Model.EditMode == AccessMode.FullAccess)
                        {
                            <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Spara"), null, null, null, new { @class = "btn save", id = "case-action-save" })</li>
                            <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Spara och stäng"), null, null, new { @class = "btn save-close", id = "case-action-save-and-close" })</li>
                            {
                                var x = Model.CaseTemplateSplitToCaseSolutionID.HasValue;
                            }
                            if (Model.CaseTemplateSplitToCaseSolutionID.HasValue)
                            {
                                <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Save and split"), null, null, null, new { @class = "btn edit-close-split", id = "case-action-save-close-and-split" })</li>
                            }
                            <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Spara") + "/" + Translation.GetCoreTextTranslation("Nytt ärende"), null, null, new { @class = "btn save-new", id = "case-action-save-and-new" })</li>
                            <li><i id="TemplateQuickButtonIndicator" class="gif-loader" style="display:none">&nbsp;</i></li>
                            <li class="secspace"></li>
                            if (SessionFacade.CurrentUser.DeleteCasePermission == 1)
                            {
                                <li>
                                    @Html.ActionLink(Translation.GetCoreTextTranslation("Ta bort"), "DeleteCase",
                                    new { caseId = @Model.case_.Id, customerId = @Model.case_.Customer_Id }, new
                                    {
                                        @class = "btn caseDeleteDialog",
                                        id = "case-action-delete",
                                        deleteDialogText = Translation.GetCoreTextTranslation("Är du säker på att du vill radera detta ärende") + '?'
                                    })
                                </li>
                            }
                        }
                        @if (string.IsNullOrEmpty(Model.BackUrl))
                        {
                            <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Stäng"), "Index", new { customerId = @Model.case_.Customer_Id }, new { @class = "btn", id = "case-action-close" })</li>
                        }
                        else
                        {
                            <li><a id="case-action-close" class="btn" href="@Model.BackUrl">@Translation.GetCoreTextTranslation("Stäng")</a></li>
                        }

                        @if (Model.EditMode == AccessMode.FullAccess)
                        {
                            <li>
                                <div id="divActionMenu" class="btn-group">
                                    <button class="btn dropdown-toggle" data-toggle="dropdown" id="btnActionMenu">
                                        @Translation.GetCoreTextTranslation("Åtgärder")
                                        <span class="caret">&nbsp;</span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a href="#" onclick="MakeAsUnread();">
                                                @Translation.GetCoreTextTranslation("Markera ärendet som oläst")
                                            </a>
                                        </li>
                                        @if (!Model.IsItChildCase() && SessionFacade.CurrentUser.CreateSubCasePermission == 1)
                                        {
                                            <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Skapa underärende"), "NewChildCase", new { parentCaseId = Model.case_.Id })</li>
                                            if (!Model.IsItParentCase())
                                            {
                                                <li><a data-toggle="modal" id="case_connect_to_parent_btn" href="#">@Translation.GetCoreTextTranslation("Koppla till huvudärende")</a></li>
                                                @Html.HiddenFor(m => m.case_.Id, new { @id = "connect_to_parent_childId" })
                                            }
                                        }
                                        @if (SessionFacade.CurrentUser.ActivateCasePermission == 1 && Model.case_.FinishingDate.HasValue && (!Model.IsItChildCase() || (Model.IsItChildCase() && !Model.ParentCaseInfo.IsCaseClosed)))
                                        {
                                            <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Aktivera"), "Activate", "Cases", new { id = Model.case_.Id, backUrl = Model.BackUrl }, new { @class = "btn" })</li>
                                        }



                                        @if (SessionFacade.CurrentUser.MoveCasePermission == 1)
                                        {
                                            <li><a data-toggle="modal" href="#divMoveCase">@Translation.GetCoreTextTranslation("Flytta")</a></li>
                                        }
                                        @if (SessionFacade.CurrentUser.CopyCasePermission == 1)
                                        {
                                            <li><a data-toggle="modal" href="#divCopyCase">@Translation.GetCoreTextTranslation("Kopiera")</a></li>
                                        }

                                        @if (SessionFacade.CurrentUser.FollowUpPermission == 1)
                                        {
                                            if (Model.IsFollowUp)
                                            {
                                                <li><a href="/cases/followupRemove/@Model.case_.Id">@Translation.GetCoreTextTranslation("Ta bort uppföljning")</a></li>
                                            }
                                            else
                                            {
                                                <li><a href="/cases/followup/@Model.case_.Id">@Translation.GetCoreTextTranslation("Följ upp")</a></li>
                                            }
                                        }

                                        @if (Model.Languages != null && Model.Languages.Where(l => l.IsActive != 0).ToList().Count > 1)
                                        {
                                            var curLanguage = (Model.case_.Id == 0 ? SessionFacade.CurrentLanguageId : Model.case_.RegLanguage_Id);
                                            <li class="dropdown-submenu">
                                                <a href="#">
                                                    @Translation.GetCoreTextTranslation("Språk för E-mail")
                                                </a>
                                                <ul class="dropdown-menu">
                                                    @foreach (var lang in Model.Languages.Where(l => l.IsActive != 0).ToList())
                                                    {
                                                        var langNameId = "langItem" + lang.Id;
                                                        <li>

                                                            <a id="@langNameId" class="langItem" href="#" onclick="ChangeCaseLanguageTo(@lang.Id,true);">
                                                                @Translation.GetCoreTextTranslation(lang.Name)
                                                                @if (lang.Id == curLanguage)
                                                                {
                                                                    <i class='icon-ok'></i>
                                                                }
                                                            </a>
                                                        </li>
                                                    }
                                                </ul>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </li>

                            <li id="btnCaseTemplate">
                                @Html.Partial("_CaseTemplateTree", Model.CaseTemplateTreeButton, t)
                            </li>

                        }
                        else
                        {
                            if (Model.CaseUnlockAccess || SessionFacade.CurrentUser.FollowUpPermission == 1)
                            {
                                <li>
                                    <div id="divActionMenu" class="btn-group">
                                        <button class="btn dropdown-toggle" data-toggle="dropdown" id="btnActionMenu">
                                            @Translation.GetCoreTextTranslation("Åtgärder")
                                            <span class="caret">&nbsp;</span>
                                        </button>
                                        <ul class="dropdown-menu">
                                            @if (SessionFacade.CurrentUser.FollowUpPermission == 1)
                                            {
                                                if (Model.IsFollowUp)
                                                {
                                                    <li><a href="/cases/followupRemove/@Model.case_.Id">@Translation.GetCoreTextTranslation("Ta bort uppföljning")</a></li>
                                                }
                                                else
                                                {
                                                    <li><a href="/cases/followup/@Model.case_.Id">@Translation.GetCoreTextTranslation("Följ upp")</a></li>
                                                }

                                            }
                                            @if (Model.CaseUnlockAccess)
                                            {
                                                if (Model.CaseLock != null && Model.CaseLock.IsLocked)
                                                {
                                                    <li><a href="#" onclick="UnLockCaseById('@Model.case_.Id', '@Url.Action("Edit", new { id = Model.case_.Id })')">@Translation.GetCoreTextTranslation("Lås upp")</a></li>
                                                }
                                            }
                                        </ul>
                                    </div>
                                </li>
                            }
                            if (SessionFacade.CurrentUser.ActivateCasePermission == 1 && Model.case_.FinishingDate.HasValue
                                && (!Model.IsItChildCase() || (Model.IsItChildCase() && !Model.ParentCaseInfo.IsCaseClosed)))
                            {
                                <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Aktivera"), "Activate", "Cases", new { id = Model.case_.Id, backUrl = Model.BackUrl }, new { @class = "btn" })</li>
                            }



                        }

                        @*At the moment we do not check access for this /TAN*@
                        @if (!Model.CaseLock.IsLocked)
                        {
                            @Html.Partial("WorkflowStep", Model.WorkflowSteps)
                        }
                    </ul>
                </div>
                <div class="pull-right">
                    <ul class="secnav">
                        @if (Model.CaseTemplateButtons != null && Model.CaseTemplateButtons.Any())
                        {
                            foreach (var button in Model.CaseTemplateButtons)
                            {
                                <li><a href="#" onclick='LoadTemplate("@button.CaseTemplateId.ToString()")' title="@button.CaseTemplateName" class="btn templateQuickButton" rel="tooltip" data-placement="bottom" data-original-title="@button.CaseTemplateName"> @button.ButtonNumber </a></li>
                            }
                        }

                        @if (Model.case_.Id > 0)
                        {
                            <li><a title="@Translation.GetCoreTextTranslation("Skriv ut")" class="btn print-case"><i class="icon-file"></i></a></li>
                        }
                        <li><a onclick="UnLockCase('@Model.CaseLock.LockGUID')" href="@Model.case_.Id.GetUrlForNavigationBetweenCases()" title="@Translation.GetCoreTextTranslation("Föregående ärende")" class="btn previous-case"><i class="icon-chevron-left"></i></a></li>
                        <li><a onclick="UnLockCase('@Model.CaseLock.LockGUID')" href="@Model.case_.Id.GetUrlForNavigationBetweenCases(true)" title="@Translation.GetCoreTextTranslation("Nästa ärende")" class="btn next-case"><i class="icon-chevron-right"></i></a></li>
                    </ul>
                </div>
            </div>

            <div id="casePart001" class="editmode">
                @Html.Partial("_Input", Model)
            </div>
        }
        <div id="divMoveCase" role="dialog" class="modal hide fade" aria-labelledby="myModalLabel" aria-hidden="true">
            @Html.Action("MoveCaseModal", new { caseId = Model.CaseId, customerId = Model.CustomerId })
        </div>
        <div id="divCopyCase" role="dialog" class="modal hide fade" aria-labelledby="myModalLabel" aria-hidden="true">
            @Html.Partial("_CopyCase", Model)
        </div>
        if (!Model.IsItChildCase() && !Model.IsItParentCase())
        {
            <div id="divConnectParentToParent" role="dialog" class="modal hide fade case-connect-to-parent" aria-labelledby="myModalLabel" aria-hidden="true">
                @Html.Partial("_ParentCases", Model.ConnectToParentModel)
            </div>
        }
    }
</div>
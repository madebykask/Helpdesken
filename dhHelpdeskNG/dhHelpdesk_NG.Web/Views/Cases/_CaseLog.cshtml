@model DH.Helpdesk.Web.Models.Case.CaseLogViewModel

@using DH.Helpdesk.BusinessData.OldComponents
@using DH.Helpdesk.Web.Infrastructure.Extensions
@using DH.Helpdesk.Web.Infrastructure.Extensions.HtmlHelperExtensions
@using DH.Helpdesk.Common.Enums.Settings

@if (Model != null && Model.Logs != null)
{
    <div class="tab-pane tab-pane-border active" id="logtab">
        <table class="table table-striped table-bordered table-hover caselog">
        @if (Model.Logs.Any())
        {
            <thead>
                <tr>
                    <th>@Translation.GetCoreTextTranslation("Datum")</th>
                    <th>@Translation.GetCoreTextTranslation("Registrerad av")</th>
                    @if (Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.tblLog_Text_External, CaseSolutionFields.ExternalLogNote) == string.Empty)
                    {
                        <th>@Translation.GetForCase(GlobalEnums.TranslationCaseFields.tblLog_Text_External.ToString(), Model.CustomerId) </th>
                    }
                    <th>@Translation.GetForCase(GlobalEnums.TranslationCaseFields.tblLog_Text_Internal.ToString(), Model.CustomerId) </th>
                    <th>@Translation.GetCoreTextTranslation("E-post")</th>
                    <th>@Translation.GetCoreTextTranslation("Filer")</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in Model.Logs)
                {
                    if (Model.CaseInternalLogAccess || !string.IsNullOrEmpty(r.TextExternal))
                    {
                        <tr id="@r.Id">
                            @* Date Log note cell *@
                            <td style="max-width: 105px">
                                @if (r.FinishingDate.HasValue)
                                {
                                    <span class="case-icon solved" title="@Translation.GetCoreTextTranslation("Stängt")"></span>
                                }
                                @{ r.LogDate = TimeZoneInfo.ConvertTimeFromUtc(r.LogDate.ToUniversalTime(), Model.UserTimeZone); }
                                <a href="@GetLogLink(r)">@Html.DisplayFor(m => r.LogDate, "DateAndTime") </a>
                            </td>

                            @* User Log note cell *@
                            <td style="max-width: 110px" class="wordbreak">
                                <a href="@GetLogLink(r)">@(r.User == null || r.User.Id == 0 ? r.RegUser : Html.FormatUserName(r.User, Model.Setting))</a>
                            </td>


                            @* External Log note cell: *@
                            @{ var isExternalLogVisible = Model.GetFieldStyle(GlobalEnums.TranslationCaseFields.tblLog_Text_External, CaseSolutionFields.ExternalLogNote) == string.Empty; }
                            @if (isExternalLogVisible)
                            {
                            <td class="wordbreak" style="width: 25%; max-width: 300px">
                                <a href="@GetLogLink(r)"> @Html.Encode(r.TextExternal).ForHtmlView()</a>
                            </td>
                            }

                            @* Internal Log note cell: *@
                            <td class="wordbreak" style="@(isExternalLogVisible ? "width: 25%; max-width: 300px" : "width: 40%; max-width: 300px")">
                                @if (Model.CaseInternalLogAccess)
                                {
                                    <a href="@GetLogLink(r)"> @Html.Encode(r.TextInternal).ForHtmlView()</a>
                                }
                            </td>

                            @* Emails cell: *@
                            <td class="wordbreak" style="max-width: 150px">
                                @Html.Partial("_LogNoteEmails", Model.CreateEmailsViewModel(r))
                            </td>

                            @* Log Files: *@
                            <td class="wordbreak" style="max-width: 150px">
                              @Html.Partial("_LogNoteFiles", Model.CreateFilesViewModel(r))
                            </td>
                        </tr>
                        }
                }
            </tbody>
        }
        </table>
    </div>
}

@functions
{
    private string GetLogLink(DH.Helpdesk.BusinessData.Models.Logs.Output.LogOverview log)
    {
        if (log.ProblemId.HasValue)
        {
            return Url.Action("Problem", "Problems", new { id = log.ProblemId.Value });
        }
        return Url.Action("editlog", "cases", new { area = "", id = log.Id, customerId = Model.CaseCustomerId, editLog = true, isCaseReopened = Model.IsCaseReopened });
    }
}


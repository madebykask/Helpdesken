@model DH.Helpdesk.Web.Models.Case.CaseInputViewModel
@using DH.Helpdesk.Web.Common.Enums.Case

<link href="~/Content/css/summernote.css" rel="stylesheet" />
<script src="~/Content/summernote-0.8.18/summernote.js"></script>

@if (Model != null)
{
    ViewData.Add("readonlyLog", !Model.newLog);

    using (Html.BeginForm("editlog", "cases", null, FormMethod.Post, new { id = "target" }))
    {
        <div class="secnavs fixed">
            <div class="pull-left">
                <ul class="secnav">
                    @if (Model.EditMode == AccessMode.FullAccess && !Model.newLog)
                    {
                        <li>
                            @Html.ActionLink(Translation.GetCoreTextTranslation("Ta bort"), "deletelog",
                                new { id = @Model.CaseLog.Id, caseId = @Model.case_.Id },
                                new { @class = "btn deleteDialog", deleteDialogText = Translation.GetCoreTextTranslation("Är du säker på att du vill ta bort aktuell post") + "?" })
                        </li>
                    }
                    @if (Model.newLog)
                    {
                        @*<li>@Html.ActionLink(Translation.GetCoreTextTranslation("Spara"), null, null, null, new { @class = "btn", id = "log-action-save" })</li>*@
                        <li><input type="submit" id="log-action-save" class="btn" value="@Translation.GetCoreTextTranslation("Spara")"> </li>
                        @*<li>@Html.ActionLink(Translation.Get("Spara", Enums.TranslationSource.TextTranslation), "editlog", "cases", new { Id = Model.CaseLog.Id }, new { @class = "btn save", id = "case-action-save" })</li>*@

                    }
                    else
                    {
                        <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Ändra"), "editlog", "cases", new { Id = @Model.CaseLog.Id, customerId = Model.case_.Customer_Id, newLog = true, editLog = false, isCaseReopened = Model.IsCaseReopened }, new { @class = "btn" })</li>
                    }
                    <li>@Html.ActionLink(Translation.GetCoreTextTranslation("Stäng"), "edit", "cases", new { Id = @Model.case_.Id }, new { @class = "btn" })</li>
                </ul>
            </div>
        </div>
        <div class="content">
            <div class="container">
                <ul class="nav nav-tabs" id="myTab">
                    <li class="active"><a href="#fragment-1">@Translation.Get("Logg", Enums.TranslationSource.TextTranslation)</a></li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane tab-pane-border active editmode" id="logtab">
                        @Html.Partial("_CaseLogInput", Model)
                    </div>
                </div>
            </div>
        </div>
    }
}


@section Scripts {
    @Scripts.Render("~/bundles/Cases/common")

    <script type="text/javascript">
        $(function () {
            LogInitForm();

            $("a.isExisted").on("click", function (e) {
                var exists = $(this).checkUrlFileExists();
                if (!exists) {
                    e.preventDefault();
                    ShowToastMessage(window.parameters.fileExistError, "error");
                }
            });
        });

        dhHelpdesk.caseLog =
        {
            deleteLogFileConfirmMessage: '@Translation.GetForJS("Är du säker på att du vill ta bort bifogad fil")' + '?',
            deleteCaseFileExtraInvoiceMessage: '@Translation.GetForJS("Obs! Den tas även bort från order")',
            okText: '@Translation.GetForJS("OK")',
            cancelText: '@Translation.GetForJS("Avbryt")',
            yesText: '@Translation.GetForJS("Ja")',
            noText: '@Translation.GetForJS("Nej")'
        };
    </script>
}

<script>

    //Declare height
    let height = 100;


    let summerNoteInternalConfig = {
        placeholder: '',
        dialogsFade: true,
        tabsize: 1,
        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36', '48', '64', '82'],
        toolbar: [['style', ['bold', 'italic', 'underline', 'clear']], ['fontname', ['fontname']], ['fontsize', ['fontsize']], ['color', ['color']], ['para', ['ul', 'ol']], ['insert', ['link', 'picture']]],
        disableResizeImage: true,
        disableResizeEditor: true,
        callbacks: {
            onChange: function (contents, $editable) {
                $('.summernoteinternal').val($('.summernoteinternal').summernote('isEmpty') ? "" : contents);

                validator.element($('.summernoteinternal'));
            },
            onPaste: function (e) {
                var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text');
                e.preventDefault();
                document.execCommand('insertText', false, bufferText);
            }
        }
    }

    let summerNoteExternalConfig = {
        placeholder: '',
        dialogsFade: true,
        tabsize: 1,
        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36', '48', '64', '82'],
        toolbar: [['style', ['bold', 'italic', 'underline', 'clear']], ['fontname', ['fontname']], ['fontsize', ['fontsize']], ['color', ['color']], ['para', ['ul', 'ol']], ['insert', ['link', 'picture']]],
        disableResizeImage: true,
        disableResizeEditor: true,
        callbacks: {
            onChange: function (contents, $editable) {

                $('.summernoteexternal').val($('.summernoteexternal').summernote('isEmpty') ? "" : contents);

                validator.element($('.summernoteexternal'));

            },
            onPaste: function (e) {
                var bufferText = ((e.originalEvent || e).clipboardData || window.clipboardData).getData('Text');
                e.preventDefault();
                document.execCommand('insertText', false, bufferText);
            }
        }
    }


    //Init summernote
    $(document).ready(function () {


        $('.summernoteinternal').summernote(summerNoteInternalConfig)
        $('.summernoteexternal').summernote(summerNoteExternalConfig)



        function sizeChanged(element) {

            let elementId = "#" + element[0].target.id;

            let toolBarHeight = $(elementId + ' .note-toolbar')[0].offsetHeight;
            let footerHeight = $(elementId + ' .note-resizebar')[0].offsetHeight;
            let padding = 53;

            //Rescale summernote
            $(elementId + ' .note-editable').height(element[0].target.offsetHeight - toolBarHeight - footerHeight - padding);

        }

        //Set default true height
        $('textExternalOuter.note-editable').height(height);
        $('textInternalOuter.note-editable').height(height);

        //Trigger resize
        if (typeof textExternalOuter != 'undefined') {
            new ResizeObserver(sizeChanged).observe(textExternalOuter)
        }
        if (typeof textInternalOuter != 'undefined') {
            new ResizeObserver(sizeChanged).observe(textInternalOuter)
        }


        //Loop all .summernote to try to find the disabled ones
        $(".summernoteinternal").each(function () {

            if (this.readOnly) {
                $("#" + this.id).summernote("disable");
            }

        });

        $(".summernoteexternal").each(function () {

            if (this.readOnly) {
                $("#" + this.id).summernote("disable");
            }

        });

    });
</script>
@using System.Web.Optimization
@model DH.Helpdesk.Web.Models.Notifiers.InputModel
           
@Scripts.Render("~/bundles/notifiers/notifier")

<script type="text/javascript">
    window.parameters = {
        departmentDropDownUrl: '@Url.Action("DepartmentDropDown")'            
    };           

    @if (Model.Managers.Show)
    {
        @:window.parameters.showManager = true;
        @:window.parameters.managers = [];        
        
        foreach (var manager in Model.Managers.Value.Items)
        {
            @:window.parameters.managers.push({ displayName: '@manager.Name', id: '@manager.Value' });
        }
    }
    else
    {
        @:window.parameters.showManager = false;
    }
</script>

<div class="content">
    <div class="contentContent">
        <div class="container">
            <ul class="nav nav-tabs">
                <li class="active">
                    <a href="#fragment-1">@Translation.Get("Anmälare", Enums.TranslationSource.TextTranslation)</a>
                </li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane tab-pane-border active" id="fragment-1">
                    @if (Model.UserId.Show || Model.Domain.Show || Model.LoginName.Show 
                        || Model.FirstName.Show || Model.Initials.Show || Model.LastName.Show 
                        || Model.DisplayName.Show || Model.Place.Show || Model.Phone.Show 
                        || Model.CellPhone.Show || Model.Email.Show || Model.Code.Show)
                    {
                        @Html.Partial("NotifierEdit/GeneralFields", Model)
                    }
                
                    @if (Model.PostalAddress.Show || Model.PostalCode.Show || Model.City.Show)
                    {
                        @Html.Partial("NotifierEdit/AddressFields", Model)
                    }
                    
                    @if (Model.Title.Show || Model.Department.Show || Model.Unit.Show 
                        || Model.OrganizationUnit.Show || Model.Division.Show || Model.Managers.Show 
                        || Model.Group.Show || Model.Other.Show)
                    {
                        @Html.Partial("NotifierEdit/OrganizationFields", Model)
                    }
                    
                    @if (Model.Ordered.Show)
                    {
                        @Html.Partial("NotifierEdit/OrdererFields", Model)
                    }
                
                    @Html.Partial("NotifierEdit/StateFields", Model)
                </div>
             </div>
        </div>
    </div>
</div>


<script type="text/javascript">

    var validationTrans = "@Translation.GetForJS("måste anges")";
    var userIdNotUnique = "@Translation.GetForJS("inte unikt")";
    
    var validator = $("#target").validate({
        ignore: "",
        rules: {
            "UserId.Value": {
                required: getBoolean("@Model.UserId.Required"),
                remote: {
                    url: "@Url.Action("CheckUniqueUserId", "Notifiers")",
                    type: "GET",
                    data: {
                        userId: function() {
                            return $("#@Html.IdFor(m => m.UserId.Value)").val();
                        },
                        initiatorId: function () {
                            return @Model.Id;
                        },
                        curTime: Date.now
                        
                    }
                }
            },

            "DomainId": {
                required: getBoolean("@Model.Domain.Required")
            },

            "LoginName.Value": {
                required: getBoolean("@Model.LoginName.Required")
            },

            "FirstName.Value": {
                required: getBoolean("@Model.FirstName.Required")
            },

            "Initials.Value": {
                required: getBoolean("@Model.Initials.Required")
            },

            "LastName.Value": {
                required: getBoolean("@Model.LastName.Required")
            },

            "DisplayName.Value": {
                required: getBoolean("@Model.DisplayName.Required")
            },

            "Place.Value": {
                required: getBoolean("@Model.Place.Required")
            },

            "Phone.Value": {
                required: getBoolean("@Model.Phone.Required")
            },

            "CellPhone.Value": {
                required: getBoolean("@Model.CellPhone.Required")
            },

            "Email.Value": {
                required: getBoolean("@Model.Email.Required")
            },

            "Code.Value": {
                required: getBoolean("@Model.Code.Required")
            },

            "PostalAddress.Value": {
                required: getBoolean("@Model.PostalAddress.Required")
            },

            "PostalCode.Value": {
                required: getBoolean("@Model.PostalCode.Required")
            },

            "City.Value": {
                required: getBoolean("@Model.City.Required")
            },

            "Title.Value": {
                required: getBoolean("@Model.Title.Required")
            },

            "RegionId": {
                required: getBoolean("@Model.Region.Required")
            },

            "DepartmentId": {
                required: getBoolean("@Model.Department.Required")
            },

            "OrganizationUnitId": {
                required: getBoolean("@Model.OrganizationUnit.Required")
            },

            "Unit.Value": {
                required: getBoolean("@Model.Unit.Required")
            },

            "DivisionId": {
                required: getBoolean("@Model.Division.Required")
            },

            "Manager": {
                required: getBoolean("@Model.Managers.Required")
            },

            "GroupId": {
                required: getBoolean("@Model.Group.Required")
            },

            "Other.Value": {
                required: getBoolean("@Model.Other.Required")
             },
        },
        messages: {
            "UserId.Value": {
                required: "@Model.UserId.Caption" + " " + validationTrans,
                remote: "@Model.UserId.Caption" + " " + userIdNotUnique
            },            

            "DomainId": {
                required: "@Model.Domain.Caption" + " " + validationTrans
            },

            "LoginName.Value": {
                required: "@Model.LoginName.Caption" + " " + validationTrans
            },

            "FirstName.Value": {
                required: "@Model.FirstName.Caption" + " " + validationTrans
            },

            "Initials.Value": {
                required: "@Model.Initials.Caption" + " " + validationTrans
            },

            "LastName.Value": {
                required: "@Model.LastName.Caption" + " " + validationTrans
            },

            "DisplayName.Value": {
                required: "@Model.DisplayName.Caption" + " " + validationTrans
            },

            "Place.Value": {
                required: "@Model.Place.Caption" + " " + validationTrans
            },

            "Phone.Value": {
                required: "@Model.Phone.Caption" + " " + validationTrans
            },

            "CellPhone.Value": {
                required: "@Model.CellPhone.Caption" + " " + validationTrans
            },

            "Email.Value": {
                required: "@Model.Email.Caption" + " " + validationTrans
            },

            "Code.Value": {
                required: "@Model.Code.Caption" + " " + validationTrans
            },

            "PostalAddress.Value": {
                required: "@Model.PostalAddress.Caption" + " " + validationTrans
            },

            "PostalCode.Value": {
                required: "@Model.PostalCode.Caption" + " " + validationTrans
            },

            "City.Value": {
                required: "@Model.City.Caption" + " " + validationTrans
            },

            "Title.Value": {
                required: "@Model.Title.Caption" + " " + validationTrans
            },

            "RegionId": {
                required: "@Model.Region.Caption" + " " + validationTrans
            },

            "DepartmentId": {
                required: "@Model.Department.Caption" + " " + validationTrans
            },

            "OrganizationUnitId": {
                required: "@Model.OrganizationUnit.Caption" + " " + validationTrans
            },

            "Unit.Value": {
                required: "@Model.Unit.Caption" + " " + validationTrans
            },

            "DivisionId": {
                required: "@Model.Division.Caption" + " " + validationTrans
            },

            "Manager": {
                required: "@Model.Managers.Caption" + " " + validationTrans
            },

            "GroupId": {
                required: "@Model.Group.Caption" + " " + validationTrans
            },

            "Other.Value": {
                required: "@Model.Other.Caption" + " " + validationTrans
            },
            
        }

    });

    function getBoolean(value) {
        var ret = false;
        var strVal = value.toLowerCase();

        switch (strVal) {

            case "false":
            case "0":
                ret = false;
                break;

            case 'true':
                ret = true;
                break;
        }

        return ret;
    }

</script>          